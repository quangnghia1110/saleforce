{
    "Bonus": [
        {
            "question": "Có những mô hình lập trình nào khác nhau cho các thành phần Lightning?",
            "answer": "Có 2 mô hình lập trình khác nhau cho các thành phần Lightning. Đầu tiên là sử dụng khung Aura để xây dựng các thành phần Aura, thứ hai là sử dụng khung mới hơn Lightning Web Components (LWC)."
        },
        {
            "question": "Tại sao bạn chọn một mô hình lập trình thay vì mô hình khác?",
            "answer": "Lightning Web Components nên là lựa chọn ưu tiên để phát triển nhờ hiệu suất cao hơn, dễ phát triển và phù hợp với các tiêu chuẩn web hiện đại. Tuy nhiên, trong một số trường hợp, thành phần Aura vẫn cần thiết, tính đến Summer ’21, bao gồm xây dựng mẫu cộng đồng và các thành phần có thể truy cập qua URL, mặc dù LWC đang nhanh chóng đạt được sự ngang bằng về tính năng."
        },
        {
            "question": "Làm thế nào để phát triển các thành phần này/cần sử dụng những công cụ nào?",
            "answer": "Thành phần Aura có thể được phát triển trực tiếp trong Salesforce bằng Developer Console, mặc dù các IDE bên thứ ba (như VSCode với SFDX) cải thiện đáng kể hiệu quả của nhà phát triển. LWC chỉ có thể được phát triển bằng công cụ bên thứ ba, Salesforce khuyến nghị sử dụng VSCode và gói mở rộng của họ."
        },
        {
            "question": "Hai mô hình lập trình này cùng tồn tại như thế nào?",
            "answer": "Thành phần Aura có thể chứa và sử dụng LWC, bao gồm giao tiếp qua sự kiện và phương thức thành phần. Tuy nhiên, ngược lại thì không đúng, LWC không thể bao gồm thành phần Aura và chỉ có thể là cha của nó. Mã cũng có thể được chia sẻ giữa Aura và LWC bằng mô-đun ES."
        },
        {
            "question": "Chúng ta có thể sử dụng các thành phần Lightning ở đâu?",
            "answer": "Các thành phần Lightning có thể được sử dụng ở nhiều nơi, từ các thành phần kéo thả trong trang Lightning App Builder, đến hành động nhanh khởi chạy qua nút trên trang chi tiết bản ghi. Thành phần cũng có thể được hiển thị dưới dạng tab hoặc địa chỉ URL để tùy chỉnh thêm. Ngoài ra, còn có các vị trí đặc thù như: Thanh Tiện ích, tích hợp Outlook và Gmail, Luồng, trang Visualforce, trang web bên ngoài, và snap-in trước trò chuyện."
        },
        {
            "question": "Chúng ta có thể sử dụng những kiểu dữ liệu nào trong các thành phần Lightning?",
            "answer": "Trong thành phần Aura, chúng ta có thể sử dụng các kiểu dữ liệu cơ bản như String, Boolean, Date, Object, v.v. và mảng của các kiểu đó. Chúng ta cũng có thể định nghĩa thuộc tính Aura để chứa SObjects, các kiểu dữ liệu nâng cao như hàm, kiểu dữ liệu do Apex định nghĩa và thuộc tính lưu trữ các thành phần khác. Trong LWC, mọi thứ đơn giản hơn vì không cần định nghĩa kiểu dữ liệu cho thuộc tính. Thuộc tính LWC có thể chứa bất kỳ kiểu dữ liệu JavaScript nào, như kiểu chuẩn, hàm, Nút HTML, Promise, v.v."
        },
        {
            "question": "Từ khóa 'this' biểu thị gì?",
            "answer": "Từ khóa 'this' xuất hiện trong cả Aura và LWC, với cách dùng tương tự. Trong LWC, 'this' truy cập bất kỳ thuộc tính hoặc phương thức nào của thành phần, vì nó trỏ đến ngữ cảnh gọi của mã hiện tại, thường là trong LWC. Trong Aura, 'this' không trỏ đến ngữ cảnh thành phần mà được dùng trong trợ giúp để tham chiếu các phương thức trợ giúp khác, vì ngữ cảnh gọi là trợ giúp."
        },
        {
            "question": "Làm thế nào để biểu đạt dữ liệu trong đánh dấu HTML của chúng ta?",
            "answer": "Để biểu đạt dữ liệu trong đánh dấu HTML, chúng ta dùng biểu thức liên kết. Cú pháp khác nhau giữa LWC và Aura. Trong Aura, có hai cú pháp: '{!v.value}' (liên kết hai chiều) và '{#v.value}' (liên kết một chiều). Trong LWC, chỉ có một cú pháp '{value}'. Ngoài hiển thị dữ liệu, chúng ta có thể dùng điều kiện và lặp. Trong Aura, dùng 'aura:if' cho logic 'nếu'; trong LWC dùng 'if:true'/'if:false'. Để hiển thị mảng, dùng 'aura:iteration' trong Aura hoặc 'for:each' trong LWC, cả hai lặp lại đánh dấu cho từng mục trong mảng."
        },
        {
            "question": "Làm thế nào để khiến các thành phần của chúng ta có thể cấu hình bởi quản trị viên?",
            "answer": "Cả thành phần Aura và LWC đều có thể hiển thị thuộc tính trong Lightning App Builder và Experience Builder để quản trị viên tùy chỉnh. Trong Aura, dùng tệp tài nguyên thiết kế với 'design:attribute' cho mỗi 'aura:attribute' cần tùy chỉnh, và 'sfdc:objects' để giới hạn đối tượng. Trong LWC, định nghĩa thuộc tính trong tệp '.js-meta.xml' bằng thẻ 'property' trong 'targetConfigs', cho phép linh hoạt hơn với ngữ cảnh đích và giới hạn đối tượng bằng thẻ 'objects'."
        },
        {
            "question": "Làm thế nào để tái sử dụng mã giữa các thành phần của chúng ta?",
            "answer": "Để chia sẻ mã giữa thành phần Aura, tạo một thành phần dịch vụ dùng 'aura:method' để hiển thị mã cần chia sẻ, sau đó bao gồm trong các thành phần khác và gọi mã đó. Với LWC, tạo Mô-đun EcmaScript (tệp JavaScript dùng 'export' để xuất hàm hoặc biến), sau đó nhập vào thành phần khác như nhập mô-đun Salesforce."
        },
        {
            "question": "Làm thế nào để phản hồi các tương tác của người dùng?",
            "answer": "Dù dùng khung nào, câu trả lời là sự kiện. Trong Aura, định nghĩa mã xử lý trong bộ điều khiển của thành phần, sau đó nghe sự kiện bằng xử lý nội tuyến trên thành phần hoặc thẻ 'aura:handler', cả hai đều trỏ đến hành động trong bộ điều khiển. Trong LWC, xử lý sự kiện đơn giản hơn với sự kiện JavaScript tiêu chuẩn, có thể dùng xử lý nội tuyến trên phần tử hoặc thêm xử lý sự kiện động qua JavaScript."
        },
        {
            "question": "Các giai đoạn khác nhau của sự kiện là gì?",
            "answer": "Sự kiện có hai giai đoạn: Bubbling (lan truyền lên DOM từ trong ra, chạy xử lý trên phần tử gần nhất trước) và Capture (lan truyền xuống từ trên cùng, chạy xử lý ngoài cùng trước). Mặc định, sự kiện Lightning lan truyền lên và chỉ được xử lý bởi thành phần cha. Sự kiện ứng dụng Aura có giai đoạn thứ ba, Default, nơi xử lý được gọi không xác định."
        },
        {
            "question": "Làm thế nào để cấu hình lan truyền sự kiện?",
            "answer": "Trong LWC, khi khai báo sự kiện, cung cấp tham số bổ sung trong hàm tạo CustomEvent: 'bubbles' (mặc định false, cho phép lan truyền lên DOM) và 'composed' (mặc định false, cho phép vượt qua ranh giới bóng và lên đến gốc nếu bubbles là true). Trong Aura, không định nghĩa rõ lan truyền, thay vào đó chỉ định giai đoạn xử lý trên trình xử lý sự kiện."
        },
        {
            "question": "Làm thế nào để quản lý sự kiện để cải thiện trải nghiệm người dùng?",
            "answer": "Khi sự kiện có thể được kích hoạt thường xuyên (như thanh tìm kiếm lọc danh sách khi nhập), dùng kỹ thuật debouncing: đặt thời gian chờ sau mỗi lần nhấn phím (ví dụ 500ms), nếu người dùng tiếp tục nhập, hủy thời gian chờ trước và bắt đầu mới, chỉ thực hiện hành động khi người dùng dừng, đảm bảo lọc mượt mà và hiệu suất tốt."
        },
        {
            "question": "SLDS là gì?",
            "answer": "Hệ thống Thiết kế Lightning Salesforce (SLDS) là khung định hình giao diện và cảm nhận của Salesforce Lightning. Nó bao gồm hướng dẫn thiết kế về trải nghiệm người dùng, bản thiết kế HTML cho thành phần, và bảng kiểu cung cấp kiểu dáng nhất quán."
        },
        {
            "question": "Làm thế nào để áp dụng kiểu tùy chỉnh?",
            "answer": "Khi lớp kiểu SLDS không đủ, tạo tệp CSS trùng tên với thành phần trong thư mục của nó. Trong LWC, kiểu được đóng gói hoàn toàn, không ảnh hưởng thành phần khác. Trong Aura, thêm tiền tố '.THIS' cho kiểu, nhưng kiểu có thể ảnh hưởng đến thành phần con."
        },
        {
            "question": "Flexbox và Grid trong CSS là gì?",
            "answer": "Flexbox và Grid là hai mô-đun bố cục CSS tương tự, dùng để xây dựng bố cục phức tạp và đáp ứng di động. Flexbox điều khiển phần tử con theo một chiều; Grid hỗ trợ bố cục hai chiều. Dùng 'lightning-layout' (flexbox) và 'lightning-layout-item' cho đơn giản, hoặc tự định nghĩa lớp với Grid cho vị trí phức tạp."
        },
        {
            "question": "Làm thế nào để chia sẻ kiểu giữa các thành phần?",
            "answer": "Chia sẻ kiểu qua tài nguyên tĩnh bằng Platform Resource Loader (LWC) hoặc 'ltng:require' (Aura). Với LWC, dùng mô-đun CSS (thành phần LWC chỉ có tệp CSS), nhập vào tệp CSS khác bằng '@import c/myCssComponentName'."
        },
        {
            "question": "Dịch vụ Wire là gì?",
            "answer": "Dịch vụ Wire là dịch vụ cung cấp dữ liệu truyền dữ liệu mới khi có sẵn. Nó hỗ trợ biến phản ứng, cung cấp dữ liệu mới khi ngữ cảnh thay đổi, từ mô-đun Salesforce hoặc lớp Apex do nhà phát triển định nghĩa."
        },
        {
            "question": "Làm thế nào để sử dụng dịch vụ Wire với Apex?",
            "answer": "Phương thức Apex phải có '@AuraEnabled(cacheable=true)', hiển thị cho thành phần Lightning và vô hiệu hóa DML để chỉ trả về dữ liệu. Sau đó, nhập phương thức vào LWC như bộ điều hợp wire."
        },
        {
            "question": "Dịch Vụ Dữ Liệu Lightning (LDS) là gì?",
            "answer": "LDS là tập hợp thành phần, bộ điều hợp wire và hàm do Salesforce cung cấp, quản lý dữ liệu thay chúng ta, cho phép đọc/ghi bản ghi và phản ánh thay đổi trên tất cả thành phần sử dụng LDS."
        },
        {
            "question": "Làm thế nào để sử dụng API Giao diện Người dùng?",
            "answer": "API Giao diện Người dùng hiển thị bộ điều hợp wire và hàm JavaScript như lấy chi tiết bố cục trang cho đối tượng hoặc danh sách chọn phụ thuộc cho loại bản ghi, tôn trọng quyền chia sẻ của người dùng."
        },
        {
            "question": "Lợi ích của việc sử dụng API Giao diện Người dùng là gì?",
            "answer": "Lợi ích bao gồm dữ liệu được lưu trữ để tăng hiệu suất, quản lý dữ liệu dễ dàng, đảm bảo thành phần hiển thị dữ liệu đúng, và giảm mã Apex (không cần phương thức bộ điều khiển cho cập nhật bản ghi đơn giản)."
        },
        {
            "question": "Tại sao chúng ta không muốn sử dụng API Giao diện Người dùng?",
            "answer": "Trong trường hợp làm việc với nhóm bản ghi, không thể dùng LDS hoặc UI API, cần viết phương thức Apex tùy chỉnh. Tuy nhiên, có thể kết hợp, như dùng UI API để cập nhật bản ghi đơn từ danh sách lấy bằng Apex."
        },
        {
            "question": "Tại sao chúng ta không muốn sử dụng dịch vụ Wire?",
            "answer": "Dịch vụ Wire giỏi cung cấp dữ liệu và lưu trữ, nhưng không hỗ trợ tạo/cập nhật bản ghi hoặc kích hoạt Apex từ hành động người dùng như nút. Trong các trường hợp này, Apex mệnh lệnh là lựa chọn tốt hơn nhờ kiểm soát cao hơn."
        },
        {
            "question": "Chúng ta có thể sử dụng những công cụ nào để hỗ trợ phát triển?",
            "answer": "Salesforce cung cấp nhiều công cụ như phần mở rộng SFDX cho VSCode, mang lại trải nghiệm IDE tốt hơn nhiều so với Developer Console, hỗ trợ cả phát triển Aura và LWC."
        },
        {
            "question": "Làm thế nào để gỡ lỗi các thành phần của chúng ta?",
            "answer": "Cách đơn giản nhất là dùng câu lệnh ghi nhật ký console, nhưng hạn chế. Tốt hơn là bật 'Chế độ Gỡ lỗi Lightning' để loại bỏ nén mã và cải thiện thông báo lỗi, kết hợp công cụ gỡ lỗi trình duyệt để đặt điểm dừng, kiểm tra biến lúc chạy và bước qua mã để tìm lỗi."
        },
        {
            "question": "Hãy kể về một dự án trước đây bạn đã làm việc?",
            "answer": "Câu hỏi mở để bạn thảo luận về công việc trước đây. Chọn dự án gần đây, liên quan đến ngành của người phỏng vấn mà bạn tự hào. Nếu mới vào nghề, chọn dự án thực hành thể hiện kỹ năng, không nhất thiết phải là dự án Salesforce."
        },
        {
            "question": "Những thách thức bạn gặp phải trong dự án đó là gì?",
            "answer": "Nhớ lại và nói về khía cạnh khó khăn nhất, giải thích tại sao, và cách bạn vượt qua (bằng mã thông minh hay nhờ sự hỗ trợ). Tập trung vào hành trình và bài học hơn là chi tiết kỹ thuật."
        },
        {
            "question": "Nhìn lại, bạn sẽ làm gì khác đi?",
            "answer": "Thành thật nêu điều bạn nghĩ chưa tốt và mong muốn làm khác. Mục tiêu là thể hiện khả năng học hỏi và cải thiện từ kinh nghiệm trước."
        }
    ],
    "VisualForce": [
        {
            "question": "Visualforce là gì?",
            "answer": "Visualforce là một khung dựa trên thành phần trong Salesforce được sử dụng để tạo giao diện người dùng tùy chỉnh cho các ứng dụng web. Nó tận dụng ngôn ngữ đánh dấu dựa trên thẻ tương tự HTML, kết hợp với các bộ điều khiển Apex, để thiết kế các trang web động và tương tác tích hợp liền mạch với dữ liệu và logic của Salesforce. Các trang Visualforce có thể được hiển thị dưới dạng HTML, PDF hoặc các định dạng khác, hỗ trợ các tính năng như bộ điều khiển chuẩn, bộ điều khiển tùy chỉnh và phần mở rộng để xây dựng giao diện phù hợp cho các đối tượng Salesforce như tài khoản, liên hệ và cơ hội."
        },
        {
            "question": "Giá trị toàn cục trong Visualforce là gì?",
            "answer": "Giá trị toàn cục trong Visualforce đề cập đến các giá trị hoặc biến được cung cấp sẵn bởi hệ thống, có thể truy cập trên toàn nền tảng, như `$User`, `$Profile`, `$Organization` và `$System`. Những giá trị này cho phép nhà phát triển truy cập thông tin toàn hệ thống (ví dụ: ID người dùng hiện tại, tên tổ chức) mà không cần viết mã tùy chỉnh. Ví dụ, `{!$User.Id}` hiển thị ID của người dùng hiện tại. Chế độ nhà phát triển phải được bật để kiểm tra các giá trị này qua điều hướng URL (ví dụ: `/apex/MyPage`), nhưng chúng không liên quan trực tiếp đến việc cắt URL hoặc biểu tượng như mô tả."
        },
        {
            "question": "Xác định các biến trong Visualforce?",
            "answer": "Các biến trong Visualforce là các chỗ giữ chỗ dùng để lưu trữ và thao tác dữ liệu, được truy cập qua các trường hợp nhất (`{!variable}`) hoặc thuộc tính của bộ điều khiển Apex. Các biến phổ biến bao gồm biến hệ thống như `$Today` (ngày hiện tại), sử dụng hàm `today()` để trả về ngày hiện tại theo định dạng được chỉ định. Các biểu thức trong Visualforce, như `{!account.Name}`, tính toán và hiển thị giá trị động tại thời điểm chạy, cho phép tương tác với dữ liệu và logic Salesforce qua bộ điều khiển chuẩn hoặc tùy chỉnh."
        },
        {
            "question": "Visualforce có thể được sử dụng như thế nào để lưu trữ ngày hiện tại của hệ thống?",
            "answer": "Visualforce có thể lưu trữ và hiển thị ngày hiện tại của hệ thống bằng biến toàn cục `$Today` hoặc hàm `today()` trong biểu thức, như `{!$Today}` hoặc `{!TODAY()}`. Ví dụ, để gửi thông báo email sau 15 ngày, bạn có thể tính toán ngày tương lai trong bộ điều khiển Apex (`Date.today().addDays(15)`) và truyền nó sang Visualforce qua biến bộ điều khiển, đảm bảo ngày được cập nhật động và lưu trữ trong các đối tượng Salesforce hoặc sử dụng trong luồng công việc."
        },
        {
            "question": "Chỉ ra sự khác biệt giữa ngày hiện tại và biểu thức trong Visualforce?",
            "answer": "Trong Visualforce, `$Today` (hoặc `TODAY()`) là một biến toàn cục hoặc hàm trả về ngày hiện tại của hệ thống ở nhiều định dạng khác nhau (ví dụ: GMT, múi giờ địa phương, hoặc định dạng cụ thể như `{!$Today.year}`). Nó không yêu cầu dấu chấm than để sử dụng cơ bản. Một biểu thức trong Visualforce, như `{!myDateVariable}`, là một phép tính động hoặc tham chiếu đến biến hoặc phương thức của bộ điều khiển, thường yêu cầu dấu chấm than, và có thể thao tác hoặc định dạng ngày (ví dụ: `{!IF(myDate > $Today, 'Tương lai', 'Quá khứ')}`) mà không cần truy cập trực tiếp vào ngày hệ thống."
        },
        {
            "question": "Liệt kê các hàm có sẵn trong lập trình Apex để tính giá trị tối đa và tối thiểu trong danh sách số?",
            "answer": "Trong lập trình Apex, các hàm để tính giá trị tối đa và tối thiểu trong danh sách số bao gồm `Math.max()` và `Math.min()`. Ví dụ, với danh sách `List<Integer> numbers = new List<Integer>{10, 20, 90, 0};`, bạn có thể sử dụng `Math.max(numbers)` hoặc `Math.min(numbers)` để trả về 90 (tối đa) và 0 (tối thiểu), tương ứng. Các phương thức tĩnh này từ lớp `Math` rất lý tưởng cho phép tính toán số học, nhưng với danh sách, bạn có thể cần lặp lại hoặc dùng `List.sort()` để tìm các giá trị cực trị."
        },
        {
            "question": "Xác định biểu thức Sq-Rp trong lập trình Apex?",
            "answer": "Biểu thức 'Sq-Rp' trong lập trình Apex có lẽ ám chỉ phương thức `Math.sqrt()`, tính căn bậc hai của một số. Ví dụ, `Math.sqrt(16)` trả về 4.0. Đây là một phương thức tĩnh trong lớp `Math`, được dùng cho các phép toán trong Apex, thường áp dụng trong tính toán khoảng cách, thống kê hoặc phân tích dữ liệu trong logic Salesforce, đảm bảo độ chính xác đến độ chính xác kép."
        },
        {
            "question": "Nêu mục đích của các điều kiện được sử dụng trong lập trình Apex?",
            "answer": "Các điều kiện trong lập trình Apex, như `if-else`, `switch`, hoặc toán tử ba ngôi (`?:`), được sử dụng để kiểm soát luồng chương trình dựa trên đánh giá logic (true/false). Ví dụ, `if (account.Name == 'Senate') { System.debug('Xin chào, De Pecan'); } else { System.debug('Xin chào, các bạn'); }` đánh giá liệu tên tài khoản có chứa 'Senate' hay không, thực thi các khối mã khác nhau tương ứng. Chúng cho phép ra quyết định động, xử lý lỗi và logic tùy chỉnh trong ứng dụng Salesforce."
        },
        {
            "question": "Khối if-else trong lập trình Apex là gì?",
            "answer": "Khối `if-else` trong lập trình Apex là một cấu trúc điều khiển thực thi mã có điều kiện. Nếu điều kiện đánh giá là `true`, mã trong khối `if` chạy; nếu không, khối `else` thực thi. Ví dụ, `if (contact.Age > 18) { System.debug('Người lớn'); } else { System.debug('Trẻ vị thành niên'); }` kiểm tra tuổi của một liên hệ, hiển thị các thông điệp khác nhau. Nó được sử dụng rộng rãi cho phân nhánh logic, xử lý lỗi và ra quyết định trong Salesforce."
        },
        {
            "question": "Bộ điều khiển chuẩn trong lập trình Apex là gì?",
            "answer": "Bộ điều khiển chuẩn trong Apex (dùng trong Visualforce) là các bộ điều khiển được Salesforce cung cấp sẵn cho các đối tượng chuẩn như Account, Contact và Opportunity. Chúng xử lý các thao tác CRUD (Tạo, Đọc, Cập nhật, Xóa) và cung cấp quyền truy cập vào dữ liệu đối tượng mà không cần mã tùy chỉnh. Ví dụ, trong một trang Visualforce, `<apex:page standardController=\"Account\">` cho phép truy cập dữ liệu tài khoản (`{!Account.Name}`) trực tiếp, tận dụng logic và bảo mật tích hợp của Salesforce."
        },
        {
            "question": "Giải thích về bảng định kiểu CSS tùy chỉnh?",
            "answer": "Bảng định kiểu CSS tùy chỉnh trong Visualforce được sử dụng để xác định kiểu dáng trực quan của trang, như màu sắc, phông chữ, khoảng đệm và lề, nâng cao trải nghiệm người dùng. Chúng được tạo dưới dạng Tài nguyên Tĩnh trong Salesforce, tải lên dưới dạng tệp .css và được tham chiếu trong Visualforce qua `<apex:stylesheet value=\"{!$Resource.MyCSS}\" />`. Nhà phát triển có thể kiểm tra và sửa đổi kiểu dáng bằng công cụ phát triển của trình duyệt (ví dụ: Chrome DevTools), đảm bảo trang phù hợp với yêu cầu thương hiệu hoặc thiết kế."
        },
        {
            "question": "Làm thế nào để sử dụng bảng định kiểu đúng cho một trang cụ thể?",
            "answer": "Sử dụng bảng định kiểu đúng cho trang Visualforce bằng cách: (1) Tải tệp CSS lên dưới dạng Tài nguyên Tĩnh trong Salesforce; (2) Tham chiếu nó trong trang Visualforce với `<apex:stylesheet value=\"{!$Resource.MyCSS}\" />`; (3) Đảm bảo CSS nhắm mục tiêu các phần tử cụ thể (ví dụ: `.myClass`, `#myId`) để áp dụng kiểu dáng chính xác; (4) Kiểm tra trong Developer Console hoặc trình duyệt để xác minh hiển thị, điều chỉnh nếu cần cho giới hạn hiển thị PDF của Salesforce."
        },
        {
            "question": "Giải thích về định kiểu trang?",
            "answer": "Định kiểu trang trong Visualforce liên quan đến việc sử dụng CSS để kiểm soát giao diện của trang web, bao gồm màu sắc, phông chữ, khoảng đệm, lề và bố cục. Nó được áp dụng qua Tài nguyên Tĩnh hoặc thẻ `<style>` nội tuyến trong `<apex:page>`. Ví dụ, `body { background-color: #f0f0f0; font-family: Arial; padding: 20px; }` đặt màu nền, phông chữ và khoảng cách của trang. Định kiểu đảm bảo giao diện nhất quán, thân thiện với người dùng, nhưng phải tính đến giới hạn hiển thị PDF."
        },
        {
            "question": "Trang Epic là gì?",
            "answer": "Trong ngữ cảnh Salesforce, 'trang Epic' dường như là lỗi đánh máy hoặc cách gọi sai, có thể ám chỉ 'trang Visualforce'. Trang Visualforce là các trang web tùy chỉnh trong Salesforce để tạo giao diện người dùng, không được gọi cụ thể là 'trang Epic'. Chúng cho phép nhà phát triển xây dựng các trang tương tác, dựa trên dữ liệu cho các đối tượng chuẩn/tùy chỉnh, được hiển thị dưới dạng HTML, PDF hoặc các định dạng khác, sử dụng bộ điều khiển và đánh dấu để quản lý bản ghi và hành động."
        },
        {
            "question": "Trang Epic được tạo như thế nào?",
            "answer": "Giả sử 'trang Epic' ám chỉ trang Visualforce, chúng được tạo trong Salesforce bằng cách: (1) Điều hướng đến Setup > Develop > Visualforce Pages; (2) Nhấn 'New' để tạo trang, đặt tên (ví dụ: 'MyVisualforcePage'); (3) Viết đánh dấu bằng `<apex:page>`, `<apex:form>` và các thẻ khác, tùy chọn liên kết với bộ điều khiển chuẩn/tùy chỉnh; (4) Lưu và kiểm tra trong Developer Console hoặc qua URL (`/apex/MyVisualforcePage`), đảm bảo chức năng và bảo mật."
        },
        {
            "question": "Có thể thực hiện những hành động nào trên trang Epic?",
            "answer": "Giả sử 'trang Epic' ám chỉ trang Visualforce, các hành động bao gồm: (1) Lưu bản ghi (`<apex:commandButton action=\"{!save}\" />`); (2) Hủy thao tác (`<apex:commandButton action=\"{!cancel}\" />`); (3) Điều hướng sang trang khác (`<apex:commandLink action=\"{!next}\" />`); (4) Cập nhật/xóa bản ghi qua phương thức bộ điều khiển; (5) Hiển thị dưới dạng PDF hoặc HTML, được kiểm tra trong Developer Console để đảm bảo chức năng và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Xác định phân trang bảng điều khiển?",
            "answer": "Phân trang bảng điều khiển trong Visualforce đề cập đến việc hiển thị một tập hợp con bản ghi trong bảng hoặc bảng điều khiển trên nhiều trang để cải thiện hiệu suất và tính khả dụng, tránh tải dữ liệu quá mức cùng lúc. Nó được triển khai bằng `<apex:pageBlockTable>` hoặc `<apex:repeat>` với `recordSetVar` của bộ điều khiển danh sách chuẩn, kết hợp với các điều khiển phân trang (`<apex:panelBar>` hoặc điều hướng tùy chỉnh), được kiểm tra để đảm bảo không vi phạm giới hạn quản trị và trải nghiệm người dùng tối ưu."
        },
        {
            "question": "Mô tả các sự kiện trong ứng dụng web?",
            "answer": "Các sự kiện trong ứng dụng web Visualforce là các hành động của người dùng hoặc hệ thống kích hoạt phản hồi cụ thể, như nhấp vào nút (`onclick`), di chuột qua một phần tử (`onmouseover`), hoặc gửi biểu mẫu (`onsubmit`). Trình duyệt theo dõi chúng qua JavaScript hoặc hành động Apex (ví dụ: `<apex:actionSupport event=\"onclick\" />`), thực thi phương thức bộ điều khiển hoặc hiển thị lại thành phần. Chúng được xác định trong đánh dấu Visualforce, được kiểm tra để đảm bảo chức năng và hiệu suất trong giới hạn Salesforce."
        },
        {
            "question": "Thuộc tính action là gì?",
            "answer": "Thuộc tính `action` trong Visualforce xác định phương thức hoặc hành động của bộ điều khiển được thực thi khi một sự kiện xảy ra (ví dụ: nhấp nút, tải trang). Ví dụ, `<apex:commandButton action=\"{!save}\" value=\"Lưu\" />` kích hoạt phương thức `save` trong bộ điều khiển, thực hiện hành động như lưu bản ghi. Nó rất quan trọng cho hành vi động, được kiểm tra trong Developer Console để đảm bảo thực thi đúng và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Xác định thuộc tính của trang Epic?",
            "answer": "Giả sử 'trang Epic' là lỗi đánh máy cho 'trang Visualforce', thuộc tính `action` trong trang Visualforce xác định hành động ban đầu (phương thức bộ điều khiển) được thực thi khi trang tải, như `{!init}` trong `<apex:page action=\"{!init}\">`. Nó chỉ định điều gì xảy ra khi tải trang, như lấy dữ liệu hoặc đặt biến, được kiểm tra để đảm bảo chức năng và tích hợp với bộ điều khiển chuẩn/tùy chỉnh trong Salesforce."
        },
        {
            "question": "Chỉ ra sự khác biệt giữa phần mở rộng bộ điều khiển và bộ điều khiển tùy chỉnh?",
            "answer": "Sự khác biệt giữa phần mở rộng bộ điều khiển và bộ điều khiển tùy chỉnh trong Visualforce: (1) **Bộ điều khiển tùy chỉnh**: Một lớp Apex độc lập (`public class MyController`) cung cấp toàn bộ logic, chạy ở chế độ hệ thống, không mở rộng bộ điều khiển chuẩn nào, dùng cho tùy chỉnh hoàn toàn; (2) **Phần mở rộng bộ điều khiển**: Mở rộng một bộ điều khiển chuẩn hoặc tùy chỉnh (`public class MyExtension extends StandardController`), thêm chức năng trong khi tận dụng các tính năng bộ điều khiển hiện có, được kiểm tra để đảm bảo tương thích và hiệu suất."
        },
        {
            "question": "Có thể sử dụng nhiều phần mở rộng trong một bộ điều khiển tĩnh không?",
            "answer": "Có, có thể sử dụng nhiều phần mở rộng trong một trang Visualforce với bộ điều khiển chuẩn hoặc tùy chỉnh. Ví dụ, `<apex:page standardController=\"Account\" extensions=\"Extension1,Extension2\">` cho phép nhiều lớp Apex (ví dụ: `public class Extension1 extends StandardController`, `public class Extension2 extends StandardController`) mở rộng chức năng. Phần mở rộng được liệt kê đầu tiên thường có ưu tiên cao hơn cho việc ghi đè phương thức, được kiểm tra để đảm bảo không có xung đột hoặc vấn đề giới hạn quản trị."
        },
        {
            "question": "Dịch vụ web là gì?",
            "answer": "Dịch vụ web trong Salesforce là cách chuẩn hóa để cho phép tương tác máy với máy qua mạng, thường sử dụng API SOAP hoặc REST. Trong Visualforce/Apex, các dịch vụ web như Salesforce REST API hoặc SOAP API cho phép ứng dụng bên ngoài tương tác với dữ liệu Salesforce (ví dụ: tạo tài khoản). Chúng được xác định trong Apex với chú thích `@RestResource` hoặc `webservice`, được kiểm tra về bảo mật và hiệu suất trong giới hạn quản trị."
        },
        {
            "question": "Nêu mục đích của phương thức greeting?",
            "answer": "Trong phần mở rộng bộ điều khiển Visualforce, mục đích của phương thức `greeting` là hiển thị hoặc thao tác dữ liệu, như tên tài khoản và ID từ bộ điều khiển chuẩn. Ví dụ, `public String greeting() { return 'Tên tài khoản: ' + account.Name + ', ID: ' + account.Id; }` lấy và định dạng dữ liệu để hiển thị trong trang Visualforce (`{!greeting}`), được kiểm tra để đảm bảo truy xuất và hiển thị dữ liệu chính xác."
        },
        {
            "question": "Giải thích cách hoạt động của greeting?",
            "answer": "Phương thức `greeting` trong phần mở rộng bộ điều khiển Visualforce hoạt động bằng cách: (1) Sử dụng `getRecord()` của bộ điều khiển chuẩn để truy cập bản ghi tài khoản (ví dụ: `Account account = (Account)stdController.getRecord();`); (2) Lấy `Name` và `Id` của tài khoản qua trường nhập hoặc SOQL; (3) Trả về chuỗi định dạng (ví dụ: `return 'Tên tài khoản: ' + account.Name + ', ID: ' + account.Id;`) để hiển thị trong Visualforce (`{!greeting}`). Nó được kiểm tra để đảm bảo độ chính xác dữ liệu và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Bộ điều khiển tùy chỉnh là gì?",
            "answer": "Bộ điều khiển tùy chỉnh trong Visualforce là một lớp Apex (`public class MyController`) cung cấp toàn bộ logic cho một trang Visualforce, chạy ở chế độ hệ thống (độc lập với quyền người dùng, vai trò và bảo mật). Nó được dùng để thêm chức năng tùy chỉnh vượt ngoài bộ điều khiển chuẩn, như hành động mới (lưu, xóa) hoặc logic phức tạp, được xác định với `<apex:page controller=\"MyController\">`, được kiểm tra về hiệu suất và bảo mật."
        },
        {
            "question": "Mục đích của việc tạo bộ điều khiển tùy chỉnh là gì?",
            "answer": "Mục đích của việc tạo bộ điều khiển tùy chỉnh trong Visualforce là: (1) Thêm chức năng bổ sung không được cung cấp bởi bộ điều khiển chuẩn, như hành động lưu hoặc xóa tùy chỉnh; (2) Chạy mã ở chế độ hệ thống, bỏ qua quyền người dùng cho các tác vụ cụ thể; (3) Tạo điều hướng hoặc logic tùy chỉnh cho trang Visualforce. Nó được dùng khi bộ điều khiển chuẩn không đủ, được kiểm tra để đảm bảo đáp ứng yêu cầu kinh doanh và giới hạn quản trị."
        },
        {
            "question": "Bộ điều khiển tùy chỉnh được tạo như thế nào?",
            "answer": "Bộ điều khiển tùy chỉnh được tạo trong Salesforce bằng cách: (1) Viết một lớp Apex (ví dụ: `public class MyController { public Account account { get; set; } public MyController() { account = new Account(); } }`); (2) Liên kết nó với trang Visualforce qua `<apex:page controller=\"MyController\">`; (3) Thêm phương thức và thuộc tính cho logic trang, được kiểm tra trong Developer Console để đảm bảo chức năng, bảo mật và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Hàm tạo trong bộ điều khiển tùy chỉnh là gì?",
            "answer": "Trong bộ điều khiển tùy chỉnh, hàm tạo là một phương thức đặc biệt (`public MyController()`) khởi tạo bộ điều khiển khi trang Visualforce tải. Nó luôn có hàm tạo không tham số mặc định (không tham số), dùng để thiết lập dữ liệu hoặc đối tượng ban đầu (ví dụ: `account = new Account();`). Nó rất cần thiết cho việc khởi tạo, được kiểm tra để đảm bảo khởi tạo đúng và không vi phạm giới hạn quản trị."
        },
        {
            "question": "Điều gì xảy ra khi gọi bộ điều khiển tùy chỉnh trong trang Visualforce?",
            "answer": "Khi gọi bộ điều khiển tùy chỉnh trong trang Visualforce (ví dụ: `<apex:page controller=\"MyController\">`), Salesforce khởi tạo hàm tạo không tham số mặc định của bộ điều khiển (`public MyController()`) để khởi tạo nó. Hàm tạo thiết lập biến hoặc đối tượng (ví dụ: `account = new Account();`), và các phương thức getter/setter (`public Account { get; set; }`) trả về dữ liệu cho trang (`{!account.Name}`). Nó được kiểm tra để đảm bảo hành vi và hiệu suất đúng."
        },
        {
            "question": "Bộ điều khiển tùy chỉnh có thể có hàm tạo tham số không?",
            "answer": "Không, bộ điều khiển tùy chỉnh trong Visualforce không thể có hàm tạo tham số (có tham số). Nó phải có hàm tạo không tham số mặc định (`public MyController()`) để đảm bảo Salesforce có thể tự động khởi tạo nó khi trang tải. Việc cố thêm tham số sẽ làm hỏng khởi tạo tự động, yêu cầu giải pháp như tiêm phụ thuộc, điều không chuẩn, được kiểm tra để xác nhận tuân thủ kiến trúc Salesforce."
        },
        {
            "question": "Lớp cấp cao trong bộ điều khiển tùy chỉnh là gì?",
            "answer": "Trong bộ điều khiển tùy chỉnh, lớp cấp cao là lớp Apex chính (ví dụ: `public class MyController`) đóng vai trò gốc cho tất cả logic bộ điều khiển, không nằm trong lớp khác. Nó có thể được kế thừa nhưng không thể kế thừa trực tiếp từ bộ điều khiển chuẩn. Nó sử dụng hàm tạo không tham số mặc định để khởi tạo, được kiểm tra để đảm bảo xử lý tất cả logic trang độc lập và đáp ứng giới hạn quản trị."
        },
        {
            "question": "Hàm tạo mặc định trong bộ điều khiển tùy chỉnh nên là gì?",
            "answer": "Hàm tạo mặc định trong bộ điều khiển tùy chỉnh nên là hàm tạo không tham số (ví dụ: `public MyController()`) không có tham số, được gọi tự động khi trang Visualforce tải. Nó khởi tạo biến hoặc đối tượng của bộ điều khiển (ví dụ: `account = new Account();`), đảm bảo trang bắt đầu với trạng thái đúng. Nó được kiểm tra để xác nhận khởi tạo đúng và hiệu suất trong giới hạn quản trị Salesforce."
        },
        {
            "question": "Danh sách chọn phụ thuộc được sử dụng để làm gì trong quản trị Salesforce?",
            "answer": "Danh sách chọn phụ thuộc trong quản trị Salesforce được sử dụng để kiểm soát các trường cụ thể dựa trên giá trị của trường điều khiển, nâng cao tính toàn vẹn và khả dụng dữ liệu. Ví dụ, chọn 'Quốc gia' trong danh sách chọn điều khiển lọc các tùy chọn 'Bang' trong danh sách chọn phụ thuộc. Nó được cấu hình trong Setup > Object Manager > Fields, được kiểm tra để đảm bảo lọc chính xác và tuân thủ quy tắc kinh doanh."
        },
        {
            "question": "Visualforce khác với lập trình Apex như thế nào về mục đích?",
            "answer": "Visualforce và Apex khác nhau về mục đích: (1) **Visualforce**: Ngôn ngữ đánh dấu dựa trên thẻ để thiết kế trang web và giao diện người dùng trong Salesforce, tập trung vào trình bày và hiển thị (HTML, PDF); (2) **Apex**: Ngôn ngữ lập trình phía máy chủ để xử lý thao tác dữ liệu, logic kinh doanh và hoạt động backend trong Salesforce. Visualforce bổ sung cho Apex bằng cách cung cấp UI, được kiểm tra để đảm bảo tích hợp và hiệu suất."
        },
        {
            "question": "Loại hành động nào kích hoạt sự kiện liên quan đến ứng dụng web?",
            "answer": "Trong ứng dụng web Visualforce, các hành động như nhấp vào nút (`<apex:commandButton action=\"{!save}\" onclick=\"...\" />`), gửi biểu mẫu, hoặc làm mới trang kích hoạt sự kiện. Chúng được xác định với các thuộc tính như `action`, `onchange`, hoặc `onclick`, thực thi phương thức bộ điều khiển hoặc hiển thị lại thành phần. Chúng được kiểm tra để đảm bảo xử lý sự kiện đúng và tuân thủ giới hạn quản trị trong Salesforce."
        },
        {
            "question": "Khi xác định bộ điều khiển danh sách chuẩn, thuộc tính nào chỉ ra tên của tập hợp bản ghi?",
            "answer": "Thuộc tính `recordSetVar` trong trang Visualforce chỉ ra tên của tập hợp bản ghi cho bộ điều khiển danh sách chuẩn. Ví dụ, `<apex:page standardController=\"Account\" recordSetVar=\"accounts\">` đặt `accounts` làm biến cho danh sách bản ghi Account, cho phép thao tác hàng loạt như cập nhật hàng loạt, được kiểm tra để đảm bảo truy cập dữ liệu và hiệu suất đúng."
        },
        {
            "question": "Vai trò của nhãn đầu ra trong ngữ cảnh ứng dụng web là gì?",
            "answer": "Trong ứng dụng web Visualforce, thành phần `<apex:outputLabel>` hiển thị nhãn cho trường biểu mẫu (ví dụ: `<apex:outputLabel value=\"Tên tài khoản\" for=\"accountName\" />`), cải thiện khả năng truy cập và khả năng đọc. Nó không kích hoạt sự kiện hoặc thực hiện tính toán nhưng nâng cao UI bằng cách liên kết nhãn với đầu vào, được kiểm tra để đảm bảo hiển thị đúng và tuân thủ tiêu chuẩn Salesforce."
        },
        {
            "question": "Mục đích chính của bộ điều khiển tùy chỉnh trong trang Visualforce là gì?",
            "answer": "Mục đích chính của bộ điều khiển tùy chỉnh trong Visualforce là chạy mã ở chế độ hệ thống, độc lập với quyền người dùng, cho phép chức năng tùy chỉnh vượt ngoài bộ điều khiển chuẩn. Nó thêm hành động mới (ví dụ: lưu, xóa), logic tùy chỉnh hoặc thao tác phức tạp, được xác định là một lớp Apex (ví dụ: `public class MyController`), được kiểm tra để đảm bảo hiệu suất, bảo mật và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Thuộc tính nào được sử dụng để chỉ ra rằng trang Visualforce đang dùng bộ điều khiển danh sách chuẩn và nó xác định gì?",
            "answer": "Thuộc tính `standardController` chỉ ra trang Visualforce sử dụng bộ điều khiển danh sách chuẩn, chỉ định đối tượng (ví dụ: `<apex:page standardController=\"Account\">`). Nó xác định quyền truy cập vào dữ liệu đối tượng chuẩn và các thao tác CRUD cho một bản ghi hoặc danh sách, kết hợp với `recordSetVar` cho nhiều bản ghi, được kiểm tra để đảm bảo truy cập dữ liệu và hiệu suất trong giới hạn Salesforce."
        },
        {
            "question": "Khi xác định bộ điều khiển danh sách, mục đích của việc sử dụng thuộc tính ‘recordSetVar’ cùng với ‘standardController’ là gì?",
            "answer": "Trong Visualforce, `recordSetVar` với `standardController` liên kết trang với danh sách bản ghi, cho phép thao tác hàng loạt. Ví dụ, `<apex:page standardController=\"Account\" recordSetVar=\"accounts\">` cho phép chỉnh sửa nhiều tài khoản cùng lúc qua `<apex:form>`, cải thiện hiệu quả, được kiểm tra để đảm bảo xử lý dữ liệu đúng và không vi phạm giới hạn quản trị."
        },
        {
            "question": "Ý nghĩa của hàm tạo không tham số trong bộ điều khiển tùy chỉnh Visualforce là gì?",
            "answer": "Hàm tạo không tham số trong bộ điều khiển tùy chỉnh Visualforce (ví dụ: `public MyController()`) đảm bảo Salesforce có thể tự động khởi tạo bộ điều khiển khi trang tải, không yêu cầu tham số. Nó thiết lập trạng thái ban đầu (ví dụ: `account = new Account();`), cho phép logic tùy chỉnh, được kiểm tra để xác nhận khởi tạo đúng và hiệu suất trong giới hạn quản trị."
        },
        {
            "question": "Bộ điều khiển chuẩn Visualforce khác với bộ điều khiển tùy chỉnh như thế nào?",
            "answer": "Bộ điều khiển chuẩn và tùy chỉnh trong Visualforce khác nhau như sau: (1) **Bộ điều khiển chuẩn**: Được xây dựng sẵn cho các đối tượng chuẩn (ví dụ: Account), xử lý thao tác CRUD, chạy ở chế độ người dùng (tôn trọng quyền), không yêu cầu mã; (2) **Bộ điều khiển tùy chỉnh**: Lớp Apex cho logic tùy chỉnh, chạy ở chế độ hệ thống (bỏ qua quyền), cung cấp sự linh hoạt hoàn toàn, được kiểm tra để đảm bảo sự khác biệt về chức năng và hiệu suất trong Salesforce."
        },
        {
            "question": "Mục đích của thẻ `<apex:page>` trong Visualforce là gì?",
            "answer": "Thẻ `<apex:page>` là bộ chứa gốc trong Visualforce, xác định cấu trúc và thuộc tính của trang (ví dụ: `standardController`, `controller`, `renderAs`). Nó bao bọc tất cả thành phần, đặt logic bộ điều khiển của trang và xác định định dạng đầu ra (HTML, PDF), được kiểm tra để đảm bảo hiển thị đúng và tích hợp với dữ liệu và logic Salesforce."
        },
        {
            "question": "Làm thế nào để trang Visualforce tích hợp với dữ liệu Salesforce?",
            "answer": "Trang Visualforce tích hợp với dữ liệu Salesforce bằng cách: (1) Sử dụng bộ điều khiển chuẩn (`<apex:page standardController=\"Account\">`) để truy cập dữ liệu đối tượng (ví dụ: `{!Account.Name}`); (2) Tận dụng bộ điều khiển tùy chỉnh hoặc phần mở rộng cho truy vấn SOQL phức tạp; (3) Sử dụng trường hợp nhất và phương thức Apex để hiển thị và thao tác dữ liệu, được kiểm tra để đảm bảo bảo mật dữ liệu và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Các thành phần chính của trang Visualforce là gì?",
            "answer": "Các thành phần chính của trang Visualforce bao gồm: (1) `<apex:page>` (thẻ gốc); (2) `<apex:form>` (cho biểu mẫu nhập); (3) `<apex:outputText>`/`<apex:inputText>` (cho hiển thị/nhập); (4) `<apex:commandButton>`/`<apex:commandLink>` (cho hành động); (5) Bộ điều khiển (chuẩn, tùy chỉnh hoặc phần mở rộng) cho logic. Chúng được kiểm tra để đảm bảo chức năng, bảo mật và hiệu suất trong Salesforce."
        },
        {
            "question": "Làm thế nào để hiển thị trang Visualforce dưới dạng PDF?",
            "answer": "Hiển thị trang Visualforce dưới dạng PDF bằng thuộc tính `renderAs='pdf'` trong `<apex:page>` (ví dụ: `<apex:page renderAs='pdf'>...</apex:page>`). Điều này chuyển đổi HTML/CSS của trang thành PDF, phù hợp cho báo cáo hoặc tài liệu, với giới hạn về JavaScript và CSS phức tạp, được kiểm tra trên sandbox để đảm bảo định dạng đúng và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Vai trò của thẻ `<apex:form>` trong Visualforce là gì?",
            "answer": "Thẻ `<apex:form>` trong Visualforce tạo biểu mẫu HTML cho đầu vào người dùng, cho phép gửi dữ liệu đến bộ điều khiển (ví dụ: `<apex:commandButton action=\"{!save}\" />`). Nó bao bọc các thành phần nhập như `<apex:inputText>`, hỗ trợ xác thực và xử lý thao tác CRUD, được kiểm tra để đảm bảo toàn vẹn dữ liệu và hiệu suất trong giới hạn Salesforce."
        },
        {
            "question": "Làm thế nào để xử lý phân trang trong trang Visualforce?",
            "answer": "Xử lý phân trang trong Visualforce bằng bộ điều khiển danh sách chuẩn với `<apex:page standardController=\"Account\" recordSetVar=\"accounts\">`, kết hợp với `<apex:panelBar>` hoặc điều hướng tùy chỉnh (`<apex:commandLink action=\"{!first}\" />`). Đặt `pageSize` trong bộ điều khiển để giới hạn bản ghi mỗi trang, được kiểm tra để đảm bảo hiệu suất và không vi phạm giới hạn quản trị cho tập dữ liệu lớn."
        },
        {
            "question": "Mục đích của thành phần `<apex:repeat>` là gì?",
            "answer": "Thành phần `<apex:repeat>` trong Visualforce lặp qua một tập hợp (ví dụ: danh sách, tập hợp) để hiển thị nhiều bản ghi, như `<apex:repeat value=\"{!accounts}\" var=\"acc\">{!acc.Name}</apex:repeat>`. Nó được dùng cho danh sách hoặc bảng động, được kiểm tra để đảm bảo hiển thị đúng, hiệu suất và tuân thủ giới hạn quản trị cho khối lượng dữ liệu."
        },
        {
            "question": "Làm thế nào để sử dụng JavaScript trong trang Visualforce?",
            "answer": "Sử dụng JavaScript trong Visualforce bằng cách nhúng nó trong thẻ `<script>` hoặc tham chiếu tập lệnh bên ngoài qua Tài nguyên Tĩnh (`<apex:includeScript value=\"{!$Resource.MyScript}\" />`). Nó nâng cao tính tương tác phía máy khách (ví dụ: xác thực biểu mẫu), nhưng bị vô hiệu hóa khi hiển thị PDF, được kiểm tra để đảm bảo tương thích, bảo mật và không có vấn đề giới hạn quản trị."
        },
        {
            "question": "Các giới hạn quản trị cần xem xét trong trang Visualforce là gì?",
            "answer": "Giới hạn quản trị trong Visualforce bao gồm: (1) 1,000,000 ký tự cho kích thước trang; (2) 100 truy vấn SOQL, 150 câu lệnh DML mỗi giao dịch; (3) 6 MB kích thước heap, 10,000 ms thời gian CPU. Chúng áp dụng cho logic bộ điều khiển, được kiểm tra trên sandbox để tối ưu hóa SOQL/DML, đảm bảo hiệu suất và ngăn lỗi trong sản xuất."
        },
        {
            "question": "Làm thế nào để gỡ lỗi trang Visualforce?",
            "answer": "Gỡ lỗi trang Visualforce bằng cách: (1) Bật nhật ký gỡ lỗi trong Setup > Debug Logs cho người dùng hoặc lớp; (2) Sử dụng `System.debug()` trong bộ điều khiển Apex để ghi giá trị; (3) Kiểm tra trang trong Developer Console hoặc trình duyệt (Chrome DevTools) để tìm lỗi; (4) Kiểm tra trên sandbox để xác định và giải quyết vấn đề, đảm bảo chức năng và hiệu suất."
        },
        {
            "question": "Vai trò của Tài nguyên Tĩnh trong Visualforce là gì?",
            "answer": "Tài nguyên Tĩnh trong Visualforce lưu trữ các tệp bên ngoài (CSS, JavaScript, hình ảnh) để tái sử dụng, được tải lên trong Setup > Static Resources. Chúng được tham chiếu trong trang qua `{!$Resource.MyFile}`, cải thiện khả năng bảo trì và hiệu suất, được kiểm tra để đảm bảo khả năng truy cập, bảo mật và không vi phạm giới hạn quản trị."
        },
        {
            "question": "Làm thế nào để triển khai xác thực tùy chỉnh trong Visualforce?",
            "answer": "Triển khai xác thực tùy chỉnh trong Visualforce bằng cách: (1) Viết logic xác thực Apex trong bộ điều khiển (ví dụ: `if (account.Name == null) { ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'Tên là bắt buộc')); return null; }`); (2) Hiển thị lỗi qua `<apex:pageMessages />`; (3) Kiểm tra trên sandbox để đảm bảo xác thực hoạt động, tôn trọng bảo mật và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Mục đích của thành phần `<apex:actionSupport>` là gì?",
            "answer": "Thành phần `<apex:actionSupport>` trong Visualforce cho phép cập nhật một phần trang (AJAX) bằng cách kích hoạt hành động bộ điều khiển trên sự kiện (ví dụ: `onclick`, `onchange`). Ví dụ, `<apex:inputText value=\"{!value}\" id=\"myInput\"><apex:actionSupport event=\"onchange\" rerender=\"output\" action=\"{!updateValue}\" /></apex:inputText>` cập nhật trang động, được kiểm tra để đảm bảo hiệu suất và không có vấn đề giới hạn quản trị."
        },
        {
            "question": "Làm thế nào để xử lý lỗi trong trang Visualforce?",
            "answer": "Xử lý lỗi trong Visualforce bằng cách: (1) Sử dụng `try-catch` trong bộ điều khiển Apex để bắt ngoại lệ (ví dụ: `DmlException`, `QueryException`); (2) Hiển thị lỗi với `<apex:pageMessages />` hoặc `<apex:messages />`; (3) Ghi lỗi qua `System.debug()` hoặc nhật ký gỡ lỗi; (4) Kiểm tra trên sandbox để đảm bảo xử lý lỗi, bảo mật và hiệu suất trong giới hạn quản trị."
        },
        {
            "question": "Lợi ích của việc sử dụng Visualforce so với trang Salesforce chuẩn là gì?",
            "answer": "Lợi ích của Visualforce so với trang Salesforce chuẩn bao gồm: (1) Thiết kế UI tùy chỉnh cho nhu cầu kinh doanh cụ thể; (2) Tích hợp với Apex cho logic phức tạp; (3) Linh hoạt hiển thị dưới dạng HTML, PDF hoặc định dạng khác; (4) Kiểm soát nâng cao về định kiểu và chức năng, được kiểm tra để đảm bảo cải thiện trải nghiệm người dùng và hiệu suất so với bố cục chuẩn."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tạo báo cáo tùy chỉnh?",
            "answer": "Tạo báo cáo tùy chỉnh trong Visualforce bằng cách: (1) Sử dụng bộ điều khiển Apex để truy vấn dữ liệu qua SOQL (ví dụ: `SELECT Name, Amount FROM Opportunity`); (2) Hiển thị dữ liệu trong trang Visualforce với `<apex:pageBlockTable>` hoặc `<apex:repeat>`; (3) Hiển thị dưới dạng PDF (`renderAs='pdf'`) để in, được kiểm tra trên sandbox để đảm bảo độ chính xác báo cáo, bảo mật và hiệu suất."
        },
        {
            "question": "Vai trò của thành phần `<apex:commandButton>` là gì?",
            "answer": "Thành phần `<apex:commandButton>` trong Visualforce tạo một nút có thể nhấp kích hoạt hành động bộ điều khiển (ví dụ: `<apex:commandButton action=\"{!save}\" value=\"Lưu\" />`). Nó thực thi logic phía máy chủ (như lưu bản ghi), hỗ trợ hiển thị lại và nâng cao tính tương tác, được kiểm tra để đảm bảo chức năng, bảo mật và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Làm thế nào để triển khai chức năng tìm kiếm trong Visualforce?",
            "answer": "Triển khai tìm kiếm trong Visualforce bằng cách: (1) Tạo `<apex:form>` với `<apex:inputText>` cho đầu vào người dùng; (2) Viết phương thức bộ điều khiển Apex (ví dụ: `public List<Account> searchAccounts(String query) { return [SELECT Name FROM Account WHERE Name LIKE :('%' + query + '%')]; }`); (3) Hiển thị kết quả với `<apex:repeat>`, được kiểm tra trên sandbox để đảm bảo hiệu suất, bảo mật và không có vấn đề giới hạn quản trị."
        },
        {
            "question": "Sự khác biệt giữa `<apex:outputText>` và `<apex:inputText>` là gì?",
            "answer": "Sự khác biệt: (1) `<apex:outputText>` hiển thị văn bản chỉ đọc hoặc giá trị động (ví dụ: `{!account.Name}`) trên trang Visualforce; (2) `<apex:inputText>` tạo trường nhập văn bản có thể chỉnh sửa cho người dùng (ví dụ: `<apex:inputText value=\"{!account.Name}\" />`). Cả hai được kiểm tra để đảm bảo hiển thị, chức năng và bảo mật đúng trong Salesforce."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tạo thành phần bảng điều khiển?",
            "answer": "Tạo thành phần bảng điều khiển Visualforce bằng cách: (1) Phát triển trang Visualforce với bộ điều khiển Apex để truy vấn và hiển thị dữ liệu (ví dụ: biểu đồ, bảng); (2) Thêm trang vào bảng điều khiển Salesforce qua Setup > Dashboards, chọn 'Trang Visualforce' làm thành phần; (3) Kiểm tra trên sandbox để đảm bảo độ chính xác dữ liệu, hiệu suất và tương thích với tốc độ làm mới bảng điều khiển."
        },
        {
            "question": "Các cân nhắc bảo mật cho trang Visualforce là gì?",
            "answer": "Các cân nhắc bảo mật cho trang Visualforce bao gồm: (1) Sử dụng `with sharing` hoặc `without sharing` trong bộ điều khiển để quản lý truy cập dữ liệu; (2) Áp dụng Bảo mật Cấp Trường (FLS) và Bảo mật Cấp Đối tượng (OWD); (3) Xác thực đầu vào người dùng để ngăn chặn tấn công tiêm mã; (4) Kiểm tra trên sandbox để đảm bảo tuân thủ tiêu chuẩn bảo mật Salesforce và giới hạn quản trị."
        },
        {
            "question": "Làm thế nào để kiểm tra trang Visualforce?",
            "answer": "Kiểm tra trang Visualforce bằng cách: (1) Viết phương thức kiểm tra Apex trong lớp kiểm tra (ví dụ: `@isTest public class MyTest { static testMethod void testPage() { PageReference page = Page.MyPage; Test.setCurrentPage(page); /* Logic kiểm tra */ } }`); (2) Sử dụng Developer Console để chạy kiểm tra, kiểm tra độ bao phủ mã (tối thiểu 75%); (3) Kiểm tra trên sandbox để đảm bảo chức năng, bảo mật và hiệu suất trong giới hạn quản trị."
        },
        {
            "question": "Vai trò của thành phần `<apex:pageBlock>` là gì?",
            "answer": "Thành phần `<apex:pageBlock>` trong Visualforce cấu trúc nội dung thành bố cục phân vùng, thường dùng cho biểu mẫu hoặc hiển thị dữ liệu (ví dụ: `<apex:pageBlock title=\"Chi tiết tài khoản\">...</apex:pageBlock>`). Nó giống bố cục trang chuẩn của Salesforce, hỗ trợ các phần như `<apex:pageBlockSection>`, và được kiểm tra để đảm bảo định kiểu và chức năng nhất quán."
        },
        {
            "question": "Làm thế nào để xử lý thao tác dữ liệu hàng loạt trong Visualforce?",
            "answer": "Xử lý thao tác dữ liệu hàng loạt trong Visualforce bằng cách: (1) Sử dụng bộ điều khiển danh sách chuẩn với `recordSetVar` (ví dụ: `<apex:page standardController=\"Account\" recordSetVar=\"accounts\">`); (2) Viết logic Apex được tối ưu hóa hàng loạt trong bộ điều khiển để xử lý nhiều bản ghi (ví dụ: `update accounts`); (3) Hiển thị kết quả với `<apex:repeat>`, được kiểm tra trên sandbox để đảm bảo hiệu suất và không vi phạm giới hạn quản trị."
        },
        {
            "question": "Mục đích của thành phần `<apex:actionFunction>` là gì?",
            "answer": "Thành phần `<apex:actionFunction>` trong Visualforce cho phép JavaScript gọi phương thức bộ điều khiển Apex không đồng bộ (ví dụ: `<apex:actionFunction name=\"myFunction\" action=\"{!myMethod}\" rerender=\"output\" />`). Nó được dùng cho tương tác phía máy khách, được kiểm tra để đảm bảo cuộc gọi AJAX đúng, hiệu suất và không có vấn đề giới hạn quản trị trong Salesforce."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tạo trang đăng nhập tùy chỉnh?",
            "answer": "Tạo trang đăng nhập tùy chỉnh trong Visualforce bằng cách: (1) Viết bộ điều khiển Apex với logic xác thực tùy chỉnh (ví dụ: kiểm tra thông tin đăng nhập với đối tượng User); (2) Thiết kế trang với `<apex:form>`, `<apex:inputText>` cho tên người dùng/mật khẩu, và `<apex:commandButton action=\"{!login}\" />`; (3) Kiểm tra trên sandbox để đảm bảo bảo mật (ví dụ: không lưu mật khẩu dạng văn bản), hiệu suất và tuân thủ tiêu chuẩn Salesforce."
        },
        {
            "question": "Giới hạn của việc sử dụng JavaScript trong Visualforce khi hiển thị dưới dạng PDF là gì?",
            "answer": "Giới hạn của việc sử dụng JavaScript trong Visualforce khi hiển thị PDF bao gồm: (1) JavaScript bị vô hiệu hóa khi dùng `renderAs='pdf'`, vì công cụ PDF của Salesforce (Flying Saucer) không hỗ trợ; (2) Logic phía máy khách động (ví dụ: xác thực biểu mẫu) không hoạt động; (3) Chỉ hỗ trợ HTML và CSS giới hạn, được kiểm tra để đảm bảo logic phía máy chủ thay thế (Apex) xử lý nhu cầu cụ thể của PDF."
        },
        {
            "question": "Làm thế nào để cải thiện hiệu suất của trang Visualforce?",
            "answer": "Cải thiện hiệu suất Visualforce bằng cách: (1) Giảm thiểu SOQL/DML trong bộ điều khiển, sử dụng tối ưu hóa hàng loạt và bộ nhớ đệm; (2) Giảm kích thước trang (<1,000,000 ký tự); (3) Tối ưu hóa CSS/JavaScript, tận dụng Tài nguyên Tĩnh; (4) Sử dụng phân trang cho tập dữ liệu lớn, được kiểm tra trên sandbox để đảm bảo tuân thủ giới hạn quản trị và hiển thị hiệu quả."
        },
        {
            "question": "Vai trò của thành phần `<apex:outputLink>` là gì?",
            "answer": "Thành phần `<apex:outputLink>` trong Visualforce tạo một liên kết có thể nhấp (ví dụ: `<apex:outputLink value=\"/{!account.Id}\" target=\"_blank\">{!account.Name}</apex:outputLink>`), điều hướng đến URL hoặc trang chi tiết bản ghi. Nó nâng cao điều hướng, hỗ trợ giá trị động, và được kiểm tra để đảm bảo chức năng, bảo mật và hiệu suất trong giới hạn Salesforce."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để hiển thị biểu đồ hoặc đồ thị?",
            "answer": "Hiển thị biểu đồ/đồ thị trong Visualforce bằng cách: (1) Sử dụng Apex để truy vấn dữ liệu, truyền sang trang Visualforce; (2) Nhúng thư viện JavaScript (ví dụ: Chart.js) qua Tài nguyên Tĩnh, hiển thị biểu đồ với `<apex:outputPanel>`; (3) Hiển thị dưới dạng hình ảnh cho PDF, được kiểm tra trên sandbox để đảm bảo hiệu suất, bảo mật và tương thích với giới hạn quản trị."
        },
        {
            "question": "Sự khác biệt giữa `<apex:pageBlockSection>` và `<apex:sectionHeader>` là gì?",
            "answer": "Sự khác biệt: (1) `<apex:pageBlockSection>` tổ chức nội dung thành các phần trong `<apex:pageBlock>`, thường dùng cho biểu mẫu hoặc dữ liệu (ví dụ: `<apex:pageBlockSection columns=\"2\">...</apex:pageBlockSection>`); (2) `<apex:sectionHeader>` hiển thị tiêu đề hoặc đầu đề cho một phần, nâng cao bố cục, được kiểm tra để đảm bảo hiển thị và chức năng đúng trong Visualforce."
        },
        {
            "question": "Làm thế nào để bảo mật trang Visualforce chống lại truy cập trái phép?",
            "answer": "Bảo mật trang Visualforce bằng cách: (1) Sử dụng `with sharing` trong bộ điều khiển để thực thi quyền người dùng; (2) Áp dụng hồ sơ/quyền để hạn chế truy cập trang trong Setup > Visualforce Pages; (3) Xác thực đầu vào để ngăn chặn tấn công tiêm mã; (4) Kiểm tra trên sandbox để đảm bảo bảo mật (ví dụ: FLS, OWD), tuân thủ tiêu chuẩn Salesforce và không có vấn đề giới hạn quản trị."
        },
        {
            "question": "Mục đích của thành phần `<apex:panelGrid>` là gì?",
            "answer": "Thành phần `<apex:panelGrid>` trong Visualforce tạo bố cục dạng bảng để tổ chức các thành phần theo hàng và cột (ví dụ: `<apex:panelGrid columns=\"2\">...</apex:panelGrid>`). Nó được dùng cho hiển thị có cấu trúc, hỗ trợ định kiểu qua CSS, và được kiểm tra để đảm bảo hiển thị đúng, khả năng truy cập và hiệu suất trong Salesforce."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tạo trình hướng dẫn nhiều bước?",
            "answer": "Tạo trình hướng dẫn nhiều bước trong Visualforce bằng cách: (1) Sử dụng `<apex:page>` với bộ điều khiển tùy chỉnh để quản lý các bước; (2) Triển khai điều hướng với `<apex:commandButton>` (ví dụ: `action=\"{!nextStep}\"`, `action=\"{!previousStep}\"`) ; (3) Hiển thị các bước với `<apex:outputPanel>` hoặc `<apex:pageBlock>`, được kiểm tra trên sandbox để đảm bảo chức năng, bảo mật và hiệu suất."
        },
        {
            "question": "Thực hành tốt nhất để đặt tên cho trang Visualforce là gì?",
            "answer": "Thực hành tốt nhất để đặt tên cho trang Visualforce bao gồm: (1) Sử dụng tên mô tả, có ý nghĩa (ví dụ: `AccountDetailPage`, `OpportunityReport`); (2) Tuân theo quy ước đặt tên của Salesforce (không có dấu cách, chữ cái thường, dấu gạch dưới phân cách); (3) Tránh từ khóa dành sẵn; (4) Kiểm tra trên sandbox để đảm bảo tính duy nhất, chức năng và tuân thủ tiêu chuẩn Salesforce."
        },
        {
            "question": "Làm thế nào để xử lý thời gian chờ phiên trong Visualforce?",
            "answer": "Xử lý thời gian chờ phiên trong Visualforce bằng cách: (1) Sử dụng JavaScript để phát hiện không hoạt động, chuyển hướng đến trang đăng nhập (`window.location = '/secur/logout.jsp'`); (2) Triển khai logic Apex trong bộ điều khiển để kiểm tra hiệu lực phiên; (3) Kiểm tra trên sandbox để đảm bảo trải nghiệm người dùng, bảo mật và không có vấn đề giới hạn quản trị, duy trì trạng thái phiên."
        },
        {
            "question": "Vai trò của thành phần `<apex:outputPanel>` là gì?",
            "answer": "Thành phần `<apex:outputPanel>` trong Visualforce nhóm và hiển thị các thành phần khác (ví dụ: `<apex:outputPanel layout=\"block\">...</apex:outputPanel>`), hỗ trợ cập nhật một phần trang với `rerender`. Nó được dùng để kiểm soát bố cục, AJAX và nội dung động, được kiểm tra để đảm bảo chức năng, hiệu suất và tương thích với giới hạn Salesforce."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tích hợp với dịch vụ web bên ngoài?",
            "answer": "Tích hợp Visualforce với dịch vụ web bên ngoài bằng cách: (1) Viết bộ điều khiển Apex với phương thức `@future` hoặc `callout` để gọi API REST/SOAP; (2) Hiển thị kết quả trong trang Visualforce qua trường hợp nhất hoặc `<apex:repeat>`; (3) Kiểm tra trên sandbox để đảm bảo bảo mật (ví dụ: OAuth), hiệu suất và không vi phạm giới hạn quản trị (giới hạn gọi ra 100)."
        },
        {
            "question": "Giới hạn của Visualforce khi hiển thị dưới dạng HTML là gì?",
            "answer": "Giới hạn của Visualforce khi hiển thị dưới dạng HTML bao gồm: (1) Giới hạn quản trị (ví dụ: 1,000,000 ký tự, 100 truy vấn SOQL); (2) Phụ thuộc vào dữ liệu và bảo mật Salesforce; (3) Hỗ trợ hạn chế cho JavaScript/CSS phức tạp; (4) Ảnh hưởng hiệu suất với tập dữ liệu lớn, được kiểm tra để đảm bảo tối ưu hóa và tuân thủ tiêu chuẩn Salesforce."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tạo thanh tìm kiếm tùy chỉnh?",
            "answer": "Tạo thanh tìm kiếm tùy chỉnh trong Visualforce bằng cách: (1) Sử dụng `<apex:form>` với `<apex:inputText>` cho đầu vào người dùng; (2) Viết phương thức bộ điều khiển Apex (ví dụ: `public List<Account> search(String query) { return [SELECT Name FROM Account WHERE Name LIKE :('%' + query + '%')]; }`); (3) Hiển thị kết quả với `<apex:repeat>`, được kiểm tra trên sandbox để đảm bảo hiệu suất, bảo mật và khả dụng."
        },
        {
            "question": "Mục đích của thành phần `<apex:pageMessage>` là gì?",
            "answer": "Thành phần `<apex:pageMessage>` trong Visualforce hiển thị một thông điệp hệ thống hoặc tùy chỉnh duy nhất (ví dụ: `<apex:pageMessage severity=\"info\" summary=\"Thành công\" />`), thường dùng cho lỗi hoặc thông báo từ bộ điều khiển. Nó được dùng với `<apex:pageMessages>` cho nhiều thông điệp, được kiểm tra để đảm bảo phản hồi rõ ràng cho người dùng và tuân thủ giới hạn quản trị."
        },
        {
            "question": "Làm thế nào để tối ưu hóa trang Visualforce cho thiết bị di động?",
            "answer": "Tối ưu hóa Visualforce cho di động bằng cách: (1) Sử dụng CSS responsive qua Tài nguyên Tĩnh hoặc kiểu nội tuyến; (2) Thiết kế với `<apex:outputPanel>` hoặc `<apex:panelGrid>` cho bố cục linh hoạt; (3) Kiểm tra trên sandbox với trình duyệt/giả lập di động; (4) Đảm bảo hiệu suất trong giới hạn quản trị, nâng cao khả dụng trên màn hình nhỏ."
        },
        {
            "question": "Sự khác biệt giữa `<apex:inputField>` và `<apex:inputText>` là gì?",
            "answer": "Sự khác biệt: (1) `<apex:inputField>` liên kết với một trường Salesforce cụ thể (ví dụ: `<apex:inputField value=\"{!account.Name}\" />`), kế thừa thuộc tính trường (loại, xác thực); (2) `<apex:inputText>` là đầu vào văn bản chung (ví dụ: `<apex:inputText value=\"{!input}\" />`), yêu cầu xác thực tùy chỉnh, được kiểm tra để đảm bảo xử lý dữ liệu và bảo mật đúng."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để tạo giao diện quy trình phê duyệt tùy chỉnh?",
            "answer": "Tạo giao diện phê duyệt tùy chỉnh trong Visualforce bằng cách: (1) Viết bộ điều khiển Apex để truy vấn quy trình phê duyệt và bản ghi; (2) Thiết kế trang với `<apex:form>` cho hành động (phê duyệt, từ chối) và `<apex:repeat>` để hiển thị bước; (3) Kiểm tra trên sandbox để đảm bảo tích hợp với đối tượng phê duyệt Salesforce, bảo mật và hiệu suất."
        },
        {
            "question": "Thực hành tốt nhất để duy trì mã Visualforce là gì?",
            "answer": "Thực hành tốt nhất để duy trì mã Visualforce bao gồm: (1) Sử dụng tên mô tả cho trang, bộ điều khiển và thành phần; (2) Giảm thiểu SOQL/DML, tối ưu hóa logic hàng loạt; (3) Tận dụng Tài nguyên Tĩnh cho CSS/JavaScript; (4) Kiểm tra thường xuyên trên sandbox, đảm bảo độ bao phủ mã (75%), bảo mật và hiệu suất trong giới hạn quản trị."
        },
        {
            "question": "Làm thế nào để sử dụng Visualforce để hiển thị danh sách liên quan?",
            "answer": "Hiển thị danh sách liên quan trong Visualforce bằng cách: (1) Sử dụng bộ điều khiển Apex để truy vấn bản ghi liên quan (ví dụ: `SELECT Id, Name, (SELECT Id, Name FROM Contacts) FROM Account`); (2) Hiển thị với `<apex:relatedList>` hoặc `<apex:repeat>` (ví dụ: `<apex:repeat value=\"{!account.Contacts}\" var=\"contact\">{!contact.Name}</apex:repeat>`); (3) Kiểm tra trên sandbox để đảm bảo độ chính xác dữ liệu, bảo mật và hiệu suất."
        },
        {
            "question": "Vai trò của thành phần `<apex:commandLink>` là gì?",
            "answer": "Thành phần `<apex:commandLink>` trong Visualforce tạo một liên kết có thể nhấp kích hoạt hành động bộ điều khiển (ví dụ: `<apex:commandLink action=\"{!edit}\" value=\"Chỉnh sửa\" />`). Nó thực thi logic phía máy chủ (như điều hướng hoặc cập nhật dữ liệu), hỗ trợ hiển thị lại, và được kiểm tra để đảm bảo chức năng, bảo mật và hiệu suất trong giới hạn Salesforce."
        },
        {
            "question": "Làm thế nào để xử lý tải tệp lên trong Visualforce?",
            "answer": "Xử lý tải tệp lên trong Visualforce bằng cách: (1) Sử dụng `<apex:inputFile>` trong `<apex:form enctype=\"multipart/form-data\">` để tải tệp; (2) Viết phương thức bộ điều khiển Apex để xử lý tệp (ví dụ: `Blob fileBody = fileInput.body;`) và lưu vào Attachment/ContentDocument; (3) Kiểm tra trên sandbox để đảm bảo bảo mật, hiệu suất và tuân thủ giới hạn quản trị (6 MB heap)."
        },
        {
            "question": "Mục đích của thành phần `<apex:pageBlockTable>` là gì?",
            "answer": "Thành phần `<apex:pageBlockTable>` trong Visualforce hiển thị bảng dữ liệu từ một tập hợp (ví dụ: `<apex:pageBlockTable value=\"{!accounts}\" var=\"acc\">...</apex:pageBlockTable>`), thường trong `<apex:pageBlock>`. Nó hỗ trợ cột, sắp xếp và định kiểu, được kiểm tra để đảm bảo hiển thị đúng, khả năng truy cập và hiệu suất cho tập dữ liệu lớn."
        },
        {
            "question": "View State trong Visualforce là gì?",
            "answer": "View State trong Visualforce là cơ chế được sử dụng để duy trì trạng thái của một trang giữa các yêu cầu máy chủ. Nó lưu trữ dữ liệu của trang, bao gồm các biến, đầu vào biểu mẫu và trạng thái bộ điều khiển, trong một trường ẩn phía máy khách. Điều này cho phép Salesforce tái tạo lại trang cho các tương tác tiếp theo (ví dụ: gửi biểu mẫu). Kích thước View State quá lớn (giới hạn: 170 KB tính đến ngày 26 tháng 2 năm 2025) có thể làm chậm hiệu suất, vì vậy các nhà phát triển tối ưu hóa nó bằng cách giảm thiểu biến tạm thời hoặc giảm dữ liệu được tuần tự hóa."
        },
        {
            "question": "API nào được sử dụng để thiết kế trang Visualforce?",
            "answer": "Visualforce bản thân nó không được thiết kế thông qua một API bên ngoài mà sử dụng khung nội bộ của Salesforce và các API Apex. Tuy nhiên, để tương tác lập trình với các trang Visualforce (ví dụ: truy vấn siêu dữ liệu hoặc hiển thị), bạn có thể sử dụng Salesforce Metadata API hoặc Tooling API. Để thao tác dữ liệu trong Visualforce, Apex tận dụng SOAP API hoặc REST API để tích hợp với các đối tượng Salesforce."
        },
        {
            "question": "Sự khác biệt giữa actionSupport và actionFunction là gì?",
            "answer": "<apex:actionSupport> gắn vào một thành phần hiện có (ví dụ: <apex:inputText>) để kích hoạt một phương thức Apex thông qua một sự kiện (ví dụ: onchange). Nó đơn giản hơn cho các cập nhật AJAX nội tuyến, hiển thị lại một phần trang mà không cần JavaScript. <apex:actionFunction> định nghĩa một hàm JavaScript độc lập gọi một phương thức Apex, cung cấp sự linh hoạt hơn cho logic phía máy khách tùy chỉnh. Nó yêu cầu gọi rõ ràng qua JavaScript nhưng có thể xử lý các kịch bản phức tạp. Ví dụ: actionSupport cập nhật một trường khi mất tiêu điểm, trong khi actionFunction có thể kích hoạt lưu từ một nút tùy chỉnh."
        },
        {
            "question": "actionRegion là gì?",
            "answer": "<apex:actionRegion> giới hạn phần của trang Visualforce được gửi trong một yêu cầu AJAX, giảm View State và cải thiện hiệu suất. Nó bao bọc các thành phần (ví dụ: trường nhập liệu) để chỉ định dữ liệu nào được gửi đến máy chủ, loại trừ các trường không liên quan. Ví dụ, <apex:actionRegion> quanh một trường tìm kiếm đảm bảo chỉ từ khóa tìm kiếm được xử lý, không phải toàn bộ biểu mẫu."
        },
        {
            "question": "Sự khác biệt giữa insert và include là gì?",
            "answer": "<apex:insert> được sử dụng với <apex:define> và <apex:composition> để chèn nội dung vào một mẫu tại thời điểm chạy. Nó dùng cho các phần trang có thể tái sử dụng trong một cấu trúc trang Visualforce duy nhất. <apex:include> nhúng toàn bộ một trang Visualforce riêng biệt vào trang hiện tại, như một trang con, duy trì bộ điều khiển và logic riêng của nó. Ví dụ: insert tùy chỉnh tiêu đề mẫu; include nhúng một trang báo cáo đầy đủ."
        },
        {
            "question": "Sự khác biệt giữa Related List, Enhanced List và Detail là gì?",
            "answer": "Related List hiển thị các bản ghi liên quan đến một đối tượng cha (ví dụ: Danh bạ dưới một Tài khoản) bằng <apex:relatedList>. Nó gắn với các trường quan hệ. Enhanced List là một chế độ xem danh sách tương tác, có thể tùy chỉnh (không phải thành phần Visualforce mà là tính năng Salesforce) để lọc và thực hiện hành động hàng loạt, thường được mô phỏng trong Visualforce bằng <apex:pageBlockTable>. Detail hiển thị các trường của một bản ghi duy nhất (ví dụ: <apex:detail>), tập trung vào dữ liệu bản ghi riêng lẻ mà không có các bản ghi liên quan."
        },
        {
            "question": "Sự khác biệt giữa bộ điều khiển và phần mở rộng là gì?",
            "answer": "Bộ điều khiển là một lớp Apex độc lập (bộ điều khiển tùy chỉnh) hoặc được xây dựng sẵn (bộ điều khiển chuẩn) quản lý hoàn toàn logic của trang Visualforce, chạy ở chế độ hệ thống cho bộ điều khiển tùy chỉnh. Phần mở rộng mở rộng một bộ điều khiển chuẩn hoặc tùy chỉnh, thêm chức năng bổ sung trong khi tái sử dụng logic hiện có, chạy ở chế độ của bộ điều khiển cha. Ví dụ: Bộ điều khiển tùy chỉnh xây dựng lại logic; phần mở rộng thêm nút mới vào bộ điều khiển chuẩn."
        },
        {
            "question": "AJAX là gì? Bạn đã sử dụng nó chưa? Nếu có, hãy kể về kịch bản?",
            "answer": "AJAX (Asynchronous JavaScript and XML) cho phép cập nhật một phần trang mà không cần làm mới toàn bộ. Trong Visualforce, nó được triển khai qua <apex:actionSupport>, <apex:actionFunction>, v.v. Kịch bản: Tôi đã sử dụng AJAX với <apex:actionSupport> trên một trường <apex:inputText> để cập nhật động bảng kết quả khi người dùng nhập truy vấn tìm kiếm, cải thiện khả năng phản hồi."
        },
        {
            "question": "jQuery là gì? Bạn đã sử dụng nó ở đâu?",
            "answer": "jQuery là một thư viện JavaScript để đơn giản hóa việc thao tác DOM, xử lý sự kiện và AJAX. Trong Visualforce, tôi đã sử dụng jQuery (qua Tài nguyên Tĩnh) để nâng cao xác thực phía máy khách, như làm nổi bật các trường không hợp lệ trong biểu mẫu trước khi gửi, đảm bảo trải nghiệm người dùng mượt mà hơn mà không cần vòng quay máy chủ."
        },
        {
            "question": "S-Controls là gì?",
            "answer": "S-Controls là các tùy chỉnh cũ của Salesforce (trước Visualforce, khoảng những năm 2000) được viết bằng HTML/JavaScript để mở rộng chức năng giao diện người dùng. Chúng đã bị ngừng sử dụng kể từ khi Visualforce và Lightning thay thế, với tính bảo mật và khả năng tích hợp tốt hơn. Ví dụ: Một S-Control có thể hiển thị dữ liệu tùy chỉnh trên trang chi tiết."
        },
        {
            "question": "Tài nguyên Tĩnh trong Visualforce dùng để làm gì?",
            "answer": "Tài nguyên Tĩnh trong Visualforce được sử dụng để lưu trữ các tệp tĩnh như CSS, JavaScript, hình ảnh, được tải lên qua Setup > Static Resources. Chúng được tham chiếu trong trang bằng {!$Resource.MyFile}, giúp cải thiện khả năng bảo trì và hiệu suất, được kiểm tra để đảm bảo khả năng truy cập và bảo mật."
        },
        {
            "question": "Tôi có thể truyền tham số từ trang Visualforce sang phương thức Apex không?",
            "answer": "Có, bạn có thể truyền tham số từ trang Visualforce sang phương thức Apex bằng cách sử dụng <apex:param> trong <apex:actionFunction> hoặc <apex:commandButton>, hoặc bằng cách gán giá trị vào thuộc tính của bộ điều khiển từ biểu mẫu. Ví dụ: <apex:actionFunction name='myFunction' action='{!myMethod}'> <apex:param name='param1' value='giá trị' /> </apex:actionFunction>."
        },
        {
            "question": "Làm thế nào để tham chiếu đến ID của trang hiện tại?",
            "answer": "Để tham chiếu đến ID của trang hiện tại trong Visualforce, bạn có thể sử dụng ApexPages.currentPage().getParameters().get('id') trong bộ điều khiển Apex để lấy ID từ URL, thường được sử dụng khi trang liên quan đến một bản ghi cụ thể."
        },
        {
            "question": "Hãy nói gì đó về $Action?",
            "answer": "$Action là một biến toàn cục trong Visualforce cung cấp quyền truy cập vào các hành động chuẩn của Salesforce như save, edit, delete trên các đối tượng. Ví dụ: {!$Action.Account.Edit} tạo một liên kết hoặc nút để chỉnh sửa một bản ghi Account, thường được sử dụng với <apex:commandLink> hoặc <apex:commandButton>."
        },
        {
            "question": "Làm thế nào để nhúng Google Map vào Visualforce?",
            "answer": "Để nhúng Google Map vào Visualforce, bạn cần: (1) Thêm Google Maps JavaScript API qua Tài nguyên Tĩnh hoặc thẻ <script>; (2) Sử dụng Apex để lấy dữ liệu địa chỉ từ bản ghi Salesforce; (3) Hiển thị bản đồ trong <apex:outputPanel> với JavaScript để vẽ bản đồ dựa trên tọa độ, được kiểm tra để đảm bảo hiệu suất và bảo mật."
        },
        {
            "question": "Thành phần tùy chỉnh là gì?",
            "answer": "Thành phần tùy chỉnh trong Visualforce là các khối mã có thể tái sử dụng được định nghĩa bằng <apex:component>, cho phép đóng gói giao diện và logic (ví dụ: biểu mẫu hoặc bảng) để sử dụng trên nhiều trang Visualforce, giúp giảm trùng lặp và dễ bảo trì."
        },
        {
            "question": "Làm thế nào để khiến một trang Visualforce khả dụng cho Salesforce1?",
            "answer": "Để khiến một trang Visualforce khả dụng cho Salesforce1 (nay là Salesforce Mobile App), bạn cần: (1) Đánh dấu trang bằng thuộc tính showHeader='false' và applyBodyTag='false' để tối ưu hóa giao diện di động; (2) Thêm trang vào Mobile Navigation trong Setup; (3) Kiểm tra giao diện responsive bằng CSS."
        },
        {
            "question": "Làm thế nào để sử dụng kết nối Sforce?",
            "answer": "Kết nối Sforce đề cập đến Salesforce JavaScript API (thường từ thời S-Controls hoặc AJAX Toolkit). Trong Visualforce hiện đại, bạn sử dụng Apex REST hoặc SOAP API trực tiếp trong bộ điều khiển thay vì kết nối Sforce cũ, được kiểm tra để đảm bảo tích hợp an toàn và hiệu quả."
        },
        {
            "question": "Làm thế nào để triển khai autoLookup và truy vấn từ trang Visualforce?",
            "answer": "Để triển khai autoLookup trong Visualforce, bạn: (1) Sử dụng <apex:inputText> với <apex:actionSupport> để gọi phương thức Apex khi nhập liệu; (2) Truy vấn dữ liệu bằng SOQL trong Apex (ví dụ: WHERE Name LIKE '%query%'); (3) Hiển thị gợi ý trong <apex:repeat>, được kiểm tra để đảm bảo hiệu suất và trải nghiệm người dùng."
        }
    ],
    "Aura Framework": [
        {
            "question": "Aura Framework là gì?",
            "answer": "Aura Framework là một khung giao diện người dùng mã nguồn mở được phát triển bởi Salesforce để xây dựng các ứng dụng web động trên nhiều nền tảng như di động và máy tính để bàn."
        },
        {
            "question": "Các tính năng chính của Aura Framework là gì?",
            "answer": "Các tính năng chính bao gồm kiến trúc dựa trên thành phần, mô hình lập trình dựa trên sự kiện, xử lý tương tác giữa máy khách và máy chủ, và khả năng mở rộng cho các ứng dụng quy mô lớn."
        },
        {
            "question": "Giải thích kiến trúc dựa trên thành phần của Aura Framework?",
            "answer": "Aura Framework tuân theo cách tiếp cận mô-đun, trong đó các phần tử giao diện người dùng được đóng gói thành các thành phần có thể tái sử dụng. Những thành phần này có thể dễ dàng quản lý, mở rộng và tái sử dụng trên các phần khác nhau của ứng dụng."
        },
        {
            "question": "Aura Framework hỗ trợ lập trình dựa trên sự kiện như thế nào?",
            "answer": "Aura Framework sử dụng kiến trúc dựa trên sự kiện, trong đó các thành phần giao tiếp với nhau qua các sự kiện. Điều này cho phép các tương tác linh hoạt và tách rời giữa các phần khác nhau của ứng dụng."
        },
        {
            "question": "Vai trò của Bộ điều khiển Aura trong Aura Framework là gì?",
            "answer": "Bộ điều khiển Aura đóng vai trò là trung tâm xử lý sự kiện và quản lý luồng dữ liệu trong ứng dụng. Nó giúp điều phối các tương tác giữa các thành phần và logic kinh doanh."
        },
        {
            "question": "Sự khác biệt giữa bộ điều khiển phía máy chủ và phía máy khách trong Aura Framework là gì?",
            "answer": "Bộ điều khiển phía máy chủ xử lý các hành động và logic trên máy chủ, trong khi bộ điều khiển phía máy khách thực thi các hành động và logic ở phía máy khách trong trình duyệt."
        },
        {
            "question": "Aura Framework xử lý tương tác giữa máy khách và máy chủ như thế nào?",
            "answer": "Aura Framework sử dụng mô hình giao tiếp máy khách-máy chủ, trong đó các thành phần phía máy khách tương tác không đồng bộ với bộ điều khiển phía máy chủ qua các hành động từ xa hoặc hành động phía máy chủ."
        },
        {
            "question": "Giải thích khái niệm Thành phần Lightning trong Aura Framework?",
            "answer": "Thành phần Lightning là tập hợp các thành phần giao diện người dùng được xây dựng sẵn bởi Salesforce, có thể được sử dụng để đẩy nhanh quá trình phát triển và nâng cao trải nghiệm người dùng trong các ứng dụng dựa trên Aura."
        },
        {
            "question": "Lợi ích của việc sử dụng Thành phần Lightning trong Aura Framework là gì?",
            "answer": "Lợi ích bao gồm phát triển nhanh hơn, thiết kế giao diện người dùng nhất quán, hiệu suất cải thiện và truy cập vào các tính năng và chức năng đặc trưng của Salesforce."
        },
        {
            "question": "Aura Framework đảm bảo bảo mật trong ứng dụng web như thế nào?",
            "answer": "Aura Framework triển khai nhiều tính năng bảo mật như bảo vệ chống Cross-Site Scripting (XSS), hạn chế Cross-Origin Resource Sharing (CORS) và xác thực đầu vào để ngăn chặn các lỗ hổng bảo mật phổ biến."
        },
        {
            "question": "Vai trò của Ứng dụng Aura trong Aura Framework là gì?",
            "answer": "Ứng dụng Aura đóng vai trò là điểm vào cho ứng dụng dựa trên Aura và cung cấp cấu trúc tổng thể cùng cấu hình cho ứng dụng."
        },
        {
            "question": "Giải thích khái niệm Gói Aura trong Aura Framework?",
            "answer": "Gói Aura là tập hợp các tài nguyên như thành phần, sự kiện, giao diện và tài liệu được đóng gói cùng nhau để dễ dàng phân phối và triển khai."
        },
        {
            "question": "Aura Framework xử lý liên kết dữ liệu như thế nào?",
            "answer": "Aura Framework hỗ trợ liên kết dữ liệu hai chiều, trong đó các thay đổi trong giao diện người dùng tự động phản ánh lên mô hình dữ liệu cơ bản và ngược lại, đảm bảo sự nhất quán giữa giao diện và mô hình."
        },
        {
            "question": "Vai trò của Dịch vụ Lưu trữ Aura trong Aura Framework là gì?",
            "answer": "Dịch vụ Lưu trữ Aura cung cấp bộ nhớ đệm phía máy khách để lưu trữ và quản lý dữ liệu cục bộ, giảm nhu cầu yêu cầu máy chủ thường xuyên và cải thiện hiệu suất ứng dụng."
        },
        {
            "question": "Aura Framework hỗ trợ quốc tế hóa và bản địa hóa như thế nào?",
            "answer": "Aura Framework cung cấp hỗ trợ tích hợp cho quốc tế hóa và bản địa hóa qua các gói tài nguyên, cho phép nhà phát triển tạo ứng dụng dễ dàng thích nghi với các ngôn ngữ và khu vực khác nhau."
        },
        {
            "question": "Thực hành tốt nhất để tối ưu hóa hiệu suất trong ứng dụng dựa trên Aura là gì?",
            "answer": "Thực hành tốt nhất bao gồm giảm thiểu yêu cầu máy chủ, tối ưu hóa hiển thị thành phần, giảm kích thước tải trọng, lưu trữ dữ liệu khi có thể và tận dụng cơ chế lưu trữ của trình duyệt."
        },
        {
            "question": "Aura Framework xử lý xử lý lỗi và gỡ lỗi như thế nào?",
            "answer": "Aura Framework cung cấp cơ chế xử lý lỗi mạnh mẽ, bao gồm xử lý ngoại lệ, ghi nhật ký và công cụ gỡ lỗi, giúp nhà phát triển xác định và giải quyết vấn đề hiệu quả trong quá trình phát triển và kiểm tra."
        },
        {
            "question": "Giải thích khái niệm Sự kiện Aura trong Aura Framework?",
            "answer": "Sự kiện Aura là các thông điệp được gửi bởi các thành phần để giao tiếp với nhau hoặc kích hoạt hành động. Chúng hỗ trợ kết nối lỏng lẻo giữa các thành phần và cho phép giao tiếp linh hoạt trong ứng dụng."
        },
        {
            "question": "Các loại sự kiện khác nhau được Aura Framework hỗ trợ là gì?",
            "answer": "Aura Framework hỗ trợ sự kiện ứng dụng, sự kiện thành phần và sự kiện hệ thống. Sự kiện ứng dụng là sự kiện toàn cục có thể được xử lý bởi bất kỳ thành phần nào, trong khi sự kiện thành phần chỉ áp dụng cho một hệ thống phân cấp thành phần cụ thể."
        },
        {
            "question": "Aura Framework hỗ trợ kiểm tra và đảm bảo chất lượng như thế nào?",
            "answer": "Aura Framework cung cấp hỗ trợ tích hợp cho kiểm tra đơn vị, kiểm tra tích hợp và kiểm tra đầu cuối thông qua các khung như Jasmine và Selenium. Điều này cho phép nhà phát triển đảm bảo độ tin cậy và chất lượng của ứng dụng dựa trên Aura."
        },
        {
            "question": "Làm thế nào để mở rộng một thành phần trong Aura Framework?",
            "answer": "Để làm cho một thành phần có thể mở rộng, cần đặt giá trị của thuộc tính ‘extensible’ thành ‘true’ trong thành phần Aura cha. Khi một thành phần mở rộng một thành phần khác, nó kế thừa tất cả các phương thức trợ giúp và thuộc tính."
        },
        {
            "question": "Làm thế nào để gọi một phương thức JS từ một phương thức JS khác trong Aura?",
            "answer": "Dưới đây là mã mẫu để gọi một phương thức JS khác: ```javascript\n({\n    func1: function(component, event, helper) {\n        var func2 = component.get(\"c.func2\");\n        $A.enqueueAction(func2);\n    },\n    func2: function(component, event, helper) {\n        alert('bên trong func2');\n    }\n})\n```"
        },
        {
            "question": "Làm thế nào để truyền giá trị đến bộ điều khiển JS khi sử dụng siêu liên kết?",
            "answer": "Dưới đây là mã mẫu: ```html\n<aura:component>\n    <a href=\"javascript:void(0);\" onclick=\"{!c.func}\" data-userid=\"xin chào\">Nhấn</a>\n</aura:component>\n``` ```javascript\n({\n    func: function(component, event, helper) {\n        var evt = event.currentTarget;\n        var val = evt.dataset.userid;\n        alert(val);\n    }\n})\n```"
        },
        {
            "question": "Các bước để thêm một thành phần Lightning vào trang VF là gì?",
            "answer": "1. Thêm thư viện JavaScript Lightning Components for Visualforce vào trang Visualforce bằng thành phần `<apex:includeLightning/>`. 2. Tạo và tham chiếu một ứng dụng Lightning khai báo các phụ thuộc thành phần. 3. Viết hàm JavaScript tạo thành phần trên trang bằng `$Lightning.createComponent()`."
        },
        {
            "question": "Làm thế nào để vô hiệu hóa chức năng dán trong đầu vào Lightning?",
            "answer": "Dưới đây là mã mẫu: ```html\n<aura:component>\n    <aura:attribute name=\"data\" type=\"String\"/>\n    <div aura:id=\"dtag\" onpaste=\"{!c.handlePaste}\">\n        <lightning:input name=\"inp\" label=\"Nhập giá trị\" value=\"{!v.data}\"/>\n    </div>\n</aura:component>\n``` ```javascript\n({\n    handlePaste: function(component, event, helper) {\n        event.preventDefault();\n    }\n})\n```"
        },
        {
            "question": "Làm thế nào để lấy tên người dùng hiện tại và tên hồ sơ người dùng hiện tại trong thành phần Aura mà không dùng Apex?",
            "answer": "```html\n<aura:component>\n    <aura:attribute name=\"currentUser\" type=\"User\"/>\n    <force:recordData aura:id=\"recordLoader\" recordId=\"{!$SObjectType.CurrentUser.Id}\" fields=\"Profile.Name,Name\" targetFields=\"{!v.currentUser}\"/>\n    Người dùng hiện tại: <strong>{!v.currentUser.Name}</strong>\n    Hồ sơ hiện tại: <strong>{!v.currentUser.Profile.Name}</strong>\n</aura:component>\n```"
        },
        {
            "question": "Giải thích liên kết dữ liệu trong Aura?",
            "answer": "Liên kết dữ liệu trong Aura Framework là hai chiều, tức là từ thành phần cha đến con và từ con đến cha. Ví dụ: ```html\n<!-- Thành phần cha -->\n<aura:component>\n    <aura:attribute name=\"parentVar\" type=\"Integer\" default=\"1\"/>\n    <c:DataBindingChild childVar=\"{!v.parentVar}\"/>\n    parentVar: {!v.parentVar}\n</aura:component>\n<!-- Thành phần con -->\n<aura:component>\n    <aura:attribute name=\"childVar\" type=\"Integer\"/>\n    <lightning:button label=\"thay đổi giá trị\" variant=\"brand\" onclick=\"{!c.handleClick}\"/>\n    childVar: {!v.childVar}\n</aura:component>\n``` ```javascript\n({\n    handleClick: function(component, event, helper) {\n        var childVar = component.get(\"v.childVar\");\n        component.set(\"v.childVar\", childVar + 1);\n    }\n})\n``` Giá trị thay đổi ở con sẽ phản ánh lên cha."
        },
        {
            "question": "Tại sao chúng ta sử dụng chú thích @AuraEnabled?",
            "answer": "Chú thích @AuraEnabled hỗ trợ các phương thức và thuộc tính Apex được sử dụng với Khung Thành phần Lightning. Nó được dùng để: 1. Làm cho các phương thức tĩnh của lớp Apex có thể truy cập như hành động bộ điều khiển từ xa trong thành phần Lightning. 2. Làm cho các phương thức và thuộc tính thể hiện của Apex có thể tuần tự hóa khi một thể hiện của lớp được trả về từ hành động phía máy chủ."
        },
        {
            "question": "Có thể sử dụng giá trị của một thuộc tính khác hoặc nhãn tùy chỉnh làm giá trị mặc định của một thuộc tính trong thành phần Aura thay vì mã cứng không?",
            "answer": "Có, điều này khả thi. Ví dụ: ```html\n<aura:component>\n    <aura:attribute name=\"dataVar1\" type=\"Integer\" default=\"1\"/>\n    <aura:attribute name=\"dataVar2\" type=\"Integer\" default=\"{!v.dataVar1}\"/>\n    <aura:attribute name=\"dataVar3\" type=\"String\" default=\"{!$Label.c.Test_Custom_Label}\"/>\n    dataVar1: {!v.dataVar1}<br/>\n    dataVar2: {!v.dataVar2}<br/>\n    dataVar3: {!v.dataVar3}\n</aura:component>\n``` Kết quả: dataVar1: 1, dataVar2: 1, dataVar3: Xin chào thế giới (giả sử giá trị nhãn là ‘Xin chào thế giới’)."
        },
        {
            "question": "Làm thế nào để hạn chế một thành phần Aura chỉ được sử dụng trong các trang bản ghi của các Sobject cụ thể?",
            "answer": "Chúng ta có thể hạn chế bằng cách chỉ định trong tệp thiết kế của gói Aura bằng thẻ `<sfdc:objects>` và `<sfdc:object>` để chỉ định các đối tượng cụ thể."
        },
        {
            "question": "Mục đích của thẻ `<aura:method/>` là gì?",
            "answer": "Thẻ này được sử dụng để gửi dữ liệu từ thành phần cha đến thành phần con, ngược lại với những gì sự kiện thành phần thực hiện."
        },
        {
            "question": "Mục đích của tệp trợ giúp trong thành phần Aura là gì?",
            "answer": "Việc sử dụng bộ điều khiển gọn nhẹ và trợ giúp đầy đủ được khuyến nghị để bảo trì mã tốt hơn. Tệp trợ giúp cho phép chia sẻ mã giữa các thành phần trong hệ thống phân cấp."
        },
        {
            "question": "Sự khác biệt chính giữa thành phần Aura và LWC là gì?",
            "answer": "Aura yêu cầu mã đặc thù và tạo JS gốc, trong khi LWC cho phép viết JS gốc, mang lại hiệu suất tốt hơn. Aura ra đời trước ES6, trong khi LWC tận dụng các tính năng JS hiện đại ngay khi chúng được phát hành."
        },
        {
            "question": "Tại sao Salesforce phát triển LWC khi đã có Aura trong 6 năm?",
            "answer": "Khi Aura ra mắt, ES6 chưa tồn tại. Sau khi ES6 ra đời, JavaScript và trình duyệt đã tiến hóa nhiều. Aura cần chuyển đổi các tính năng mới, trong khi LWC sử dụng JS gốc, cải thiện hiệu suất và loại bỏ nhu cầu chuyển đổi."
        },
        {
            "question": "Làm thế nào để gửi dữ liệu từ thành phần cha đến thành phần con?",
            "answer": "Dữ liệu được gửi từ cha đến con bằng cách sử dụng các thuộc tính."
        },
        {
            "question": "Làm thế nào để gửi dữ liệu từ thành phần con đến thành phần cha?",
            "answer": "Khi gửi dữ liệu từ con đến cha, cần sử dụng sự kiện thành phần để truyền dữ liệu."
        },
        {
            "question": "Có bao nhiêu loại sự kiện trong thành phần Aura và mục đích của chúng là gì?",
            "answer": "Có ba loại sự kiện: 1. **Sự kiện thành phần**: Dùng để gửi dữ liệu từ con đến cha. 2. **Sự kiện ứng dụng**: Dùng để gửi dữ liệu giữa các thành phần không trong cùng hệ thống phân cấp. 3. **Sự kiện chuẩn sẵn có**: Các sự kiện được khung cung cấp, ví dụ sự kiện hiển thị thông báo."
        },
        {
            "question": "Chúng ta có thể gọi phương thức Apex không có @AuraEnabled không?",
            "answer": "Không, chúng ta không thể gọi phương thức Apex không có @AuraEnabled trong Lightning."
        },
        {
            "question": "Điều gì xảy ra khi chúng ta cố trả về các kiểu dữ liệu không được AuraEnabled?",
            "answer": "Chúng ta sẽ nhận được NULL. Kiểu dữ liệu trả về luôn phải được AuraEnabled."
        },
        {
            "question": "Sự thay đổi dữ liệu trong thành phần Aura là hai chiều hay một chiều?",
            "answer": "Có! Nó là hai chiều trong Aura và một chiều trong LWC. Trong LWC, để thay đổi giá trị một thuộc tính, cần gửi giá trị mới đến cha, cha sửa đổi và gửi lại cho con."
        },
        {
            "question": "Chúng ta có thể có phương thức AuraEnabled không tĩnh không?",
            "answer": "Không, phương thức phải luôn là tĩnh khi dùng @AuraEnabled, nếu không sẽ gây lỗi."
        },
        {
            "question": "Làm thế nào để triển khai trình hướng dẫn biểu mẫu trong thành phần Aura mà không hiển thị tất cả trường cùng lúc?",
            "answer": "Hiển thị tất cả trường trong thành phần, sau đó sử dụng `$A.util.toggleClass`, `$A.util.addClass()`, và `$A.util.removeClass()` để hiện/ẩn từng nhóm trường. Ví dụ, hiện 3 trường đầu, ẩn phần còn lại, sau đó khi nhấp 'tiếp theo', ẩn 3 trường đầu và hiện 3 trường tiếp theo, cuối cùng lưu bản ghi bằng phương thức LDS hoặc Apex."
        },
        {
            "question": "Làm thế nào để tự động triển khai logic sau khi các thành phần được khởi tạo?",
            "answer": "Sử dụng `<aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.doInit}\"/>`."
        },
        {
            "question": "Làm thế nào để tự động triển khai logic sau khi các thành phần được hiển thị hoàn toàn?",
            "answer": "Sử dụng `<aura:handler name=\"render\" value=\"{!this}\" action=\"{!c.doRender}\"/>`."
        },
        {
            "question": "Các kiểu dữ liệu nào có thể được sử dụng cho thuộc tính trong thành phần Aura?",
            "answer": "- Kiểu cơ bản: String, Integer, Boolean, Decimal, Double, Date, DateTime, Long\n- Kiểu tập hợp: Array, List, Map, Set\n- Kiểu đối tượng: Object, SobjectApiName"
        },
        {
            "question": "Thẻ nào được sử dụng để lặp qua danh sách bản ghi trong thành phần Aura?",
            "answer": "`<aura:iteration items=\"\" var=\"\"></aura:iteration>`"
        },
        {
            "question": "Mục đích của tệp thiết kế trong thành phần là gì?",
            "answer": "Tệp thiết kế cho phép quản trị viên tùy chỉnh giá trị của các tham số thông qua giao diện người dùng."
        },
        {
            "question": "Gói tài nguyên trong thành phần Aura là gì?",
            "answer": "Khi tạo một thành phần Aura, nó bao gồm 8 tệp (CSS, tài liệu, v.v.), giúp mô-đun hóa mã. Tất cả các tệp này cùng nhau được gọi là gói tài nguyên."
        },
        {
            "question": "Tôi có thể tạo thành phần Aura mà không có tệp CSS không?",
            "answer": "Không, không thể. Tất cả 8 tệp trong gói tài nguyên được tạo tự động khi thành phần được tạo."
        },
        {
            "question": "Mục đích của tệp tài liệu trong thành phần Aura là gì?",
            "answer": "Tệp tài liệu cho phép tạo tài liệu tiêu chuẩn tự động cho thành phần bằng cách sử dụng một số thẻ, tương tự tài liệu cho thành phần cơ bản."
        },
        {
            "question": "Mục đích của thuộc tính implements trong thẻ `<aura:component/>` là gì?",
            "answer": "Khi sử dụng `implements`, chúng ta mở rộng chức năng của thành phần, cho phép nhúng nó vào trang bản ghi, trang Lightning, cộng đồng, v.v. Mặc định, thành phần không có giao diện hiển thị trừ khi được đặt vào các trang cụ thể."
        },
        {
            "question": "Sự kiện chuẩn sẵn có là gì?",
            "answer": "Đây là các sự kiện được khung cung cấp sẵn mà chúng ta có thể sử dụng mà không cần tạo, ví dụ sự kiện hiển thị thông báo (Show Toast)."
        },
        {
            "question": "Sự kiện nền tảng là gì?",
            "answer": "Sự kiện nền tảng được sử dụng để gửi thông báo tùy chỉnh trong Salesforce và đến ứng dụng bên ngoài. Ví dụ, gửi thông báo kèm dữ liệu về đơn hàng đến hệ thống ERP bên ngoài hoặc ngược lại."
        },
        {
            "question": "Làm thế nào để điều hướng người dùng từ một thành phần đến thành phần khác trong thành phần Aura?",
            "answer": "Sử dụng khái niệm `PageReference Types` và triển khai `lightning:isUrlAddressable` cho thành phần đích."
        },
        {
            "question": "Làm thế nào để gắn một thành phần vào Trang Bản Ghi Lightning?",
            "answer": "Triển khai giao diện `force:availableForRecordHome`."
        },
        {
            "question": "Chúng ta có thể hiển thị một thành phần có điều kiện trong Trang Bản Ghi Lightning không?",
            "answer": "Có, trong Lightning App Builder, có tùy chọn để hiển thị thành phần có điều kiện."
        }
    ],
    "Apex": [
        {
            "question": "Làm thế nào để tránh lặp lồng nhau trong Apex?",
            "answer": "Để tránh lặp lồng nhau (nested loops), sử dụng cấu trúc `Map` để nhóm dữ liệu trước khi xử lý. Điều này giảm số lần lặp và ngăn ngừa vượt giới hạn CPU hoặc SOQL khi xử lý dữ liệu lớn, thay vì lặp qua danh sách nhiều lần để tìm kiếm hoặc so sánh."
        },
        {
            "question": "Có thể lên lịch cho một lớp Apex nhiều lần trong một ngày không?",
            "answer": "Có, bạn có thể lên lịch một lớp Apex nhiều lần trong ngày bằng cách sử dụng `System.schedule()` với các biểu thức cron khác nhau. Mỗi lần lên lịch tạo một công việc riêng biệt trong Apex Scheduler, miễn là không vượt giới hạn số công việc tối đa (100 công việc trong hàng đợi)."
        },
        {
            "question": "Một Flow với 80 phần tử \"Get Records\" được dùng để truy vấn dữ liệu, và Flow này cũng gọi một lớp Apex chứa 80 SOQL queries. Điều này có dẫn đến vượt giới hạn governor limits không?",
            "answer": "Có, vì giới hạn governor limits cho SOQL trong một giao dịch là 100 truy vấn. Flow thực hiện 80 truy vấn SOQL qua các phần tử \"Get Records\", cộng thêm 80 truy vấn từ Apex, tổng cộng 160 truy vấn, vượt quá giới hạn 100, dẫn đến lỗi \"Too many SOQL queries\"."
        },
        {
            "question": "Làm thế nào để khóa bản ghi trong Salesforce bằng Apex?",
            "answer": "Sử dụng từ khóa `FOR UPDATE` trong câu lệnh SOQL để khóa bản ghi, ngăn người dùng hoặc quy trình khác chỉnh sửa trong khi giao dịch đang xử lý. Điều này đảm bảo tính toàn vẹn dữ liệu trong các tình huống cạnh tranh, nhưng chỉ hoạt động trong cùng một giao dịch Apex."
        },
        {
            "question": "Sự khác biệt giữa \"with sharing\" và \"without sharing\" trong Apex là gì?",
            "answer": "`with sharing`: Lớp Apex tôn trọng quyền chia sẻ của người dùng hiện tại, chỉ cho phép truy cập các bản ghi mà người dùng có quyền xem theo cấu hình chia sẻ (sharing rules, roles, v.v.). \n`without sharing`: Lớp Apex bỏ qua quyền chia sẻ, chạy với quyền hệ thống, cho phép truy cập tất cả bản ghi bất kể quyền người dùng, thường dùng khi cần thực hiện thao tác quản trị."
        },
        {
            "question": "Có bao nhiêu phương thức invocable trong một lớp Apex?",
            "answer": "Chỉ một phương thức `@InvocableMethod` được phép trong mỗi lớp Apex. Đây là giới hạn thiết kế của Salesforce để đảm bảo tính đơn giản và khả năng tái sử dụng khi gọi từ Flow hoặc Process Builder."
        },
        {
            "question": "Khi tạo một phương thức Apex cho LWC, bạn chỉ định annotation `@AuraEnabled`, và đôi khi là `@AuraEnabled(cacheable=true)`. `cacheable=true` có nghĩa là gì?",
            "answer": "`@AuraEnabled` cho phép phương thức Apex được gọi từ LWC hoặc Aura. Thêm `cacheable=true` yêu cầu phương thức chỉ đọc (không thực hiện DML) và bật cơ chế cache phía client để giảm số lần gọi Apex, tăng hiệu suất bằng cách lưu trữ kết quả trong bộ nhớ tạm thời của trình duyệt."
        },
        {
            "question": "Một lớp Apex được chỉ định với sharing chứa một truy vấn SOQL trên đối tượng Account, bao gồm một trường tùy chỉnh `abc__c`. Nếu một người dùng không có quyền truy cập trường này cố chạy mã, lỗi nào sẽ xảy ra?",
            "answer": "Không có lỗi runtime trực tiếp, nhưng dữ liệu của trường `abc__c` sẽ trả về `null` cho người dùng không có quyền truy cập (Field-Level Security - FLS). Điều này xảy ra vì Apex chạy ở user mode khi dùng `with sharing`, tôn trọng quyền FLS của người dùng hiện tại."
        },
        {
            "question": "Làm thế nào để kiểm soát bảo mật cấp trường trong mã Apex?",
            "answer": "Sử dụng phương thức `Schema.describeFieldResult().isAccessible()` để kiểm tra xem người dùng hiện tại có quyền đọc trường đó không trước khi truy cập hoặc xử lý dữ liệu. Nếu không có quyền, bạn có thể bỏ qua trường hoặc thông báo lỗi tùy chỉnh."
        },
        {
            "question": "Làm thế nào để kiểm tra quyền truy cập cấp trường và cấp đối tượng trong một lớp Apex?",
            "answer": "Dùng `Schema.DescribeSObjectResult` để kiểm tra quyền truy cập đối tượng (ví dụ: `isAccessible()`, `isCreateable()`) và `Schema.DescribeFieldResult` để kiểm tra quyền truy cập trường (ví dụ: `isAccessible()`, `isUpdateable()`). Các phương thức này trả về boolean dựa trên quyền của người dùng hiện tại."
        },
        {
            "question": "Ngoài việc lấy dữ liệu từ các lớp Apex, bạn còn có thể làm gì với `@wire` method?",
            "answer": "Ngoài Apex, `@wire` có thể lấy dữ liệu từ Lightning Data Service (ví dụ: `getRecord`), UI API (ví dụ: `getPicklistValues`), hoặc các module Salesforce khác như `@salesforce/user/Id`, cung cấp cách truy cập dữ liệu linh hoạt mà không cần mã tùy chỉnh."
        },
        {
            "question": "Nếu bạn sử dụng annotation `@AuraEnabled` trong một phương thức Apex, bạn có thể thực hiện thao tác DML trong phương thức đó không? Nếu không, lỗi nào sẽ xảy ra?",
            "answer": "Nếu phương thức có `cacheable=true` (dùng với `@wire`), không thể thực hiện DML, và nếu cố gắng sẽ gây lỗi \"DML Operation not allowed in cacheable method\". Nếu không có `cacheable=true` (dùng với imperative call), DML được phép thực hiện bình thường."
        },
        {
            "question": "Nếu bạn gọi một phương thức Apex bằng wire decorator, nó có trả về một promise không?",
            "answer": "Không, `@wire` không trả về promise mà cung cấp dữ liệu trực tiếp hoặc lỗi dưới dạng đối tượng `{ data, error }`. Điều này khác với imperative call, vốn trả về promise để xử lý không đồng bộ."
        },
        {
            "question": "Nếu tôi gọi một phương thức bằng wire, tôi có thể thực hiện thao tác DML trong phương thức Apex đó không?",
            "answer": "Không, vì `@wire` yêu cầu phương thức Apex có `cacheable=true`, mà điều này cấm thực hiện DML để đảm bảo tính nhất quán của cache. Nếu cần DML, hãy dùng imperative call thay vì `@wire`."
        },
        {
            "question": "Cung cấp hai ví dụ cơ bản về Apex sử dụng lists và maps.",
            "answer": "`List`: Một tập hợp có thứ tự của các phần tử, dùng để lưu trữ danh sách dữ liệu như tên hoặc bản ghi. \n`Map`: Một tập hợp cặp key-value, dùng để nhóm dữ liệu theo khóa duy nhất, chẳng hạn như ánh xạ ID bản ghi với thông tin chi tiết."
        },
        {
            "question": "Governor limits trong Salesforce là gì? Cung cấp hai ví dụ về tình huống có thể vượt giới hạn governor.",
            "answer": "Governor limits là các giới hạn tài nguyên do Salesforce áp đặt để đảm bảo hiệu suất và tính công bằng trên nền tảng đa người dùng. \n- Ví dụ: \n  - Vượt 100 SOQL queries khi thực hiện truy vấn trong vòng lặp không tối ưu hóa. \n  - Heap size vượt 6MB khi lưu trữ toàn bộ tập dữ liệu lớn trong bộ nhớ thay vì xử lý từng phần."
        },
        {
            "question": "Tôi có một phương thức Apex muốn gọi ở chế độ sharing cho người dùng nội bộ đã xác thực, nhưng không dùng sharing cho người dùng chưa xác thực. Làm thế nào để thực hiện điều này?",
            "answer": "Kiểm tra loại người dùng bằng `UserInfo.getUserType()` (ví dụ: \"Standard\" cho người dùng nội bộ, \"Guest\" cho người chưa xác thực). Sau đó, dùng logic điều kiện trong mã để gọi lớp hoặc phương thức với `with sharing` cho người nội bộ và `without sharing` cho người chưa xác thực, có thể bằng cách tạo hai lớp riêng biệt và chọn lớp phù hợp."
        },
        {
            "question": "Làm thế nào để loại bỏ các phần tử trùng lặp khỏi một list trong Apex?",
            "answer": "Chuyển đổi `List` thành `Set` để loại bỏ trùng lặp (vì `Set` chỉ chứa giá trị duy nhất), sau đó chuyển lại thành `List` nếu cần thứ tự. Phương pháp này nhanh và hiệu quả, nhưng không giữ nguyên thứ tự ban đầu trừ khi dùng `List` sau khi sắp xếp."
        },
        {
            "question": "Sự khác biệt giữa một lớp public và một lớp global trong Apex là gì?",
            "answer": "`public`: Chỉ có thể truy cập trong cùng một namespace của ứng dụng, phù hợp cho mã nội bộ. \n`global`: Có thể truy cập từ bất kỳ namespace nào, thường dùng trong managed packages để cung cấp API cho ứng dụng bên ngoài, nhưng cần cẩn thận vì không thể thay đổi sau khi phát hành."
        },
        {
            "question": "Làm thế nào để sửa lỗi \"101 SOQL query errors\"?",
            "answer": "Để sửa lỗi \"Too many SOQL queries: 101\", cần tối ưu hóa mã bằng cách giảm số lượng truy vấn SOQL trong một giao dịch. Các cách bao gồm: sử dụng `Map` để lưu trữ dữ liệu thay vì truy vấn lặp, kết hợp truy vấn cha-con (relationship queries), và di chuyển logic sang Batch Apex nếu xử lý dữ liệu lớn."
        },
        {
            "question": "Các phương pháp hay nhất để viết mã Apex trong Salesforce là gì?",
            "answer": "Bulkify mã để xử lý nhiều bản ghi cùng lúc, tránh DML hoặc SOQL trong vòng lặp, xử lý lỗi bằng `try-catch`, viết unit test với độ phủ ít nhất 75%, sử dụng các thiết kế tối ưu như Trigger Handler Pattern để dễ bảo trì và mở rộng."
        },
        {
            "question": "Cho một danh sách các bản ghi account, viết một phương thức Apex để nhóm các account theo trường industry và trả về số lượng account cho mỗi ngành.",
            "answer": "Tạo một `Map<String, Integer>` để nhóm các account theo `Industry`. Duyệt qua danh sách, kiểm tra giá trị `Industry` của từng bản ghi, và tăng số đếm trong `Map` cho khóa tương ứng, xử lý trường hợp null bằng cách gán giá trị mặc định như \"Unknown\"."
        },
        {
            "question": "Làm thế nào để gọi một lớp Apex từ Salesforce Flows?",
            "answer": "Tạo một phương thức trong lớp Apex với annotation `@InvocableMethod`, định nghĩa các tham số đầu vào và đầu ra nếu cần. Sau đó, trong Flow, sử dụng phần tử **Action** để gọi phương thức này bằng cách chọn tên phương thức từ danh sách các hành động khả dụng."
        },
        {
            "question": "Apex transaction control là gì?",
            "answer": "Apex transaction control là cách Salesforce quản lý một đơn vị thực thi (transaction) trong Apex, bao gồm tất cả các thao tác như SOQL, DML, callouts, v.v. Một giao dịch bắt đầu khi mã Apex được gọi và kết thúc khi hoàn tất hoặc gặp lỗi, với các giới hạn governor áp dụng cho toàn bộ giao dịch."
        },
        {
            "question": "Governor limits của SOQL là gì, và các phương pháp hay nhất để tối ưu hóa chúng là gì?",
            "answer": "- **Giới hạn**: 100 truy vấn SOQL mỗi giao dịch, 50,000 bản ghi tối đa từ một truy vấn, 10,000 bản ghi từ `Database.getQueryLocator`. \n- **Tối ưu hóa**: Sử dụng `Map` để giảm truy vấn lặp, dùng truy vấn cha-con thay vì nhiều truy vấn riêng lẻ, áp dụng bộ lọc selective (ví dụ: indexed fields) để tăng hiệu suất."
        },
        {
            "question": "Viết một list số nguyên trong Apex và lấy số lớn thứ ba.",
            "answer": "Tạo một `List<Integer>`, sắp xếp theo thứ tự tăng dần, sau đó truy cập phần tử thứ ba từ cuối (vị trí `size() - 3`) để lấy số lớn thứ ba. Phương pháp này giả định danh sách có ít nhất ba phần tử."
        },
        {
            "question": "Theo mặc định, một lớp Apex chạy ở chế độ nào: system mode hay user mode?",
            "answer": "Theo mặc định, một lớp Apex chạy ở **system mode**, nghĩa là bỏ qua quyền chia sẻ của người dùng và truy cập dữ liệu với quyền hệ thống, trừ khi được chỉ định `with sharing` để chuyển sang user mode."
        },
        {
            "question": "Làm thế nào để tránh lỗi mixed DML exceptions?",
            "answer": "Lỗi \"Mixed DML Operation\" xảy ra khi thực hiện DML trên Setup objects (như User) và Non-Setup objects (như Account) trong cùng một giao dịch. Để tránh, tách các thao tác này bằng cách sử dụng `@future` hoặc Queueable Apex để xử lý một loại đối tượng bất đồng bộ."
        },
        {
            "question": "Lỗi \"APEX CPU Limit Exceeded\" xảy ra khi nào? Các phương pháp hay nhất để tránh lỗi này là gì?",
            "answer": "Lỗi \"APEX CPU Limit Exceeded\" xảy ra khi mã Apex vượt quá 10,000ms thời gian CPU trong một giao dịch, thường do vòng lặp phức tạp hoặc xử lý dữ liệu lớn không tối ưu. \n- **Phương pháp hay nhất**: Tối ưu hóa vòng lặp bằng `Map`, chuyển xử lý nặng sang Batch Apex, giảm logic tính toán trong mã, kiểm tra hiệu suất bằng debug logs."
        },
        {
            "question": "Làm thế nào để cải thiện hiệu suất truy vấn SOQL để giảm thời gian thực thi?",
            "answer": "Để cải thiện hiệu suất SOQL: Sử dụng bộ lọc selective (trên trường indexed như Id, Name), giảm số lượng trường truy vấn, dùng truy vấn cha-con để giảm số lần gọi, tránh truy vấn trong vòng lặp, và tận dụng `LIMIT` hoặc `OFFSET` khi cần thiết."
        }
    ],
    "Lightning Web Components": [
        {
            "question": "Sự khác biệt giữa `for:each` và `iterator` trong Lightning Web Components (LWC) là gì?",
            "answer": "- `for:each` là một directive trong template của LWC dùng để lặp qua một mảng và hiển thị các phần tử, nhưng nó chỉ cho phép truy cập giá trị của từng phần tử mà không cung cấp thông tin bổ sung như chỉ số (index) hoặc trạng thái vòng lặp (ví dụ: phần tử đầu tiên hay cuối cùng). Điều này làm cho nó đơn giản nhưng hạn chế trong các trường hợp cần kiểm soát hiển thị phức tạp hơn.\n- `iterator` cũng được dùng để lặp qua mảng trong template, nhưng mạnh mẽ hơn vì nó cung cấp các thuộc tính bổ sung như `index` (vị trí phần tử), `first` (kiểm tra phần tử đầu tiên), và `last` (kiểm tra phần tử cuối cùng). Điều này cho phép lập trình viên tùy chỉnh giao diện dựa trên vị trí hoặc trạng thái của phần tử, phù hợp với các yêu cầu hiển thị phức tạp."
        },
        {
            "question": "Cung cấp một ví dụ mã để thể hiện giai đoạn bubble và capture trong JavaScript.",
            "answer": "Trong JavaScript, xử lý sự kiện có hai giai đoạn: **capture** (từ phần tử cha xuống con) và **bubble** (từ phần tử con lên cha). Khi một sự kiện như nhấp chuột xảy ra, giai đoạn capture chạy trước, bắt đầu từ phần tử gốc (ví dụ: `document`) và đi xuống phần tử mục tiêu. Sau đó, giai đoạn bubble chạy theo hướng ngược lại, từ phần tử mục tiêu lên phần tử gốc. Sự khác biệt này được kiểm soát bởi tham số thứ ba của `addEventListener`: `true` cho capture, `false` (mặc định) cho bubble."
        },
        {
            "question": "Làm thế nào để triển khai Lightning Message Service (LMS) kèm ví dụ?",
            "answer": "Lightning Message Service (LMS) là một cơ chế trong Salesforce để giao tiếp giữa các thành phần LWC, Aura, và Visualforce trên cùng một trang Lightning, ngay cả khi chúng không có mối quan hệ trực tiếp. Để triển khai, bạn cần tạo một **Message Channel** (đối tượng tùy chỉnh trong Salesforce) để định nghĩa kênh giao tiếp. Sau đó, trong LWC, sử dụng `publish` để gửi tin nhắn từ một thành phần và `subscribe` để nhận tin nhắn ở thành phần khác. LMS hoạt động dựa trên mô hình publish-subscribe, cho phép giao tiếp không đồng bộ và linh hoạt giữa các thành phần độc lập."
        },
        {
            "question": "Lightning Data Service (LDS) là gì và nó được sử dụng như thế nào?",
            "answer": "Lightning Data Service (LDS) là một dịch vụ tiêu chuẩn trong Salesforce cung cấp cách truy cập, chỉnh sửa, và tạo bản ghi mà không cần viết mã Apex, giúp giảm độ phức tạp và tăng hiệu suất thông qua cơ chế cache tích hợp. Nó hoạt động giống như một lớp dữ liệu trung gian giữa giao diện người dùng và cơ sở dữ liệu Salesforce. LDS được sử dụng phổ biến trong LWC thông qua `@wire` với các hàm như `getRecord` để lấy dữ liệu bản ghi hoặc thông qua các thành phần giao diện như `lightning-record-form` để thực hiện thao tác CRUD (tạo, đọc, cập nhật, xóa)."
        },
        {
            "question": "Decorators trong LWC là gì và chúng được sử dụng ra sao?",
            "answer": "Decorators trong LWC là các annotation đặc biệt (bắt đầu bằng `@`) được sử dụng để định nghĩa hành vi của thuộc tính hoặc phương thức trong JavaScript. Có ba decorators chính: \n- `@api`: Đánh dấu thuộc tính hoặc phương thức là công khai (public), cho phép thành phần cha truy cập hoặc truyền dữ liệu vào. \n- `@track`: Đánh dấu thuộc tính riêng tư (private) để LWC theo dõi sự thay đổi của nó và cập nhật giao diện (tuy nhiên, từ Spring '20, `@track` ít cần thiết vì LWC tự động theo dõi hầu hết các thay đổi). \n- `@wire`: Liên kết thuộc tính với dữ liệu từ Apex hoặc service Salesforce, tự động làm mới khi dữ liệu thay đổi."
        },
        {
            "question": "Lifecycle hooks trong Lightning Web Components là gì?",
            "answer": "Lifecycle hooks là các phương thức đặc biệt trong LWC được gọi tự động tại các giai đoạn khác nhau trong vòng đời của một thành phần: \n- `constructor()`: Chạy khi thành phần được khởi tạo, dùng để thiết lập trạng thái ban đầu. \n- `connectedCallback()`: Chạy khi thành phần được thêm vào DOM, thích hợp để khởi tạo dữ liệu. \n- `disconnectedCallback()`: Chạy khi thành phần bị xóa khỏi DOM, dùng để dọn dẹp tài nguyên. \n- `renderedCallback()`: Chạy sau khi thành phần được render, thích hợp để thao tác với DOM sau khi hiển thị."
        },
        {
            "question": "Cái nào được thực thi trước: decorators hay lifecycle hooks?",
            "answer": "Decorators được xử lý tại thời điểm biên dịch (compile-time), nghĩa là chúng định nghĩa cấu trúc và hành vi của thành phần trước khi mã chạy. Trong khi đó, lifecycle hooks như `constructor()` chạy tại thời điểm thực thi (runtime) khi thành phần được khởi tạo. Vì vậy, về mặt kỹ thuật, decorators được áp dụng trước, nhưng trong luồng thực thi, `constructor()` là điểm bắt đầu đầu tiên của vòng đời thành phần."
        },
        {
            "question": "Ưu điểm và hạn chế của Lightning Data Service (LDS) là gì?",
            "answer": "- **Ưu điểm**: Không cần viết Apex, giảm thời gian phát triển; sử dụng cache để tăng hiệu suất; tích hợp dễ dàng với các thành phần giao diện như `lightning-record-form`. \n- **Hạn chế**: Chỉ hỗ trợ thao tác trên một bản ghi mỗi lần, không phù hợp với truy vấn phức tạp hoặc xử lý dữ liệu lớn; phụ thuộc vào quyền truy cập của người dùng (nếu không có quyền, dữ liệu không hiển thị)."
        },
        {
            "question": "Làm thế nào để giao tiếp từ một thành phần con đến thành phần cha trong LWC? Và ngược lại?",
            "answer": "- **Con đến cha**: Thành phần con tạo và gửi một `CustomEvent` với dữ liệu đi kèm (thông qua thuộc tính `detail`), và thành phần cha lắng nghe sự kiện này qua thuộc tính `oneventname` trong HTML. Đây là cách giao tiếp không đồng bộ phổ biến trong LWC. \n- **Cha đến con**: Thành phần cha truyền dữ liệu vào thành phần con thông qua các thuộc tính công khai được đánh dấu bằng `@api`. Điều này cho phép cha kiểm soát trực tiếp trạng thái của con."
        },
        {
            "question": "Hai thành phần LWC độc lập có thể giao tiếp với nhau như thế nào?",
            "answer": "Hai thành phần LWC độc lập (không có quan hệ cha-con) giao tiếp thông qua **Lightning Message Service (LMS)**. LMS cho phép một thành phần gửi tin nhắn qua một Message Channel và thành phần khác nhận tin nhắn bằng cách đăng ký kênh đó. Đây là giải pháp chính thức trong Salesforce để xử lý giao tiếp giữa các thành phần không liên quan trực tiếp."
        },
        {
            "question": "Vai trò của `LightningElement` trong LWC là gì, và nó có những phương thức nào để quản lý vòng đời thành phần?",
            "answer": "`LightningElement` là lớp cơ sở mà mọi thành phần LWC phải kế thừa, cung cấp các API và chức năng chuẩn của Salesforce Lightning để xây dựng thành phần. Nó đóng vai trò như một khung nền tảng cho LWC. Các phương thức vòng đời bao gồm: \n- `constructor()`: Khởi tạo thành phần. \n- `connectedCallback()`: Khi thêm vào DOM. \n- `disconnectedCallback()`: Khi xóa khỏi DOM. \n- `renderedCallback()`: Sau khi render hoàn tất."
        },
        {
            "question": "Những yếu tố nào cần xem xét về hiệu suất khi xử lý tập dữ liệu lớn trong LWC? Làm thế nào để tối ưu hóa xử lý dữ liệu cho hiệu suất tốt hơn?",
            "answer": "- **Yếu tố cần xem xét**: Giới hạn heap size (6MB trong Apex), thời gian render chậm do xử lý DOM, tải dữ liệu không cần thiết gây tắc nghẽn giao diện. \n- **Tối ưu hóa**: Sử dụng lazy loading để tải dữ liệu theo nhu cầu, triển khai phân trang để chia nhỏ dữ liệu, dùng `@wire` với Apex để lấy dữ liệu theo lô thay vì toàn bộ, tránh lặp qua DOM phức tạp hoặc tính toán nặng trong `renderedCallback()`."
        },
        {
            "question": "Giải thích cách sử dụng `@api`, `@track`, và `@wire` trong LWC. Sự khác biệt trong trường hợp sử dụng của chúng là gì?",
            "answer": "- `@api`: Đánh dấu thuộc tính hoặc phương thức là công khai, dùng để nhận dữ liệu hoặc lệnh từ thành phần cha, phù hợp cho giao tiếp cha-con. \n- `@track`: Đánh dấu thuộc tính riêng tư để LWC theo dõi sự thay đổi và cập nhật giao diện, nhưng từ Spring '20, LWC tự động theo dõi thay đổi nên `@track` ít cần thiết trừ khi làm việc với đối tượng phức tạp. \n- `@wire`: Liên kết thuộc tính với dữ liệu từ Apex hoặc dịch vụ Salesforce, tự động làm mới khi dữ liệu thay đổi, dùng cho truy cập dữ liệu không đồng bộ và chỉ đọc."
        },
        {
            "question": "Lifecycle hooks trong LWC là gì, và thứ tự của lifecycle hooks từ thành phần cha đến thành phần con ra sao?",
            "answer": "- Lifecycle hooks là các phương thức quản lý vòng đời: `constructor()` (khởi tạo), `connectedCallback()` (thêm vào DOM), `disconnectedCallback()` (xóa khỏi DOM), `renderedCallback()` (sau render). \n- Thứ tự thực thi: Cha chạy `constructor()` → `connectedCallback()` → render → `renderedCallback()`, sau đó con chạy tương tự. Nếu có nhiều cấp độ lồng nhau, thứ tự đi từ ngoài vào trong cho `connectedCallback()` và ngược lại cho `disconnectedCallback()`."
        },
        {
            "question": "Tại sao chúng ta sử dụng phương thức constructor trong LWC?",
            "answer": "Phương thức `constructor()` được sử dụng để khởi tạo trạng thái ban đầu của thành phần, chẳng hạn như thiết lập giá trị mặc định cho thuộc tính hoặc chuẩn bị các biến trước khi thành phần được thêm vào DOM. Nó là điểm bắt đầu của vòng đời và chạy trước tất cả các hook khác."
        },
        {
            "question": "Callback function là gì?",
            "answer": "Callback function là một hàm được truyền làm tham số cho một hàm khác và được gọi khi một sự kiện hoặc tác vụ hoàn tất, chẳng hạn như sau khi dữ liệu được tải từ máy chủ hoặc khi người dùng tương tác. Nó là cơ chế quan trọng trong lập trình không đồng bộ để xử lý kết quả hoặc lỗi."
        },
        {
            "question": "Có bao nhiêu loại decorators trong LWC?",
            "answer": "Có ba loại decorators chính trong LWC: `@api` (cho giao tiếp với cha), `@track` (theo dõi thay đổi nội bộ), và `@wire` (liên kết dữ liệu từ Salesforce). Đây là các công cụ cốt lõi để quản lý dữ liệu và hành vi trong thành phần."
        },
        {
            "question": "Có bao nhiêu cách để gọi Apex trong Lightning Web Components (LWC)?",
            "answer": "Có hai cách chính: \n- `@wire`: Gọi Apex tự động và liên kết dữ liệu, yêu cầu phương thức Apex có `@AuraEnabled(cacheable=true)`. \n- Imperative: Gọi Apex thủ công thông qua `import` và xử lý kết quả bằng `.then()`, không cần cacheable và hỗ trợ DML."
        },
        {
            "question": "Làm thế nào để lấy dữ liệu từ một lớp Apex mà không cần gọi trực tiếp một phương thức từ lớp Apex?",
            "answer": "Sử dụng decorator `@wire` trong LWC để liên kết trực tiếp với một phương thức Apex được đánh dấu `@AuraEnabled(cacheable=true)`. `@wire` sẽ tự động gọi phương thức và cung cấp dữ liệu mà không cần lập trình viên gọi thủ công."
        },
        {
            "question": "Nếu chúng ta viết một wire method trong LWC, nó sẽ được gọi bao nhiêu lần?",
            "answer": "`@wire` được gọi một lần khi thành phần khởi tạo (trong `connectedCallback()`), sau đó tự động gọi lại mỗi khi dữ liệu nguồn (từ Apex hoặc LDS) thay đổi, nhờ cơ chế reactive của LWC."
        },
        {
            "question": "Làm thế nào để tạo một bản ghi Contact trong LWC mà không sử dụng Apex?",
            "answer": "Sử dụng thành phần giao diện như `lightning-record-form` hoặc `lightning-record-edit-form` với các trường cần thiết và nút submit. Những thành phần này tận dụng LDS để thực hiện thao tác tạo bản ghi mà không cần mã Apex."
        },
        {
            "question": "Giải thích giao tiếp từ cha đến con và từ con đến cha trong LWC.",
            "answer": "- **Cha đến con**: Thành phần cha truyền dữ liệu vào thuộc tính `@api` của thành phần con, cho phép cha kiểm soát trực tiếp trạng thái hoặc hành vi của con. \n- **Con đến cha**: Thành phần con gửi thông điệp hoặc dữ liệu lên cha thông qua `CustomEvent`, cha lắng nghe sự kiện này để xử lý tiếp theo."
        },
        {
            "question": "Cú pháp để giao tiếp từ con đến cha trong LWC là gì?",
            "answer": "Trong thành phần con, sử dụng `this.dispatchEvent(new CustomEvent('eventname', { detail: data }))` để gửi sự kiện. Trong HTML của cha, khai báo sự kiện bằng `oneventname={handleEvent}` để lắng nghe."
        },
        {
            "question": "Làm thế nào để biến một biến hoặc thuộc tính thông điệp trở nên động trong LWC? Ví dụ, nếu một thành phần được sử dụng trên bất kỳ trang nào, nó nên tự động hiển thị giá trị từ trang đó.",
            "answer": "Sử dụng `@api` để nhận giá trị từ thành phần cha hoặc trang Lightning, hoặc dùng `@wire` để liên kết với dữ liệu từ Salesforce, cho phép thuộc tính tự động cập nhật khi nguồn dữ liệu thay đổi."
        },
        {
            "question": "Chúng ta có thể sử dụng các thành phần LWC không liên quan trên cùng một trang Lightning không?",
            "answer": "Có, các thành phần LWC không liên quan có thể được đặt trên cùng một trang Lightning thông qua Lightning App Builder hoặc một thành phần container khác, miễn là chúng được cấu hình để hiển thị trong cùng ngữ cảnh."
        },
        {
            "question": "Nếu chúng ta có một nút trong LWC để lấy dữ liệu khi được nhấp vào, liệu có thể sử dụng wire method trong phương thức on-click để lấy dữ liệu không?",
            "answer": "Không, `@wire` được thiết kế để chạy tự động khi thành phần khởi tạo hoặc dữ liệu thay đổi, không phù hợp để gọi thủ công trong sự kiện nhấp chuột. Thay vào đó, sử dụng imperative Apex call để lấy dữ liệu theo yêu cầu."
        },
        {
            "question": "Sự khác biệt giữa wire method và imperative method trong LWC là gì?",
            "answer": "- `@wire`: Tự động gọi Apex và liên kết dữ liệu, yêu cầu phương thức Apex có `cacheable=true`, phù hợp với truy cập dữ liệu chỉ đọc. \n- Imperative: Gọi Apex thủ công khi cần (ví dụ: khi nhấp nút), không yêu cầu cacheable, hỗ trợ DML và linh hoạt hơn."
        },
        {
            "question": "Trong LWC, nếu một trường không thể đọc được, nguyên nhân có thể là gì?",
            "answer": "Nguyên nhân phổ biến bao gồm: Người dùng không có quyền truy cập trường (Field-Level Security - FLS), trường không được bao gồm trong truy vấn `@wire`, hoặc dữ liệu từ Apex không trả về trường đó."
        },
        {
            "question": "Làm thế nào để gọi một Flow từ một thành phần LWC?",
            "answer": "Sử dụng thành phần `<lightning-flow>` trong template của LWC, truyền tham số `flow-api-name` để chỉ định Flow cần gọi, và có thể truyền thêm biến đầu vào nếu cần."
        },
        {
            "question": "Làm thế nào để lấy ID người dùng hiện tại trong LWC?",
            "answer": "Import module `@salesforce/user/Id` từ `lightning/platform`, giá trị này tự động cung cấp ID của người dùng hiện tại mà không cần truy vấn."
        },
        {
            "question": "Design attributes trong LWC là gì?",
            "answer": "Design attributes là các thuộc tính `@api` được khai báo trong tệp `meta.xml` của thành phần, cho phép người dùng cấu hình giá trị của chúng trực tiếp trong Lightning App Builder, giúp tăng tính tùy chỉnh mà không cần sửa mã."
        },
        {
            "question": "Làm thế nào để lấy record ID trong LWC?",
            "answer": "Sử dụng thuộc tính `@api recordId` trong thành phần, giá trị này được tự động truyền từ trang Lightning khi thành phần được đặt trong ngữ cảnh bản ghi (record context)."
        },
        {
            "question": "Nếu một thành phần LWC cần hiển thị các bản ghi từ một custom object trong một bảng, và số bản ghi vượt quá 50,000, làm thế nào để hiển thị tất cả các bản ghi mà không cần phân trang?",
            "answer": "Không thể hiển thị trực tiếp hơn 50,000 bản ghi trong một lần do giới hạn SOQL (50,000 bản ghi mỗi truy vấn). Để xử lý dữ liệu lớn, cần sử dụng Batch Apex để chia nhỏ dữ liệu thành các lô, sau đó truyền dần qua LWC bằng cách gọi imperative hoặc kết hợp với cơ chế tải dữ liệu theo nhu cầu."
        },
        {
            "question": "Khi sử dụng wire method trong một thành phần LWC, hệ thống phát hiện sự thay đổi dữ liệu ở backend như thế nào?",
            "answer": "`@wire` dựa trên cơ chế reactive của LDS hoặc Apex. Khi dữ liệu trong Salesforce thay đổi (ví dụ: bản ghi được cập nhật), LDS hoặc cache Apex thông báo thay đổi, và `@wire` tự động làm mới dữ liệu trong thành phần mà không cần can thiệp thủ công."
        },
        {
            "question": "Làm thế nào để hiển thị một nút có điều kiện trong LWC? Ví dụ, trong một Lightning data table, làm sao để đảm bảo nút chỉ hiển thị trong một số điều kiện nhất định?",
            "answer": "Sử dụng directive `if:true` hoặc `if:false` trong template của LWC, kết hợp với một thuộc tính boolean trong JavaScript để kiểm soát điều kiện hiển thị của nút, chẳng hạn dựa trên giá trị dữ liệu hoặc quyền người dùng."
        },
        {
            "question": "Làm thế nào để xử lý lỗi phía client trong LWC?",
            "answer": "Xử lý lỗi bằng cách sử dụng `try-catch` trong các lời gọi imperative để bắt lỗi từ Apex hoặc dịch vụ, sau đó hiển thị thông báo cho người dùng thông qua thành phần giao diện như `lightning-toast` hoặc thông báo tùy chỉnh."
        },
        {
            "question": "Mục đích của tệp `JS-meta.xml` trong một thành phần LWC là gì?",
            "answer": "Tệp `JS-meta.xml` định nghĩa cấu hình của thành phần, bao gồm các thuộc tính như `targets` (nơi thành phần có thể được sử dụng, ví dụ: trang bản ghi) và `design attributes` (các thuộc tính có thể cấu hình trong App Builder). Nó giúp tích hợp thành phần vào nền tảng Lightning một cách linh hoạt."
        },
        {
            "question": "Sự khác biệt chính giữa LWC và Aura components là gì?",
            "answer": "- **LWC**: Dựa trên web standards (HTML, CSS, JS hiện đại), hiệu suất cao, ít phụ thuộc vào framework, dễ bảo trì. \n- **Aura**: Dựa trên Aura Framework của Salesforce, nặng hơn, phụ thuộc nhiều vào framework, hiệu suất thấp hơn và ít linh hoạt so với LWC."
        },
        {
            "question": "Data binding trong LWC hoạt động như thế nào?",
            "answer": "Data binding trong LWC có thể là một chiều (từ JavaScript sang template) hoặc hai chiều (giữa thuộc tính và giao diện). Khi giá trị thuộc tính thay đổi trong JavaScript, LWC tự động cập nhật giao diện nhờ cơ chế reactive, và ngược lại nếu dùng thuộc tính hai chiều với các thành phần như `lightning-input`."
        }
    ],
    "Triggers": [
        {
            "question": "Có thể tạm thời vô hiệu hóa một trigger không? Nếu có, làm thế nào?",
            "answer": "Có, bạn có thể vô hiệu hóa trigger tạm thời bằng cách: \n- Sử dụng biến tĩnh (static variable) trong Apex để bật/tắt logic trigger dựa trên điều kiện. \n- Vô hiệu hóa trigger trong org qua giao diện (Setup > Apex Triggers > Deactivate), nhưng đây không phải là giải pháp lập trình."
        },
        {
            "question": "Nhiều trigger có thể được thực thi trên cùng một đối tượng không? Nếu có, thứ tự thực thi được xác định như thế nào?",
            "answer": "Có, nhiều trigger có thể được định nghĩa trên cùng một đối tượng (ví dụ: nhiều `before insert`). Tuy nhiên, Salesforce không đảm bảo thứ tự thực thi giữa các trigger cùng loại, nên thứ tự là ngẫu nhiên. Để kiểm soát, nên hợp nhất logic vào một trigger duy nhất hoặc dùng Trigger Handler Pattern."
        },
        {
            "question": "Có những loại trigger nào?",
            "answer": "Trigger trong Salesforce có hai loại chính dựa trên thời điểm thực thi: \n- **Before**: Chạy trước khi bản ghi được lưu (before insert, before update, before delete), dùng để chỉnh sửa dữ liệu. \n- **After**: Chạy sau khi bản ghi được lưu (after insert, after update, after delete, after undelete), dùng để xử lý tác động liên quan."
        },
        {
            "question": "Khi nào nên sử dụng before trigger so với after trigger?",
            "answer": "- **Before trigger**: Dùng khi cần thay đổi dữ liệu bản ghi trước khi lưu (ví dụ: điền giá trị mặc định, kiểm tra dữ liệu). \n- **After trigger**: Dùng khi cần truy cập ID bản ghi hoặc thực hiện thao tác liên quan đến bản ghi khác sau khi lưu (ví dụ: tạo bản ghi con)."
        },
        {
            "question": "Làm thế nào để kiểm tra một Apex Trigger trong Salesforce?",
            "answer": "Viết lớp unit test Apex với `@isTest`, tạo dữ liệu thử nghiệm (ví dụ: insert Account), thực hiện hành động kích hoạt trigger (insert, update, delete), và dùng `System.assert` để kiểm tra kết quả mong đợi. Đảm bảo độ phủ mã tối thiểu 75%."
        },
        {
            "question": "Làm thế nào để tránh đệ quy trong trigger?",
            "answer": "Đệ quy xảy ra khi trigger gọi lại chính nó qua DML. Để tránh: \n- Dùng biến tĩnh (`static boolean`) để theo dõi lần thực thi đầu tiên và chặn các lần sau. \n- Tối ưu logic để tránh cập nhật bản ghi trong cùng ngữ cảnh trigger."
        },
        {
            "question": "Trigger Handler Pattern là gì?",
            "answer": "Trigger Handler Pattern là một thiết kế trong Apex tách logic trigger ra một lớp riêng (handler class), thay vì viết tất cả trong file trigger. Điều này cải thiện khả năng bảo trì, tái sử dụng, và kiểm thử bằng cách tổ chức mã theo chức năng (ví dụ: `beforeInsert()`, `afterUpdate()`)."
        },
        {
            "question": "Một trigger có thể thực hiện DML operations không?",
            "answer": "Có, trigger có thể thực hiện DML (insert, update, delete) trên bản ghi, nhưng cần cẩn thận để tránh đệ quy hoặc vượt giới hạn DML (150 mỗi giao dịch). Nên sử dụng sau khi đã tối ưu hóa logic."
        },
        {
            "question": "Context variables trong trigger là gì?",
            "answer": "Context variables là các biến đặc biệt trong trigger cung cấp thông tin về ngữ cảnh thực thi: \n- `Trigger.new`: Danh sách bản ghi mới (trước/sau khi lưu). \n- `Trigger.old`: Danh sách bản ghi cũ (trước khi cập nhật/xóa). \n- `Trigger.isInsert`, `Trigger.isUpdate`, v.v.: Xác định loại sự kiện."
        },
        {
            "question": "Làm thế nào để viết một bulkified trigger?",
            "answer": "Một trigger bulkified xử lý nhiều bản ghi cùng lúc để tránh vượt giới hạn. Để làm điều này: Tránh SOQL/DML trong vòng lặp, dùng `Map` hoặc `Set` để nhóm dữ liệu, xử lý toàn bộ `Trigger.new` hoặc `Trigger.old` trong một lần thực thi."
        },
        {
            "question": "Thứ tự thực thi khi một bản ghi được lưu là gì?",
            "answer": "Thứ tự thực thi trong Salesforce khi lưu bản ghi: \n1. Validation rules. \n2. Before triggers. \n3. Custom validation rules. \n4. After triggers. \n5. Assignment rules. \n6. Auto-response rules. \n7. Workflow rules. \n8. Processes/Flows. \n9. Escalation rules. \n10. Roll-up summary, parent record updates. \n11. Grandparent record updates (nếu có)."
        },
        {
            "question": "Làm thế nào để gọi một future method từ một trigger, và khi nào nên sử dụng nó?",
            "answer": "Gọi `@future` method bằng cách truyền tham số (ví dụ: danh sách ID) từ trigger. Nên dùng khi cần thực hiện callout hoặc xử lý bất đồng bộ để tránh vượt giới hạn CPU hoặc Mixed DML exceptions."
        },
        {
            "question": "Những hạn chế của Apex Triggers là gì?",
            "answer": "Không thể kiểm soát thứ tự giữa nhiều trigger cùng loại, không gọi trực tiếp từ giao diện, giới hạn đệ quy (16 lần), không xử lý dữ liệu lớn hiệu quả (nên dùng Batch Apex thay thế)."
        },
        {
            "question": "Phương thức `addError` trong trigger được dùng để làm gì?",
            "answer": "`addError()` được dùng trong before trigger để ngăn bản ghi được lưu bằng cách thêm thông báo lỗi tùy chỉnh, hiển thị cho người dùng và hủy giao dịch DML."
        },
        {
            "question": "Điều gì xảy ra nếu một trigger thất bại trong quá trình thực thi?",
            "answer": "Nếu trigger thất bại (ví dụ: ngoại lệ không xử lý), toàn bộ giao dịch DML bị rollback, không bản ghi nào được lưu, và người dùng nhận thông báo lỗi (trừ khi lỗi được bắt bằng `try-catch` bên ngoài)."
        },
        {
            "question": "Có thể sử dụng SOQL và DML trong một trigger không? Các phương pháp hay nhất là gì?",
            "answer": "Có, nhưng cần cẩn thận để tránh vượt giới hạn (100 SOQL, 150 DML). \n- **Phương pháp hay nhất**: Bulkify trigger, dùng `Map` để giảm truy vấn, tránh DML trong vòng lặp, xử lý ngoại lệ."
        },
        {
            "question": "Làm thế nào để gọi một trigger từ một trigger khác?",
            "answer": "Trigger không gọi trực tiếp trigger khác, nhưng khi DML từ trigger này tác động đến đối tượng khác có trigger, trigger kia sẽ tự động chạy theo thứ tự thực thi của Salesforce."
        },
        {
            "question": "Sự khác biệt giữa Triggers và Flows, và khi nào nên sử dụng cái nào?",
            "answer": "- **Triggers**: Dùng Apex, mạnh mẽ, phù hợp xử lý logic phức tạp, yêu cầu lập trình. Dùng khi cần tốc độ cao hoặc tùy chỉnh sâu. \n- **Flows**: Dùng giao diện kéo-thả, dễ cấu hình, ít cần code. Dùng cho tự động hóa đơn giản hoặc người không lập trình."
        },
        {
            "question": "Một Apex Trigger có thể thực hiện callout đến hệ thống bên ngoài không? Nếu có, làm thế nào?",
            "answer": "Không trực tiếp, vì callout đồng bộ không được phép trong trigger. Để thực hiện, gọi `@future` hoặc Queueable Apex từ trigger để xử lý callout bất đồng bộ."
        },
        {
            "question": "Làm thế nào để thực thi bảo mật cấp trường trong Apex Triggers?",
            "answer": "Dùng `Schema.describeFieldResult().isAccessible()` để kiểm tra quyền FLS trước khi truy cập trường trong trigger, đảm bảo chỉ xử lý dữ liệu người dùng có quyền xem."
        },
        {
            "question": "Trigger trong Salesforce là gì?",
            "answer": "Trigger trong Salesforce là một thành phần của mã Apex chạy trước hoặc sau các sự kiện ngôn ngữ thao tác dữ liệu (DML) được chỉ định, như trước khi bản ghi đối tượng được chèn vào cơ sở dữ liệu, hoặc sau khi bản ghi bị xóa, v.v. Trigger được sử dụng để thực hiện các hành động tùy chỉnh trước hoặc sau khi có thay đổi đối với bản ghi Salesforce."
        },
        {
            "question": "Mã Trigger là gì?",
            "answer": "Mã Trigger trong Salesforce là một phần của mã Apex chạy trước hoặc sau các sự kiện ngôn ngữ thao tác dữ liệu (DML) cụ thể. Các sự kiện này bao gồm chèn, cập nhật, xóa và khôi phục bản ghi Salesforce. Mã Trigger được dùng để thực hiện logic tùy chỉnh như xác thực dữ liệu, tự động hóa hoặc sửa đổi, phản hồi các sự kiện DML khác nhau."
        },
        {
            "question": "Các loại Trigger trong Salesforce là gì?",
            "answer": "Có hai loại Trigger trong Salesforce:\n- **Before Triggers**: Được gọi trước khi quá trình DML trên cơ sở dữ liệu hoàn tất, thường dùng để xác thực hoặc thay đổi dữ liệu trước khi lưu.\n- **After Triggers**: Được thực thi sau thao tác DML và dữ liệu đã được lưu tạm thời vào cơ sở dữ liệu, dùng để truy cập giá trị trường do hệ thống đặt (như RecordID hoặc LastModifiedDate) hoặc sửa đổi tài liệu khác dựa trên hành động của bản ghi ban đầu."
        },
        {
            "question": "Bạn có thể giải thích thứ tự thực thi Trigger trong Salesforce không?",
            "answer": "Salesforce thực thi theo thứ tự sau:\n1. Thực thi các Trigger Before.\n2. Thực thi các quy tắc xác thực.\n3. Thực thi các Trigger After.\n4. Xử lý các quy tắc gán, quy tắc phản hồi tự động và quy tắc luồng công việc.\n5. Áp dụng các quy tắc leo thang và quy tắc quyền lợi."
        },
        {
            "question": "Biến ngữ cảnh Trigger.new và Trigger.old là gì?",
            "answer": "- **Trigger.new**: Lưu danh sách các bản ghi mới sẽ được chèn hoặc cập nhật.\n- **Trigger.old**: Lưu danh sách giá trị bản ghi cũ trước khi chúng được cập nhật hoặc xóa."
        },
        {
            "question": "Trigger có thể được tối ưu hóa cho xử lý hàng loạt trong Salesforce không?",
            "answer": "Có, Trigger nên luôn được viết với tư duy xử lý hàng loạt, tức là xử lý nhiều bản ghi cùng lúc. Việc sử dụng vòng lặp hoặc truy vấn SOQL trong vòng lặp có thể gây ra vấn đề với giới hạn quản trị, vì vậy nhà phát triển cần tối ưu hóa Trigger cho các thao tác hàng loạt."
        },
        {
            "question": "Trigger đệ quy là gì và làm thế nào để tránh chúng?",
            "answer": "Trigger đệ quy xảy ra khi một Trigger tự gọi chính nó, dẫn đến vòng lặp vô hạn. Có thể tránh đệ quy bằng cách sử dụng một biến boolean tĩnh để theo dõi liệu Trigger đã chạy hay chưa."
        },
        {
            "question": "Trigger.isExecuting dùng để làm gì?",
            "answer": "Trigger.isExecuting là một boolean trả về true nếu ngữ cảnh hiện tại là một Trigger, giúp kiểm tra xem mã của bạn có đang chạy trong ngữ cảnh Trigger hay không."
        },
        {
            "question": "Nêu sự khác biệt giữa Trigger.new và Trigger.newMap?",
            "answer": "- **Trigger.new**: Là danh sách các bản ghi với giá trị mới.\n- **Trigger.newMap**: Là một bản đồ từ ID đến bản ghi, hữu ích khi truy cập bản ghi bằng ID để xử lý."
        },
        {
            "question": "Có thể sử dụng thao tác DML trong Trigger không?",
            "answer": "Có, bạn có thể sử dụng thao tác DML trong Trigger. Tuy nhiên, thực hành tốt nhất là hạn chế sử dụng DML để tránh vượt quá giới hạn quản trị Salesforce. Nên sử dụng bộ sưu tập để xử lý bản ghi hàng loạt trong DML."
        },
        {
            "question": "Làm thế nào để ngăn Trigger thực thi nhiều lần?",
            "answer": "Sử dụng biến tĩnh để ngăn Trigger thực thi nhiều lần. Biến tĩnh đóng vai trò như một cờ, được đặt sau khi Trigger đã chạy. Kiểm tra giá trị cờ để bỏ qua logic trong các lần gọi đệ quy tiếp theo, đảm bảo Trigger không chạy lặp lại trong cùng một giao dịch."
        },
        {
            "question": "Bạn có thể giải thích khái niệm khung Trigger không? Tại sao nó được sử dụng?",
            "answer": "Khung Trigger là một mẫu thiết kế Apex trong Salesforce cho phép quản lý logic Trigger một cách mô-đun và có tổ chức hơn. Nó thường sử dụng một lớp xử lý chứa logic, và Trigger gọi hàm tương ứng từ lớp này. Lợi ích chính gồm:\n- Giảm trùng lặp mã.\n- Cải thiện tái sử dụng mã.\n- Đơn giản hóa logic Trigger, giữ mã sạch và dễ bảo trì."
        },
        {
            "question": "Làm thế nào để đảm bảo Trigger của bạn an toàn khi xử lý hàng loạt?",
            "answer": "Tránh thực hiện hành động DML (chèn, cập nhật, xóa) hoặc truy vấn SOQL trong vòng lặp để đảm bảo Trigger an toàn khi xử lý hàng loạt, tránh vượt giới hạn quản trị. Thay vào đó:\n- Thu thập bản ghi hoặc dữ liệu vào bộ sưu tập (như danh sách hoặc bản đồ).\n- Thực hiện DML hoặc truy vấn trên toàn bộ bộ sưu tập ngoài vòng lặp, để Trigger xử lý hiệu quả các hoạt động số lượng lớn."
        },
        {
            "question": "Biến ngữ cảnh trong Trigger Salesforce là gì?",
            "answer": "Biến ngữ cảnh trong Trigger Salesforce cung cấp thông tin quan trọng về trạng thái bản ghi được xử lý và ngữ cảnh chạy của Trigger. Một số biến phổ biến:\n- **Trigger.new**: Chứa phiên bản mới nhất của bản ghi được chèn hoặc cập nhật.\n- **Trigger.old**: Chứa phiên bản cũ của bản ghi bị cập nhật hoặc xóa.\n- **Trigger.isInsert, Trigger.isUpdate, Trigger.isDelete**: Chỉ ra loại hoạt động DML kích hoạt Trigger.\n- **Trigger.isBefore, Trigger.isAfter**: Xác định Trigger chạy trước hay sau hành động DML."
        },
        {
            "question": "Bạn có thể kiểm soát nhiều Trigger cho cùng một đối tượng không?",
            "answer": "Salesforce cho phép có nhiều Trigger trên cùng một đối tượng, nhưng thứ tự thực thi của các Trigger không được đảm bảo, có thể dẫn đến sự không nhất quán. Salesforce khuyến nghị chỉ có một Trigger cho mỗi đối tượng để tránh phức tạp. Sử dụng lớp xử lý Trigger để dễ dàng kiểm soát thứ tự và thực thi logic."
        },
        {
            "question": "Viết một Trigger cập nhật trường trong bản ghi Account cha khi bản ghi Contact được cập nhật.",
            "answer": "Trong trường hợp này, tôi sẽ sử dụng Trigger After Update trên đối tượng Contact để cập nhật Account cha. Tôi sẽ lặp qua các bản ghi trong Trigger.new, kiểm tra thay đổi, sau đó cập nhật bản ghi Account liên quan."
        },
        {
            "question": "Viết một Trigger ngăn xóa bản ghi Account có trạng thái 'Active'.",
            "answer": "Tôi sẽ dùng Trigger Before Delete và thêm logic kiểm tra nếu trạng thái là 'Active'. Nếu đúng, tôi sẽ thêm lỗi vào Trigger.old để ngăn xóa các bản ghi đó."
        },
        {
            "question": "Viết một Trigger tự động tạo nhiệm vụ theo dõi khi Opportunity được đánh dấu là 'Closed Won'.",
            "answer": "Tôi sẽ dùng Trigger After Update trên Opportunity. Kiểm tra xem giai đoạn có thay đổi thành 'Closed Won' không, nếu có, tạo một nhiệm vụ mới liên quan đến Opportunity đó."
        },
        {
            "question": "Làm thế nào để ngăn Trigger chạy nhiều lần trên cùng một bản ghi?",
            "answer": "Tôi sẽ triển khai một biến boolean tĩnh để đảm bảo Trigger chỉ chạy một lần trong một giao dịch cụ thể, giúp ngăn đệ quy và vòng lặp vô hạn."
        },
        {
            "question": "Bạn có thể viết một Trigger kiểm tra xem Contact có định dạng email hợp lệ khi chèn/cập nhật không?",
            "answer": "Sử dụng Trigger Before Insert và Before Update để kiểm tra định dạng email bằng biểu thức chính quy. Nếu không hợp lệ, thêm lỗi vào bản ghi Contact để ngăn lưu dữ liệu không hợp lệ."
        },
        {
            "question": "Hai loại Trigger trong Salesforce là gì?",
            "answer": "Có hai loại Trigger trong Salesforce:\n- **Before Triggers**: Chạy trước khi thao tác DML hoàn tất, dùng để xác thực hoặc sửa đổi dữ liệu trước khi lưu.\n- **After Triggers**: Chạy sau khi thao tác DML hoàn tất và dữ liệu đã được lưu tạm thời, dùng để truy cập giá trị trường hệ thống hoặc ảnh hưởng đến bản ghi khác."
        },
        {
            "question": "Lớp Trigger trong Salesforce dùng để làm gì?",
            "answer": "Lớp Trigger (Trigger Class) là một lớp Apex chứa logic xử lý cho Trigger, giúp tách biệt logic khỏi Trigger chính. Nó cải thiện khả năng bảo trì, tái sử dụng mã và tổ chức logic phức tạp, thường được dùng trong mẫu Trigger Handler."
        },
        {
            "question": "Các sự kiện khác nhau có sẵn trong Trigger là gì?",
            "answer": "Các sự kiện trong Trigger bao gồm:\n- **Before Insert**: Trước khi chèn bản ghi.\n- **Before Update**: Trước khi cập nhật bản ghi.\n- **Before Delete**: Trước khi xóa bản ghi.\n- **After Insert**: Sau khi chèn bản ghi.\n- **After Update**: Sau khi cập nhật bản ghi.\n- **After Delete**: Sau khi xóa bản ghi.\n- **After Undelete**: Sau khi khôi phục bản ghi."
        },
        {
            "question": "Khi nào nên sử dụng Trigger và khi nào nên sử dụng tự động hóa?",
            "answer": "- **Trigger**: Dùng khi cần logic phức tạp, xử lý theo thời gian thực, hoặc thao tác không thể thực hiện bằng công cụ declarative (như cập nhật bản ghi liên quan phức tạp).\n- **Tự động hóa (Workflow, Process Builder, Flow)**: Dùng cho các tác vụ đơn giản như cập nhật trường, gửi email, hoặc khi không cần mã tùy chỉnh, ưu tiên tính dễ bảo trì và không cần lập trình."
        },
        {
            "question": "Thực hành tốt nhất và các yếu tố cần xem xét cho Trigger là gì?",
            "answer": "- Viết Trigger xử lý hàng loạt (bulk-safe) bằng cách dùng bộ sưu tập thay vì vòng lặp DML/SOQL.\n- Tránh đệ quy bằng biến tĩnh.\n- Giữ một Trigger cho mỗi đối tượng.\n- Tách logic vào lớp xử lý.\n- Tối ưu hóa truy vấn và DML để tránh vượt giới hạn quản trị.\n- Thêm nhận xét và tài liệu hóa mã."
        },
        {
            "question": "Trigger thực thi bao nhiêu lần trong sự kiện Upsert?",
            "answer": "Trong sự kiện Upsert, Trigger thực thi một lần cho mỗi hành động riêng biệt: Before Insert/After Insert cho bản ghi mới, Before Update/After Update cho bản ghi hiện có, nhưng chỉ trong một giao dịch duy nhất."
        },
        {
            "question": "Trigger thực thi bao nhiêu lần trong sự kiện Merge?",
            "answer": "Trong sự kiện Merge, Trigger Before Delete và After Delete thực thi một lần cho các bản ghi bị hợp nhất (mất đi), và Trigger Before Update/After Update thực thi một lần cho bản ghi chính được giữ lại, tất cả trong một giao dịch."
        },
        {
            "question": "Thứ tự thực thi của Trigger là gì?",
            "answer": "Thứ tự thực thi trong Salesforce:\n1. Trigger Before.\n2. Quy tắc xác thực.\n3. Trigger After.\n4. Quy tắc gán, quy tắc phản hồi tự động, quy tắc luồng công việc.\n5. Quy tắc leo thang và quyền lợi."
        },
        {
            "question": "Khi nào bạn sẽ chọn sự kiện Before và khi nào chọn sự kiện After?",
            "answer": "- **Before**: Chọn khi cần xác thực hoặc sửa đổi dữ liệu trước khi lưu (ví dụ: đặt giá trị trường, kiểm tra hợp lệ).\n- **After**: Chọn khi cần truy cập giá trị trường hệ thống (như ID, LastModifiedDate) hoặc cập nhật bản ghi liên quan sau khi bản ghi chính đã được lưu."
        },
        {
            "question": "Sự khác biệt giữa Trigger.New và Trigger.newMap là gì?",
            "answer": "- **Trigger.New**: Là danh sách bản ghi với giá trị mới, dùng để truy cập trực tiếp bản ghi.\n- **Trigger.newMap**: Là bản đồ từ ID đến bản ghi mới, hữu ích khi cần tra cứu bản ghi theo ID."
        },
        {
            "question": "Khi nào nên sử dụng Trigger.Old?",
            "answer": "Trigger.Old nên được dùng trong Trigger Update hoặc Delete để truy cập giá trị cũ của bản ghi trước khi thay đổi, giúp so sánh thay đổi hoặc thực hiện hành động dựa trên dữ liệu trước đó."
        },
        {
            "question": "Làm thế nào để tránh đệ quy trong Trigger?",
            "answer": "Dùng một biến boolean tĩnh trong lớp Apex để theo dõi liệu Trigger đã chạy chưa. Đặt biến thành true sau lần chạy đầu, kiểm tra biến trước khi thực thi logic để bỏ qua các lần gọi đệ quy."
        },
        {
            "question": "Làm thế nào để thực hiện gọi ra ngoài (callout) từ Trigger?",
            "answer": "Không thể gọi ra ngoài trực tiếp từ Trigger vì nó là giao dịch đồng bộ. Thay vào đó, dùng phương thức '@future' hoặc hàng đợi (Queueable) trong lớp Apex để thực hiện gọi ra ngoài bất đồng bộ sau khi Trigger hoàn tất."
        },
        {
            "question": "Có thể gọi một công việc hàng loạt (batch job) từ Trigger không?",
            "answer": "Có, nhưng không nên gọi trực tiếp vì giới hạn quản trị. Thay vào đó, dùng Apex bất đồng bộ (như Queueable hoặc Future) để khởi động công việc hàng loạt, đảm bảo Trigger không vượt giới hạn."
        },
        {
            "question": "Mẫu Trigger Handler là gì?",
            "answer": "Mẫu Trigger Handler là cách tổ chức logic Trigger bằng cách tách nó vào một lớp Apex riêng (Handler). Trigger chỉ gọi phương thức từ lớp này, giúp mã dễ đọc, tái sử dụng và bảo trì, đồng thời hỗ trợ kiểm soát thứ tự thực thi."
        },
        {
            "question": "Bạn đã sử dụng bất kỳ khung Trigger nào trong Salesforce chưa?",
            "answer": "Có, tôi đã sử dụng khung Trigger như Trigger Handler Framework hoặc các khung tùy chỉnh trong dự án. Ví dụ, tôi dùng lớp Handler để quản lý logic Before Insert và After Update riêng biệt, cải thiện khả năng kiểm tra và mở rộng mã."
        }
    ],
    "Batch": [
        {
            "question": "Batch Apex trong Salesforce là gì?",
            "answer": "Batch Apex là một cơ chế bất đồng bộ trong Salesforce để xử lý số lượng lớn bản ghi vượt quá giới hạn governor của giao dịch đồng bộ, chia nhỏ dữ liệu thành các lô (batches) và thực thi tuần tự."
        },
        {
            "question": "Ba phương thức chính trong một lớp Batch Apex là gì?",
            "answer": "- `start()`: Trả về `Database.QueryLocator` hoặc `Iterable` để xác định tập dữ liệu cần xử lý. \n- `execute()`: Xử lý từng lô bản ghi (mặc định 200 bản ghi mỗi lần). \n- `finish()`: Chạy sau khi tất cả lô hoàn tất, dùng để dọn dẹp hoặc gửi thông báo."
        },
        {
            "question": "Điều gì xảy ra nếu một Batch Apex job thất bại giữa chừng?",
            "answer": "Nếu một lô thất bại (ví dụ: lỗi không xử lý), chỉ lô đó bị ảnh hưởng, các lô khác vẫn tiếp tục chạy. Batch job không tự động rollback toàn bộ, trừ khi dùng `Database.Stateful` và logic rollback thủ công."
        },
        {
            "question": "Tại sao nên sử dụng Batch Apex thay vì Data Loader?",
            "answer": "Batch Apex cho phép xử lý logic tùy chỉnh qua mã Apex (ví dụ: tính toán phức tạp), trong khi Data Loader chỉ nhập/xuất dữ liệu cơ bản mà không hỗ trợ logic lập trình."
        },
        {
            "question": "Có thể gọi một Batch Apex job từ một Batch Apex job khác không?",
            "answer": "Không trực tiếp trong `execute()`, nhưng có thể gọi từ `finish()` bằng `Database.executeBatch()` để bắt đầu một job mới sau khi job hiện tại hoàn tất."
        },
        {
            "question": "Kích thước mặc định và tối đa của batch là bao nhiêu?",
            "answer": "Mặc định: 200 bản ghi mỗi lô. Tối đa: 2,000 bản ghi mỗi lô (đặt qua tham số `scope` trong `Database.executeBatch()`)."
        },
        {
            "question": "Có bao nhiêu batch có thể chạy đồng thời?",
            "answer": "Tối đa 5 Batch Apex jobs có thể chạy đồng thời trong một org, các job khác sẽ vào hàng đợi (Apex Flex Queue)."
        },
        {
            "question": "`Database.BatchableContext` là gì và nó được sử dụng như thế nào?",
            "answer": "`Database.BatchableContext` là một đối tượng cung cấp thông tin ngữ cảnh trong Batch Apex (ví dụ: job ID, số lô). Nó được truyền vào các phương thức `start()`, `execute()`, `finish()` để theo dõi trạng thái job."
        },
        {
            "question": "Có thể sử dụng Custom Metadata hoặc Custom Settings trong một Batch job không?",
            "answer": "Có, cả hai đều có thể truy cập trong Batch Apex để lấy cấu hình hoặc dữ liệu tĩnh mà không ảnh hưởng đến giới hạn SOQL, vì chúng được lưu trữ trong bộ nhớ cache."
        },
        {
            "question": "Số lượng bản ghi tối đa mà một Batch Apex job có thể xử lý là bao nhiêu?",
            "answer": "Không có giới hạn cố định về tổng số bản ghi, nhưng `Database.QueryLocator` bị giới hạn 50 triệu bản ghi trong một job (tùy thuộc vào kích thước scope và tài nguyên hệ thống)."
        },
        {
            "question": "Điều gì xảy ra nếu một Batch Apex job vượt quá heap size limits?",
            "answer": "Nếu vượt quá 12MB heap size (bất đồng bộ), lô đó thất bại, các lô khác tiếp tục chạy. Cần giảm scope hoặc tối ưu hóa dữ liệu xử lý trong `execute()`."
        },
        {
            "question": "Có bao nhiêu lần thực thi đồng thời của `start()` được phép?",
            "answer": "Chỉ một `start()` chạy tại một thời điểm cho mỗi Batch job, vì Batch Apex xử lý tuần tự từng giai đoạn (`start`, `execute`, `finish`)."
        },
        {
            "question": "Có bao nhiêu jobs có thể ở trạng thái Holding trong Apex Flex Queue?",
            "answer": "Tối đa 100 jobs có thể ở trạng thái Holding trong Apex Flex Queue, chờ thực thi khi có slot trống (giới hạn đồng thời là 5)."
        },
        {
            "question": "Có thể chạy Batch Apex bên trong một trigger không?",
            "answer": "Có, nhưng không nên trực tiếp trong trigger vì giới hạn đồng thời. Thay vào đó, gọi `Database.executeBatch()` từ trigger để xếp hàng job bất đồng bộ."
        },
        {
            "question": "Làm thế nào để xóa hoặc dừng một Batch Apex job đang chạy?",
            "answer": "Dùng `System.abortJob(jobId)` với ID của job (lấy từ `AsyncApexJob`), có thể thực hiện từ Developer Console hoặc Apex để dừng job ngay lập tức."
        },
        {
            "question": "Sự khác biệt giữa `Database.executeBatch` và `System.scheduleBatch` là gì?",
            "answer": "- `Database.executeBatch`: Chạy Batch job ngay lập tức (nếu có slot trống). \n- `System.scheduleBatch`: Lên lịch Batch job chạy vào thời điểm cụ thể bằng cron expression, phù hợp cho tác vụ định kỳ."
        },
        {
            "question": "Interface nào triển khai Batch Apex trong Salesforce?",
            "answer": "Interface `Database.Batchable<sObject>` được triển khai trong lớp Batch Apex, yêu cầu định nghĩa `start()`, `execute()`, `finish()`."
        },
        {
            "question": "Làm thế nào để giới hạn số lượng concurrent batch jobs trong Salesforce?",
            "answer": "Không thể giới hạn trực tiếp qua cấu hình, nhưng có thể kiểm soát bằng cách theo dõi trạng thái job trong `AsyncApexJob` và trì hoãn gọi `Database.executeBatch()` nếu đã đạt 5 job đang chạy."
        },
        {
            "question": "Có thể một Batch Apex job bị tạm dừng hoặc tiếp tục không?",
            "answer": "Không, Batch Apex không hỗ trợ tạm dừng hoặc tiếp tục thủ công. Job chỉ có thể chạy hoàn toàn hoặc bị hủy bằng `System.abortJob()`."
        },
        {
            "question": "Thứ tự thực thi của batches có được đảm bảo không? Tại sao hoặc tại sao không?",
            "answer": "Không, thứ tự thực thi các lô không được đảm bảo vì Salesforce xử lý bất đồng bộ và có thể chạy song song trên nhiều luồng, tùy thuộc vào tài nguyên hệ thống."
        },
        {
            "question": "Làm thế nào để xử lý record-locking issues trong Batch Apex?",
            "answer": "Dùng `FOR UPDATE` trong `start()` để khóa bản ghi nếu cần, hoặc xử lý lỗi khóa bằng `try-catch` trong `execute()` và thử lại lô thất bại bằng cách gọi lại `Database.executeBatch()`."
        },
        {
            "question": "Mục đích của phương thức `finish` trong Batch Apex là gì?",
            "answer": "`finish()` chạy sau khi tất cả lô hoàn tất, dùng để thực hiện tác vụ dọn dẹp (ví dụ: xóa dữ liệu tạm), gửi email thông báo, hoặc bắt đầu một Batch job khác."
        },
        {
            "question": "Làm thế nào để lên lịch cho một Batch Apex job chạy trong tương lai?",
            "answer": "Dùng `System.scheduleBatch()` với tham số lớp Batch, scope, và thời gian chạy (cron expression) để lên lịch job chạy vào thời điểm cụ thể."
        },
        {
            "question": "Lợi thế của việc sử dụng `Database.QueryLocator` trong Batch Apex là gì?",
            "answer": "`Database.QueryLocator` cho phép xử lý lên đến 50 triệu bản ghi, hiệu quả hơn `Iterable` (giới hạn heap size), và tận dụng cơ chế truy vấn của Salesforce để quản lý dữ liệu lớn."
        },
        {
            "question": "Điều gì xảy ra nếu xảy ra lỗi trong một batch? Toàn bộ job có bị rollback không?",
            "answer": "Nếu một lô thất bại, chỉ lô đó bị ảnh hưởng, các lô khác vẫn chạy. Toàn bộ job không rollback trừ khi dùng `Database.Stateful` và triển khai rollback thủ công."
        },
        {
            "question": "Làm thế nào để đảm bảo chỉ những bản ghi có vấn đề bị rollback trong khi các bản ghi khác được xử lý thành công?",
            "answer": "Dùng `Database.update(records, false)` trong `execute()` với tham số `allOrNothing=false`, cho phép lưu các bản ghi thành công và bỏ qua bản ghi lỗi."
        },
        {
            "question": "Sự khác biệt chính giữa Batch Apex và Queueable Apex là gì?",
            "answer": "- **Batch Apex**: Xử lý dữ liệu lớn theo lô, tuần tự, giới hạn 5 job đồng thời. \n- **Queueable Apex**: Xử lý tác vụ nhỏ hơn, linh hoạt hơn, hỗ trợ tối đa 50 job trong hàng đợi, không chia lô."
        },
        {
            "question": "Điều gì xảy ra nếu một batch job bị aborted trong khi đang chạy?",
            "answer": "Nếu job bị hủy bằng `System.abortJob()`, các lô chưa chạy sẽ dừng lại, các lô đã hoàn tất không bị rollback, và trạng thái job trong `AsyncApexJob` chuyển sang \"Aborted\"."
        },
        {
            "question": "Làm thế nào để đảm bảo một batch job không xử lý duplicate records?",
            "answer": "Dùng `Set` để lọc bản ghi dựa trên trường duy nhất (ví dụ: Id) trong `start()`, hoặc kiểm tra điều kiện trong `execute()` để bỏ qua bản ghi đã xử lý."
        },
        {
            "question": "Tại sao chúng ta sử dụng lớp Batch khi có các công cụ khác như Data Loader để xử lý dữ liệu số lượng lớn?",
            "answer": "Chúng ta có thể dùng Data Loader nếu chỉ cần thực hiện các thao tác tĩnh hoặc có thể xử lý qua Excel. Tuy nhiên, Batch Apex được sử dụng khi cần tùy chỉnh nhiều hơn, logic phức tạp hoặc tính toán tại thời điểm chạy mà Excel không thực hiện được. Ví dụ, có thể truy vấn dữ liệu trong phương thức Start dựa trên tiêu chí lọc hoặc truy vấn liên quan."
        },
        {
            "question": "Kích thước mặc định và tối đa của Batch là bao nhiêu?",
            "answer": "Kích thước mặc định là 200 và kích thước tối đa là 2000."
        },
        {
            "question": "Các phương thức cần thiết để viết lớp Batch là gì?",
            "answer": "Để viết lớp Batch, cần triển khai giao diện Database.Batchable và định nghĩa ba phương thức:\n- **Start**: Bắt đầu xử lý.\n- **Execute**: Thực thi logic.\n- **Finish**: Hoàn tất xử lý."
        },
        {
            "question": "Có thể gọi một lớp Batch từ một lớp Batch khác không?",
            "answer": "Có, có thể gọi một lớp Batch khác từ phương thức Finish của lớp Batch hiện tại. Ví dụ:\n```apex\npublic class UpdateContactFields implements Database.Batchable<sObject> {\n    public Database.QueryLocator start(Database.BatchableContext BC) {\n        return Database.getQueryLocator('Select Id, Name, Account.Active__c from Contact WHERE Account.Active__c = \\'No\\'');\n    }\n    public void execute(Database.BatchableContext BC, List<sObject> scope) {\n        List<Contact> contacts = new List<Contact>();\n        for(sObject s : scope) {\n            Contact con = (Contact)s;\n            con.Description = 'Belongs to inactive account';\n            contacts.add(con);\n        }\n        update contacts;\n        BatchChainingDemo batchdemo = new BatchChainingDemo();\n        Database.executeBatch(batchdemo, 200);\n    }\n    public void finish(Database.BatchableContext BC) {}\n}\n```"
        },
        {
            "question": "Làm thế nào để lên lịch cho lớp Batch?",
            "answer": "Có thể lên lịch Batch Apex bằng `System.scheduleBatch`. Ví dụ:\n```apex\nString cronID = System.scheduleBatch(batchObj, 'schedule batch example', 60);\n```\nTrong đó 'batchObj' là instance, 'schedule batch example' là tên công việc, và '60' là thời gian (phút) sau đó Batch sẽ chạy. Nó trả về Job ID để theo dõi hoặc hủy."
        },
        {
            "question": "Tình huống kinh doanh: Nếu tôi có Batch xử lý 1000 bản ghi với kích thước 200, tức là 5 lô, và 4 lô đầu thành công nhưng lô thứ 5 gặp lỗi do 4-5 bản ghi, toàn bộ lô hay chỉ 4-5 bản ghi bị rollback?",
            "answer": "Trong trường hợp này, toàn bộ lô thứ 5 sẽ bị rollback."
        },
        {
            "question": "Với tình huống trên, làm thế nào để chỉ rollback các bản ghi có vấn đề và giữ kết quả thành công của các bản ghi khác?",
            "answer": "Sử dụng phương thức Database với tùy chọn partial success. Ví dụ:\n```apex\nglobal class MyBatch implements Database.Batchable<sObject> {\n    global Database.QueryLocator start(Database.BatchableContext BC) {\n        return Database.getQueryLocator([SELECT Id, Name FROM Account]);\n    }\n    global void execute(Database.BatchableContext BC, List<Account> scope) {\n        List<Database.SaveResult> saveResults = Database.update(scope, false);\n        for(Database.SaveResult sr : saveResults) {\n            if (!sr.isSuccess()) {\n                for(Database.Error error : sr.getErrors()) {\n                    System.debug('Error occurred for record with Id: ' + sr.getId() + ', Error Message: ' + error.getMessage());\n                }\n            }\n        }\n    }\n    global void finish(Database.BatchableContext BC) {}\n}\n```"
        },
        {
            "question": "Có thể gọi phương thức Future từ lớp Batch không?",
            "answer": "Không, không thể gọi phương thức Future từ Batch Apex vì chúng hoạt động khác nhau. Kết hợp chúng có thể gây ra hành vi không mong muốn."
        },
        {
            "question": "Làm thế nào để thực hiện callout từ lớp Batch?",
            "answer": "Để thực hiện callout từ lớp Batch, cần triển khai giao diện `Database.AllowsCallouts`. Ví dụ:\n```apex\nglobal class MyBatchClass implements Database.Batchable<sObject>, Database.AllowsCallouts {\n    global Database.QueryLocator start(Database.BatchableContext bc) {\n        return Database.getQueryLocator('SELECT Id, Name FROM Object__c');\n    }\n    global void execute(Database.BatchableContext bc, List<sObject> scope) {\n        // perform execute logic with callouts\n    }\n    global void finish(Database.BatchableContext bc) {}\n}\n```"
        },
        {
            "question": "Có thể truy xuất bao nhiêu bản ghi qua Database.QueryLocator?",
            "answer": "Có thể truy xuất tối đa 50 triệu bản ghi bằng `Database.QueryLocator`."
        },
        {
            "question": "Làm thế nào để theo dõi trạng thái của lớp Batch?",
            "answer": "Khi thực thi Batch, ta nhận được Job ID để theo dõi trạng thái qua:\n- **Giao diện Apex Job**: Vào Setup > Quick Find > Apex Job.\n- **Truy vấn AsyncApexJob**: Ví dụ: `AsyncApexJob aaj = [SELECT Id, Status, JobItemsProcessed, TotalJobItems, NumberOfErrors FROM AsyncApexJob WHERE ID =: batchprocessid];`"
        },
        {
            "question": "Có thể sắp xếp lại thứ tự lớp Batch không?",
            "answer": "Batch chạy theo nguyên tắc 'đầu vào trước, ra trước'. Để sắp xếp lại, dùng:\n- **Apex Flex Queue**: Công việc ở trạng thái Holding vào hàng đợi linh hoạt (Setup > Apex Flex Queue).\n- **Phương thức System.FlexQueue**: Ví dụ: `Boolean isSuccess = System.FlexQueue.moveBeforeJob(jobToMoveId, jobInQueueId);`"
        },
        {
            "question": "Tình huống kinh doanh: Batch chạy trên 1000 bản ghi, kích thước 200, cần gửi email báo cáo tổng số bản ghi thành công và thất bại. Làm thế nào để thực hiện?",
            "answer": "Triển khai giao diện `Database.Stateful` để duy trì trạng thái biến qua các lô. Ví dụ:\n```apex\nglobal class MyBatchClass implements Database.Batchable<sObject>, Database.Stateful {\n    global Integer successCount = 0;\n    global Integer failureCount = 0;\n    global Database.QueryLocator start(Database.BatchableContext bc) {\n        return Database.getQueryLocator([SELECT Id, Name FROM Object__c]);\n    }\n    global void execute(Database.BatchableContext bc, List<sObject> scope) {\n        for (Object__c obj : scope) {\n            try {\n                successCount++;\n            } catch (Exception e) {\n                failureCount++;\n            }\n        }\n    }\n    global void finish(Database.BatchableContext bc) {\n        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();\n        String[] toAddresses = new String[] {'user@example.com'};\n        mail.setToAddresses(toAddresses);\n        mail.setSubject('Batch Job Completion Report');\n        mail.setPlainTextBody('The batch job has completed.\\n\\nTotal Success Count: ' + successCount + '\\nTotal Failure Count: ' + failureCount);\n        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });\n    }\n}\n```"
        },
        {
            "question": "Làm thế nào để hủy một Batch Job?",
            "answer": "Dùng cú pháp: `System.AbortJob(JobId);`. Lưu ý: Chỉ hủy được công việc ở trạng thái Queued hoặc Holding, không hủy được công việc đã bắt đầu."
        },
        {
            "question": "Điều gì xảy ra nếu có ngoại lệ không được xử lý trong phương thức Execute của lớp Batch Apex?",
            "answer": "Nếu ngoại lệ không được xử lý trong phương thức Execute, công việc Batch sẽ bị chấm dứt. Nên xử lý lỗi đúng cách, ví dụ bằng giao diện `Database.Stateful` để ghi lại lỗi."
        },
        {
            "question": "Làm thế nào để gửi sự kiện nền tảng trong quá trình thực thi Batch?",
            "answer": "Triển khai giao diện `Database.RaisesPlatformEvents` trong lớp Batch để gửi sự kiện nền tảng."
        },
        {
            "question": "Sự khác biệt giữa Database.QueryLocator và Iterable là gì?",
            "answer": "- **Database.QueryLocator**: Vượt qua giới hạn tổng số bản ghi truy vấn SOQL (lên đến 50 triệu), dùng SOQL đơn giản.\n- **Iterable**: Tuân thủ giới hạn SOQL, cho phép logic tùy chỉnh để lọc dữ liệu trước khi truyền vào Execute. Dùng Iterable khi cần xử lý phức tạp không thể thực hiện bằng QueryLocator."
        },
        {
            "question": "Có thể gọi lớp Batch từ Trigger không?",
            "answer": "Có thể, nhưng không nên vì chỉ được xếp hàng hoặc thực thi tối đa 5 công việc Apex cùng lúc. Nếu cần, đảm bảo Trigger được tối ưu hóa hàng loạt để xử lý dữ liệu lớn."
        },
        {
            "question": "Làm thế nào để đảm bảo Batch Apex xử lý bản ghi hiệu quả và không vượt giới hạn quản trị?",
            "answer": "Để tránh vượt giới hạn:\n- Tối ưu hóa mã.\n- Tránh DML trong vòng lặp.\n- Xử lý bản ghi trong các lô nhỏ hơn."
        },
        {
            "question": "Tình huống kinh doanh: Viết lớp Batch Apex cập nhật trường 'OpportunityStage' của tất cả bản ghi Opportunity dựa trên 'CloseDate'.",
            "answer": "Dưới đây là mã mẫu:\n```apex\nglobal class UpdateOpportunityStageBatch implements Database.Batchable<sObject> {\n    global Database.QueryLocator start(Database.BatchableContext BC) {\n        return Database.getQueryLocator([SELECT Id, CloseDate, StageName FROM Opportunity]);\n    }\n    global void execute(Database.BatchableContext BC, List<Opportunity> scope) {\n        List<Opportunity> oppsToUpdate = new List<Opportunity>();\n        for (Opportunity opp : scope) {\n            if (opp.CloseDate < Date.today()) {\n                opp.StageName = 'Closed Lost';\n            } else if (opp.CloseDate == Date.today()) {\n                opp.StageName = 'Closed Won';\n            }\n            oppsToUpdate.add(opp);\n        }\n        update oppsToUpdate;\n    }\n    global void finish(Database.BatchableContext BC) {}\n}\n```"
        }
    ],
    "SOQL": [
        {
            "question": "Lấy các Account có ít nhất hai Contact với cùng miền email.",
            "answer": "Dùng SOQL với subquery hoặc aggregate query để nhóm Contact theo miền email (dùng `SUBSTRING`), sau đó lọc Account có số lượng Contact ≥ 2 cho cùng miền."
        },
        {
            "question": "Lấy các Opportunity mà tổng Amount của các Opportunity đã thắng liên quan vượt quá Amount của Opportunity hiện tại.",
            "answer": "Dùng SOQL với roll-up summary (nếu có) hoặc subquery để tính tổng Amount của Opportunity \"Closed Won\" liên quan đến Account, so sánh với Amount hiện tại."
        },
        {
            "question": "Liệt kê tất cả các Account không có Case nào, nhưng các Contact liên quan của chúng thì có.",
            "answer": "Dùng SOQL với `LEFT OUTER JOIN` hoặc subquery: chọn Account không có Case (`WHERE Id NOT IN (SELECT AccountId FROM Case)`) và có Contact liên quan đến Case."
        },
        {
            "question": "Tìm các User đã tạo hơn năm bản ghi trên các đối tượng khác nhau trong 24 giờ qua.",
            "answer": "Dùng SOQL aggregate với `CreatedById` và `CreatedDate` trong 24 giờ, nhóm theo User và đếm số bản ghi, lọc `HAVING COUNT(Id) > 5`."
        },
        {
            "question": "Xác định các Opportunity mà Account liên quan không có Case đang hoạt động nhưng có ít nhất một Opportunity đã đóng.",
            "answer": "Dùng SOQL với subquery: lọc Opportunity từ Account không có Case `IsClosed = false` nhưng có Opportunity `StageName = 'Closed Won'`."
        },
        {
            "question": "Lấy tất cả các Case mà cùng một Contact được liệt kê nhiều lần trong hệ thống phân cấp Case (ví dụ: Case cha và con).",
            "answer": "Dùng SOQL với subquery hoặc tự tham chiếu: chọn Case có `ContactId` xuất hiện trong `ParentId` của Case khác."
        },
        {
            "question": "Liệt kê tất cả các Account có Opportunity đóng trong 30 ngày tới, nhưng không có Task nào đến hạn trong cùng khoảng thời gian đó.",
            "answer": "Dùng SOQL với subquery: chọn Account có Opportunity `CloseDate` trong 30 ngày tới, nhưng không có Task với `ActivityDate` trong cùng khoảng thời gian."
        },
        {
            "question": "Tìm các Contact liên kết với nhiều Account, nhưng không Account nào của họ có Opportunity đang mở.",
            "answer": "Dùng SOQL với subquery: chọn Contact từ `AccountContactRelation` có nhiều Account, và không Account nào có Opportunity `IsClosed = false`."
        },
        {
            "question": "Lấy tất cả các Opportunity mà AnnualRevenue của Account liên quan nhỏ hơn Amount của Opportunity.",
            "answer": "Dùng SOQL với truy vấn cha-con: chọn Opportunity từ Account nơi `AnnualRevenue < Amount`."
        },
        {
            "question": "Xác định các Account mà tất cả Opportunity liên quan đã đóng và tổng số Contact lớn hơn 10.",
            "answer": "Dùng SOQL với subquery: chọn Account không có Opportunity `IsClosed = false` và `COUNT(Contacts) > 10`."
        },
        {
            "question": "Lấy Account có số lượng Opportunity tối đa.",
            "answer": "Dùng SOQL aggregate: `SELECT AccountId, COUNT(Id) FROM Opportunity GROUP BY AccountId ORDER BY COUNT(Id) DESC LIMIT 1`."
        },
        {
            "question": "Lấy 10 bản ghi Account mới nhất.",
            "answer": "Dùng SOQL: `SELECT Id, Name FROM Account ORDER BY CreatedDate DESC LIMIT 10`."
        },
        {
            "question": "Lấy các Contact và Opportunity liên quan đến Account trong một truy vấn duy nhất.",
            "answer": "Dùng SOQL cha-con: `SELECT Name, (SELECT LastName FROM Contacts), (SELECT Name FROM Opportunities) FROM Account`."
        },
        {
            "question": "Lấy chỉ các Contact đang hoạt động liên quan đến Accounts.",
            "answer": "Dùng SOQL: `SELECT Id, LastName FROM Contact WHERE AccountId != null AND IsActive__c = true`."
        },
        {
            "question": "Viết một truy vấn SOQL để lấy ID của tất cả các Account có hơn 5 Contact.",
            "answer": "Dùng aggregate: `SELECT AccountId FROM Contact GROUP BY AccountId HAVING COUNT(Id) > 5`."
        },
        {
            "question": "Lấy tất cả các Account không có Contact liên quan.",
            "answer": "Dùng SOQL: `SELECT Id FROM Account WHERE Id NOT IN (SELECT AccountId FROM Contact)`."
        },
        {
            "question": "Lấy một Account có ít nhất một Contact.",
            "answer": "Dùng SOQL: `SELECT Id FROM Account WHERE Id IN (SELECT AccountId FROM Contact) LIMIT 1`."
        },
        {
            "question": "Lấy tất cả các User với profile \"System Administrator.\"",
            "answer": "Dùng SOQL: `SELECT Id, Name FROM User WHERE Profile.Name = 'System Administrator'`."
        },
        {
            "question": "Lấy chỉ các Account có ít nhất một Contact mà checkbox `isActive` được đặt thành true.",
            "answer": "Dùng SOQL: `SELECT Id FROM Account WHERE Id IN (SELECT AccountId FROM Contact WHERE isActive__c = true)`."
        },
        {
            "question": "Lấy tất cả các Account được tạo trong 30 ngày qua.",
            "answer": "Dùng SOQL: `SELECT Id FROM Account WHERE CreatedDate = LAST_N_DAYS:30`."
        },
        {
            "question": "Selective indexing cải thiện hiệu suất SOQL như thế nào?",
            "answer": "Selective indexing (trên trường indexed như Id, Name) giảm số lượng bản ghi cần quét bằng cách chỉ truy vấn dữ liệu phù hợp với bộ lọc, tăng tốc độ thực thi và giảm tải hệ thống."
        },
        {
            "question": "Skinny tables là gì, và khi nào nên sử dụng chúng?",
            "answer": "Skinny tables là bảng ảo do Salesforce tạo, chứa các trường thường dùng để tăng tốc truy vấn trên đối tượng lớn. Dùng khi có khối lượng dữ liệu lớn (hàng triệu bản ghi) và truy vấn thường xuyên cùng tập hợp trường."
        },
        {
            "question": "Governor limits ảnh hưởng đến SOQL queries như thế nào?",
            "answer": "Giới hạn 100 truy vấn mỗi giao dịch buộc lập trình viên tối ưu hóa SOQL, tránh lặp truy vấn không cần thiết, ảnh hưởng đến thiết kế mã khi xử lý dữ liệu lớn."
        },
        {
            "question": "Sự khác biệt giữa `COUNT()` và `COUNT(Id)` trong SOQL là gì?",
            "answer": "`COUNT()` đếm tất cả bản ghi (bao gồm null), còn `COUNT(Id)` chỉ đếm bản ghi có `Id` không null (thực tế luôn đếm tất cả vì `Id` bắt buộc)."
        },
        {
            "question": "`FOR VIEW` và `FOR REFERENCE` ảnh hưởng đến query results như thế nào?",
            "answer": "- `FOR VIEW`: Cập nhật `LastViewedDate` của bản ghi. \n- `FOR REFERENCE`: Cập nhật `LastReferencedDate`. Cả hai không thay đổi dữ liệu trả về, chỉ ảnh hưởng đến metadata theo dõi."
        },
        {
            "question": "Làm thế nào để viết một polymorphic query trong SOQL?",
            "answer": "Dùng `TYPEOF` trong SOQL để truy vấn đối tượng đa hình (ví dụ: `WhatId` trong Task), chỉ định trường trả về dựa trên loại đối tượng (Account, Opportunity, v.v.)."
        },
        {
            "question": "Semi-join và anti-join queries là gì? Cung cấp ví dụ.",
            "answer": "- **Semi-join**: Lọc bản ghi dựa trên subquery (ví dụ: `SELECT Id FROM Account WHERE Id IN (SELECT AccountId FROM Contact)`). \n- **Anti-join**: Loại trừ bản ghi từ subquery (ví dụ: `SELECT Id FROM Account WHERE Id NOT IN (SELECT AccountId FROM Contact)`)."
        },
        {
            "question": "Làm thế nào để lấy child records và parent details trong một truy vấn duy nhất?",
            "answer": "Dùng truy vấn cha-con: `SELECT Name, (SELECT LastName FROM Contacts) FROM Account` để lấy dữ liệu từ cả cha (Account) và con (Contact)."
        },
        {
            "question": "`TYPEOF` trong SOQL là gì, và nó hoạt động như thế nào?",
            "answer": "`TYPEOF` là từ khóa trong SOQL dùng cho trường đa hình (ví dụ: `WhatId`), cho phép chỉ định trường trả về dựa trên loại đối tượng, chỉ hoạt động trong truy vấn `WHERE` hoặc `SELECT`."
        },
        {
            "question": "Làm thế nào để truy vấn tất cả records, bao gồm deleted & archived ones?",
            "answer": "Dùng `ALL ROWS` trong SOQL (ví dụ: `SELECT Id FROM Account ALL ROWS`) để lấy cả bản ghi đã xóa (Recycle Bin) và lưu trữ (archived)."
        },
        {
            "question": "Sự khác biệt giữa Inner Query và Left Outer Join là gì?",
            "answer": "- **Inner Query**: Truy vấn cha-con trong SOQL, chỉ trả về cha nếu có con phù hợp. \n- **Left Outer Join**: Trả về tất cả bản ghi cha, bất kể có con hay không (SOQL không hỗ trợ trực tiếp, cần xử lý logic riêng)."
        },
        {
            "question": "Làm thế nào để lấy top N records cho mỗi nhóm?",
            "answer": "Dùng `GROUP BY` với `ORDER BY` và `LIMIT` trong aggregate query, nhưng SOQL không hỗ trợ trực tiếp top N mỗi nhóm, cần xử lý qua Apex."
        },
        {
            "question": "Có thể thực hiện math operations (SUM, AVG, v.v.) trong SOQL không? Làm thế nào?",
            "answer": "Có, dùng hàm aggregate như `SUM(Amount)`, `AVG(Amount)` trong `SELECT` với `GROUP BY` để tính toán trên nhóm bản ghi."
        },
        {
            "question": "Làm thế nào để xây dựng một SOQL query động trong Apex?",
            "answer": "Dùng `Database.query()` với chuỗi SOQL được xây dựng từ biến (ví dụ: `String query = 'SELECT Id FROM ' + objectName; List<sObject> results = Database.query(query);`)."
        },
        {
            "question": "Grouped aggregations là gì, và chúng được sử dụng như thế nào?",
            "answer": "Grouped aggregations là việc nhóm bản ghi bằng `GROUP BY` trong SOQL, dùng với hàm như `COUNT()`, `SUM()` để tính toán theo nhóm (ví dụ: đếm Opportunity theo Stage)."
        },
        {
            "question": "Làm thế nào để ngăn chặn SOQL injection?",
            "answer": "Dùng bind variables (ví dụ: `:variable`) thay vì nối chuỗi trực tiếp, hoặc thoát ký tự đầu vào bằng `String.escapeSingleQuotes()` để ngăn mã độc từ dữ liệu người dùng."
        },
        {
            "question": "Sự khác biệt giữa `Database.query()` và inline SOQL là gì?",
            "answer": "- `Database.query()`: Chạy SOQL động từ chuỗi, linh hoạt nhưng cần cẩn thận injection. \n- Inline SOQL: Truy vấn tĩnh trong mã (ví dụ: `[SELECT Id FROM Account]`), an toàn hơn và hiệu quả hơn."
        },
        {
            "question": "Làm thế nào để xử lý NULL values trong điều kiện WHERE?",
            "answer": "Dùng `IS NULL` hoặc `IS NOT NULL` trong `WHERE` để lọc bản ghi có hoặc không có giá trị null (ví dụ: `WHERE Industry IS NULL`)."
        },
        {
            "question": "Relationship queries ảnh hưởng đến heap size và CPU time như thế nào?",
            "answer": "Truy vấn quan hệ (cha-con) tăng heap size vì trả về nhiều dữ liệu hơn, và tăng CPU time nếu truy vấn phức tạp hoặc không selective, cần tối ưu bằng bộ lọc và giới hạn trường."
        },
        {
            "question": "Làm thế nào để sử dụng `LIMIT` và `OFFSET` cho phân trang hiệu quả?",
            "answer": "`LIMIT` giới hạn số bản ghi trả về, `OFFSET` bỏ qua số bản ghi đầu tiên (tối đa 2,000). Kết hợp cả hai để phân trang (ví dụ: `LIMIT 10 OFFSET 20` cho trang 3)."
        }
    ],
    "General Salesforce": [
        {
            "question": "Làm thế nào để bỏ qua một validation rule trong Salesforce?",
            "answer": "Dùng Custom Permission hoặc trường tùy chỉnh (ví dụ: checkbox) để kiểm tra trong validation rule, cho phép bỏ qua khi cần (ví dụ: `NOT($Permission.Bypass_Validation)`)."
        },
        {
            "question": "Trong bối cảnh nào thì manual sharing được kích hoạt trong Salesforce?",
            "answer": "Manual sharing được kích hoạt khi đối tượng ở chế độ Private hoặc Read Only trong OWD (Organization-Wide Defaults), cho phép người dùng chia sẻ bản ghi thủ công với người khác."
        },
        {
            "question": "Một người dùng có thể xóa các bản ghi do người khác trong cùng vai trò tạo ra không?",
            "answer": "Phụ thuộc vào quyền: Nếu vai trò cho phép \"Delete\" và OWD không cấm, người dùng có thể xóa. Nếu không, cần quyền \"Modify All\" hoặc chia sẻ rõ ràng."
        },
        {
            "question": "Sự khác biệt giữa User Mode và System Mode trong Salesforce là gì?",
            "answer": "- **User Mode**: Apex tôn trọng quyền của người dùng (profile, sharing rules, FLS). \n- **System Mode**: Apex bỏ qua quyền người dùng, truy cập với quyền hệ thống."
        },
        {
            "question": "Có bao nhiêu cách để chia sẻ bản ghi trong Salesforce?",
            "answer": "Năm cách chính: Manual sharing, Sharing rules, Role hierarchy, Apex sharing, Teams sharing."
        },
        {
            "question": "Có thể gọi một lớp Batch Apex từ một future method không? Nếu không, tại sao?",
            "answer": "Có, `Database.executeBatch()` có thể được gọi từ `@future` method, miễn là không vượt giới hạn đồng thời (5 jobs)."
        },
        {
            "question": "Có thể thực hiện callout từ một trigger không? Tại sao hoặc tại sao không?",
            "answer": "Không trực tiếp, vì trigger không cho phép callout đồng bộ. Cần dùng `@future` hoặc Queueable để gọi bất đồng bộ."
        },
        {
            "question": "Có thể triển khai cả Scheduled Apex và Batch Apex trong một lớp Apex duy nhất không? Phương pháp tốt nhất là gì?",
            "answer": "Có, một lớp có thể vừa implements `Schedulable` và `Database.Batchable`, gọi `Database.executeBatch()` trong `execute()`. Tuy nhiên, tốt nhất là tách riêng để dễ bảo trì."
        },
        {
            "question": "Có thể thực hiện callout từ Batch Apex không?",
            "answer": "Có, Batch Apex hỗ trợ callout trong `execute()` hoặc `finish()`, tối đa 150 callouts mỗi giao dịch."
        },
        {
            "question": "Mối quan hệ giữa Account và Contact trong Salesforce là gì?",
            "answer": "Là mối quan hệ lookup (1-nhiều), trong đó Account là cha và Contact là con, liên kết qua trường `AccountId` trên Contact."
        },
        {
            "question": "Có thể tạo một roll-up summary field cho Contact trên Account không? Có thể thực hiện qua chức năng tiêu chuẩn không? Nếu không, làm thế nào để triển khai?",
            "answer": "Không, vì Contact và Account không phải mối quan hệ master-detail (chỉ lookup). Để triển khai, dùng trigger hoặc Flow để tính toán và cập nhật trường trên Account."
        },
        {
            "question": "Khi một Opportunity được đánh dấu là \"Closed Won,\" làm thế nào để khiến Opportunity và Opportunity Products của nó chỉ đọc được?",
            "answer": "Dùng validation rule hoặc Flow để kiểm tra `StageName = 'Closed Won'` và khóa bản ghi bằng cách ngăn chỉnh sửa, hoặc thay đổi quyền qua profile/permission set."
        },
        {
            "question": "Nếu một Batch Apex xử lý 2000 bản ghi với scope là 200, sẽ tạo ra bao nhiêu debug logs?",
            "answer": "Tạo 11 debug logs: 1 cho `start()`, 10 cho `execute()` (2000 / 200 = 10 lô), 1 cho `finish()`."
        },
        {
            "question": "Bạn đã từng làm việc với công cụ triển khai nào chưa? Nếu có, đó là những công cụ nào?",
            "answer": "Một số công cụ phổ biến: Salesforce CLI, Workbench, Change Sets, Gearset, Copado (tùy kinh nghiệm cá nhân)."
        },
        {
            "question": "Làm thế nào để tối ưu hóa một báo cáo Salesforce phức tạp đang tải quá lâu?",
            "answer": "Thêm bộ lọc selective (trên trường indexed), giảm số cột, dùng summary report thay vì tabular, kiểm tra skinny tables nếu khối lượng dữ liệu lớn."
        },
        {
            "question": "Sự khác biệt chính giữa before trigger và after trigger trong Salesforce là gì, và khi nào nên sử dụng cái nào?",
            "answer": "- **Before**: Chạy trước khi lưu, dùng để chỉnh sửa bản ghi. \n- **After**: Chạy sau khi lưu, dùng để xử lý tác động liên quan (ví dụ: tạo bản ghi khác)."
        },
        {
            "question": "Salesforce xử lý khối lượng dữ liệu lớn (LDV) như thế nào, và bạn sẽ sử dụng chiến lược nào để vượt qua các thách thức phổ biến?",
            "answer": "Salesforce dùng skinny tables, indexing, và Batch Apex để xử lý LDV. Chiến lược: Phân trang, selective queries, asynchronous processing, archiving dữ liệu cũ."
        },
        {
            "question": "Bạn có thể giải thích khái niệm external objects trong Salesforce và chúng khác với custom objects thông thường như thế nào không?",
            "answer": "- **External objects**: Lưu trữ dữ liệu bên ngoài Salesforce, truy cập qua External Data Source (OData, v.v.), không dùng dung lượng org. \n- **Custom objects**: Lưu trữ dữ liệu trong Salesforce, dùng dung lượng org, hỗ trợ đầy đủ tính năng như trigger."
        },
        {
            "question": "Làm thế nào để xử lý governor limits trong Salesforce khi làm việc với tập dữ liệu lớn hoặc thao tác hàng loạt?",
            "answer": "Dùng Batch Apex hoặc Queueable Apex để xử lý bất đồng bộ, tối ưu SOQL/DML bằng `Map`, giảm truy vấn không cần thiết."
        },
        {
            "question": "Bạn có thể mô tả độ phức tạp của việc sử dụng nhiều quy trình bất đồng bộ (như Batch Apex, Future Methods, và Queueable Apex) trong một giải pháp duy nhất không?",
            "answer": "Độ phức tạp nằm ở quản lý thứ tự thực thi, giới hạn đồng thời (5 Batch, 50 Queueable), theo dõi trạng thái job, và xử lý lỗi chồng chéo, cần thiết kế rõ ràng và kiểm soát trạng thái."
        },
        {
            "question": "Các phương pháp hay nhất để quản lý bảo mật Salesforce và đảm bảo bảo vệ dữ liệu, đặc biệt khi xử lý thông tin nhạy cảm, là gì?",
            "answer": "Dùng OWD chặt chẽ, sharing rules, FLS, mã hóa dữ liệu nhạy cảm (Shield), kiểm tra quyền trong Apex, và audit thường xuyên."
        },
        {
            "question": "Làm thế nào để triển khai dynamic Apex để xử lý các tình huống mà đối tượng và trường không được biết đến cho đến khi chạy?",
            "answer": "Dùng `Schema` class để lấy metadata đối tượng/trường runtime, xây dựng SOQL động bằng `Database.query()`, kiểm tra quyền trước khi truy cập."
        },
        {
            "question": "Bạn có thể giải thích cách sử dụng platform events trong Salesforce để kích hoạt kiến trúc hướng sự kiện không?",
            "answer": "Tạo Platform Event object, publish event bằng Apex hoặc Flow, subscribe qua trigger hoặc LWC để xử lý sự kiện theo thời gian thực, xây dựng kiến trúc phản ứng nhanh."
        },
        {
            "question": "Custom metadata types là gì và chúng khác với custom settings trong Salesforce như thế nào? Khi nào bạn sẽ ưu tiên sử dụng cái này hơn cái kia?",
            "answer": "- **Custom Metadata Types**: Lưu trữ metadata tùy chỉnh, triển khai như code, hỗ trợ SOQL, dùng cho cấu hình ứng dụng. \n- **Custom Settings**: Lưu trữ dữ liệu cấp org/user, không triển khai như code, truy cập nhanh hơn. \n- Dùng Custom Metadata cho cấu hình triển khai, Custom Settings cho dữ liệu runtime."
        },
        {
            "question": "Làm thế nào để triển khai một quy tắc mà số điện thoại của Account không được trùng với số điện thoại của Contact?",
            "answer": "Dùng trigger hoặc Flow để so sánh `Phone` của Account và Contact khi insert/update, thêm lỗi bằng `addError()` nếu trùng."
        },
        {
            "question": "Governor Limits là gì, và tại sao chúng tồn tại?",
            "answer": "Là giới hạn tài nguyên (SOQL, DML, CPU) để đảm bảo hiệu suất và công bằng trên nền tảng đa người dùng, ngăn một người dùng chiếm quá nhiều tài nguyên."
        },
        {
            "question": "Sự khác biệt giữa SOQL và SOSL là gì, và khi nào nên sử dụng cái nào?",
            "answer": "- **SOQL**: Truy vấn dữ liệu có cấu trúc từ một đối tượng, dùng khi biết rõ object/field. \n- **SOSL**: Tìm kiếm văn bản trên nhiều đối tượng, dùng khi cần tìm kiếm toàn cục."
        },
        {
            "question": "Bulkification trong Apex là gì, và tại sao nó quan trọng?",
            "answer": "Bulkification là thiết kế mã Apex để xử lý nhiều bản ghi cùng lúc, tránh vượt giới hạn governor khi chạy trong ngữ cảnh hàng loạt (trigger, Batch Apex)."
        },
        {
            "question": "Batch Apex hoạt động như thế nào, và khi nào nên sử dụng nó?",
            "answer": "Batch Apex chia dữ liệu lớn thành lô, xử lý tuần tự qua `start()`, `execute()`, `finish()`. Dùng khi cần xử lý hàng nghìn bản ghi vượt giới hạn giao dịch đồng bộ."
        },
        {
            "question": "Làm thế nào để gọi Apex trong LWC?",
            "answer": "Dùng `@wire` cho truy cập tự động (cacheable) hoặc imperative call bằng `import` và `.then()` cho linh hoạt, tùy thuộc vào yêu cầu DML."
        }
    ],
    "Governor Limits": [
        {
            "description": "Per Transaction Apex Limits",
            "details": "Các giới hạn này được tính cho mỗi giao dịch Apex. Đối với Batch Apex, các giới hạn này được đặt lại cho mỗi lần thực thi một lô bản ghi trong phương thức `execute`. \n- Số lượng truy vấn SOQL: **100** \n- Số bản ghi lấy được từ một truy vấn SOQL duy nhất: **50,000** \n- Số bản ghi lấy được bằng `Database.getQueryLocator`: **10,000** \n- Số lượng truy vấn SOSL: **20** \n- Số bản ghi lấy được từ một truy vấn SOSL duy nhất: **2,000** \n- Số lượng câu lệnh DML: **150** \n- Độ sâu ngăn xếp tối đa khi kích hoạt Trigger đệ quy: **16** \n- Số lượng HTTP hoặc Web Service Callouts: **150** \n- Số lần gọi Future tối đa: **50** \n- Số lần gọi Queueable tối đa: **50** \n- Số phương thức gửi Email tối đa: **10** \n- Tổng kích thước Heap: **6 MB** \n- Số lần gọi `EventBus.Publish` tối đa: **150** \n- Thời gian CPU tối đa trên máy chủ Salesforce: **10,000 ms**"
        },
        {
            "description": "Per Transaction Certified Managed Package Limits",
            "details": "Nếu một managed package do Salesforce ISV phát triển đã vượt qua kiểm tra bảo mật, chúng thường được cấp giới hạn giao dịch cao hơn."
        },
        {
            "description": "Lightning Platform Apex Limits",
            "details": "Các giới hạn này không đặc thù cho một giao dịch Apex và được thực thi bởi nền tảng Lightning."
        },
        {
            "description": "Static Apex Limits",
            "details": "Các giới hạn Apex được áp dụng cho tất cả các giao dịch."
        },
        {
            "description": "Size-Specific Apex Limits",
            "details": "Các giới hạn Apex liên quan đến kích thước của mã."
        },
        {
            "description": "Miscellaneous Apex Limits",
            "details": "Các giới hạn khác không được phân loại ở trên."
        }
    ],
    "Drafting": [],
    "SFDC’s VisualForce Page": [
        {
            "question": "VisualForce Page là gì?",
            "answer": "VisualForce Page là một công cụ phát triển giao diện tùy chỉnh trong Salesforce, cho phép tạo các trang web động và tương tác bằng ngôn ngữ markup tương tự HTML, kết hợp cùng các thành phần VisualForce (apex:). Nó sử dụng controller Apex (standard hoặc custom) để xử lý logic phía server, truy xuất, và thao tác dữ liệu từ cơ sở dữ liệu Salesforce, giúp người dùng xây dựng giao diện người dùng linh hoạt, phù hợp với nhu cầu kinh doanh cụ thể."
        },
        {
            "question": "Làm cách nào để tạo một VisualForce Page?",
            "answer": "Để tạo một VisualForce Page, bạn mở Developer Console trong Salesforce, chọn 'File' > 'New' > 'Visualforce Page', nhập tên trang (theo quy tắc đặt tên hợp lệ, ví dụ: không chứa khoảng trắng), sau đó viết mã markup trong thẻ `<apex:page>`. Bạn có thể chỉ định controller hoặc extension trong thuộc tính của thẻ `<apex:page>` và lưu trang trong tổ chức Salesforce để sử dụng hoặc kiểm tra."
        },
        {
            "question": "Những phần chính của một VisualForce Page là gì?",
            "answer": "Một VisualForce Page bao gồm ba thành phần chính: (1) **Markup**: sử dụng các thẻ VisualForce (như `<apex:page>`, `<apex:outputText>`) để định nghĩa giao diện, tương tự HTML; (2) **Controller**: có thể là standard controller (dành cho đối tượng tiêu chuẩn như Account) hoặc custom controller (lớp Apex tùy chỉnh cho logic phức tạp); và (3) **Extensions/Helpers**: các lớp Apex bổ sung để mở rộng chức năng của controller, tăng tính linh hoạt."
        },
        {
            "question": "Trang VisualForce tương tác với dữ liệu Salesforce như thế nào?",
            "answer": "VisualForce Page tương tác với dữ liệu Salesforce thông qua controller Apex, sử dụng các câu lệnh SOQL hoặc DML để truy vấn, chèn, cập nhật, hoặc xóa bản ghi. Dữ liệu được truy xuất từ cơ sở dữ liệu Salesforce, hiển thị trên trang qua các thành phần VisualForce như `<apex:outputField>`, và người dùng có thể chỉnh sửa hoặc gửi dữ liệu trở lại thông qua các thành phần như `<apex:inputField>` hoặc `<apex:commandButton>`."
        },
        {
            "question": "Sự khác biệt giữa standard controller và custom controller trong VisualForce là gì?",
            "answer": "Standard controller là các controller mặc định của Salesforce, cung cấp chức năng cơ bản (CRUD, phân trang) cho các đối tượng tiêu chuẩn hoặc tùy chỉnh mà không cần viết mã, ví dụ: `standardController=\"Account\"`. Custom controller là các lớp Apex do người dùng tự định nghĩa, cho phép triển khai logic phức tạp, truy vấn tùy chỉnh, hoặc tích hợp nhiều đối tượng, mang lại sự linh hoạt cao hơn nhưng yêu cầu lập trình."
        },
        {
            "question": "Làm cách nào để xử lý đầu vào từ người dùng trong VisualForce Page?",
            "answer": "Để xử lý đầu vào từ người dùng, sử dụng các thành phần như `<apex:inputText>` (cho văn bản), `<apex:selectList>` (cho danh sách thả xuống), hoặc `<apex:inputCheckbox>` (cho ô kiểm). Giá trị đầu vào được thu thập qua thuộc tính trong controller Apex, thường được đặt trong phương thức action hoặc getter/setter, sau đó xử lý logic như lưu dữ liệu hoặc kiểm tra hợp lệ."
        },
        {
            "question": "Vai trò của thẻ `<apex:page>` là gì?",
            "answer": "Thẻ `<apex:page>` là thẻ gốc bắt buộc trong mọi VisualForce Page, định nghĩa các thuộc tính cơ bản của trang như `standardController` (cho controller tiêu chuẩn), `extensions` (cho các lớp mở rộng), `action` (phương thức gọi khi trang tải), `sidebar` (hiển thị thanh bên), và `showHeader` (hiển thị header Salesforce). Nó đóng vai trò như container chính cho toàn bộ nội dung trang."
        },
        {
            "question": "Làm cách nào để bao gồm CSS và JavaScript trong một trang VisualForce?",
            "answer": "Bao gồm CSS bằng cách sử dụng thẻ `<apex:stylesheet>` để liên kết tệp CSS hoặc nhúng trực tiếp trong thẻ `<style>` bên trong `<apex:page>`. Tương tự, bao gồm JavaScript bằng `<apex:script>` để liên kết tệp .js hoặc nhúng mã JavaScript trực tiếp. Cần đảm bảo URL hoặc tài nguyên được chỉ định chính xác và tuân thủ chính sách bảo mật của Salesforce."
        },
        {
            "question": "Vai trò của thẻ `<apex:form>` là gì?",
            "answer": "Thẻ `<apex:form>` định nghĩa một biểu mẫu HTML trên trang VisualForce, cho phép gửi dữ liệu từ người dùng đến server thông qua các thành phần như `<apex:commandButton>` hoặc `<apex:commandLink>`. Nó đảm bảo dữ liệu được mã hóa và gửi an toàn, đồng thời tích hợp mã thông báo CSRF để bảo vệ chống lại các cuộc tấn công không được ủy quyền."
        },
        {
            "question": "Làm cách nào để xử lý lỗi và ngoại lệ trong một trang VisualForce?",
            "answer": "Xử lý lỗi và ngoại lệ trong VisualForce bằng cách sử dụng khối `try-catch` trong controller Apex để bắt các ngoại lệ như `QueryException` hoặc `DmlException`. Sau đó, hiển thị thông báo lỗi cho người dùng thông qua thành phần `<apex:messages>` hoặc `<apex:pageMessages>`, đảm bảo thông báo rõ ràng và hữu ích để hỗ trợ debug hoặc hành động tiếp theo."
        },
        {
            "question": "Sự khác biệt giữa `<apex:outputText>` và `<apex:inputText>` là gì?",
            "answer": "`<apex:outputText>` là thành phần để hiển thị văn bản tĩnh hoặc động từ controller, không cho phép chỉnh sửa trực tiếp, phù hợp để hiển thị dữ liệu đọc-only. Ngược lại, `<apex:inputText>` cho phép người dùng nhập hoặc chỉnh sửa văn bản, thường kết hợp với thuộc tính `value` để liên kết với biến trong controller, hỗ trợ tương tác."
        },
        {
            "question": "Làm cách nào để xử lý phân trang trong một trang VisualForce?",
            "answer": "Xử lý phân trang trong VisualForce bằng cách sử dụng `<apex:pageBlockTable>` hoặc `<apex:dataTable>` với thuộc tính `rows` để giới hạn số bản ghi hiển thị trên mỗi trang, kết hợp với logic trong controller (như `setPageSize` và `getRecords`) hoặc thành phần standard như `apex:pagination` để cung cấp nút điều hướng phân trang cho người dùng."
        },
        {
            "question": "Vai trò của thẻ `<apex:include>` là gì?",
            "answer": "Thẻ `<apex:include>` cho phép nhúng một trang VisualForce khác vào trang hiện tại, hỗ trợ tái sử dụng mã và tổ chức giao diện thành các module nhỏ hơn. Nó giúp giảm trùng lặp mã, tăng tính duy trì, và đảm bảo nhất quán giao diện trên nhiều trang trong Salesforce."
        },
        {
            "question": "Làm cách nào để xử lý tải lên tệp tin trong VisualForce?",
            "answer": "Sử dụng thành phần `<apex:inputFile>` để cho phép người dùng tải lên tệp, liên kết với thuộc tính `value` trong controller để nhận dữ liệu tệp. Trong controller, sử dụng lớp `Attachment` hoặc `ContentVersion` của Apex để lưu trữ tệp vào Salesforce, kiểm tra kích thước và loại tệp để đảm bảo an toàn và tuân thủ giới hạn."
        },
        {
            "question": "Mục đích của thẻ `<apex:actionFunction>` là gì?",
            "answer": "Thẻ `<apex:actionFunction>` cho phép gọi phương thức Apex từ JavaScript phía client mà không cần reload trang, hỗ trợ tương tác động giữa giao diện người dùng và server. Nó thường được sử dụng với các sự kiện JavaScript để thực hiện các hành động như cập nhật dữ liệu hoặc gửi dữ liệu không đồng bộ."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của một trang VisualForce?",
            "answer": "Tối ưu hóa hiệu suất bằng cách giảm số lượng truy vấn SOQL/DML, sử dụng truy vấn selective với indexing, áp dụng caching cho dữ liệu tĩnh, hạn chế logic phức tạp trong renderer, và sử dụng phân trang hoặc lazy loading để giảm tải dữ liệu hiển thị trên mỗi trang, đảm bảo thời gian phản hồi nhanh."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong một trang VisualForce?",
            "answer": "Xử lý lỗi bằng cách triển khai `try-catch` trong controller Apex để bắt các ngoại lệ như `DmlException` hoặc `QueryException`, sau đó hiển thị thông báo lỗi chi tiết cho người dùng thông qua `<apex:pageMessages>` hoặc thông báo tùy chỉnh, đồng thời ghi log lỗi vào Developer Console để debug."
        },
        {
            "question": "Vai trò của thẻ `<apex:sectionHeader>` là gì?",
            "answer": "Thẻ `<apex:sectionHeader>` tạo tiêu đề phân đoạn cho các phần nội dung trong trang VisualForce, giúp tổ chức giao diện thành các khu vực rõ ràng, mang lại trải nghiệm người dùng trực quan hơn, thường được sử dụng trong `<apex:pageBlock>` để định dạng tiêu đề cấp cao."
        },
        {
            "question": "Làm cách nào để tạo một nút tùy chỉnh trong một trang VisualForce?",
            "answer": "Tạo nút tùy chỉnh bằng thẻ `<apex:commandButton>` hoặc `<apex:commandLink>`, chỉ định thuộc tính như `action` (liên kết với phương thức Apex), `value` (nhãn nút), và `rerender` (cập nhật khu vực cụ thể trên trang) để thực hiện hành động như lưu dữ liệu hoặc điều hướng."
        },
        {
            "question": "Làm cách nào để triển khai một trang VisualForce?",
            "answer": "Triển khai trang VisualForce bằng cách phát triển trong sandbox, kiểm tra kỹ lưỡng với các trường hợp biên và người dùng khác nhau, sau đó sử dụng Change Sets, Salesforce CLI, hoặc công cụ như Gearset để triển khai lên môi trường production, đảm bảo tuân thủ quy trình kiểm soát phiên bản và kiểm tra bảo mật."
        },
        {
            "question": "Làm thế nào để ngừa các cuộc tấn công XSS trên trang VisualForce?",
            "answer": "Ngăn chặn XSS bằng cách sử dụng các hàm encode của Salesforce như `JSENCODE`, `HTMLENCODE`, `URLENCODE` để xử lý đầu vào người dùng, đặt thuộc tính `escape=\"true\"` trên các thành phần hiển thị dữ liệu, và cấu hình Content Security Policy (CSP) trong `<apex:page>` để giới hạn nguồn dữ liệu đáng tin cậy."
        },
        {
            "question": "CSRF protection là gì, và làm thế nào để triển khai nó trong VisualForce?",
            "answer": "CSRF (Cross-Site Request Forgery) là loại tấn công yêu cầu người dùng thực hiện hành động không được ủy quyền. Trong VisualForce, Salesforce tự động cung cấp bảo vệ CSRF thông qua mã thông báo trong `<apex:form>`, đảm bảo các yêu cầu gửi đi từ trang đều được xác thực, không cần cấu hình thêm nhưng cần sử dụng đúng các thành phần biểu mẫu."
        },
        {
            "question": "Làm thế nào để xử lý quyền hạn và kiểm soát truy cập trên trang VisualForce?",
            "answer": "Xử lý quyền hạn bằng cách sử dụng logic trong controller Apex để kiểm tra quyền của người dùng thông qua `Schema` (ví dụ: `isAccessible()`, `isCreateable()`), kiểm tra profile hoặc permission set, và chỉ cho phép truy cập dữ liệu hoặc thực hiện hành động nếu người dùng có quyền tương ứng, đảm bảo tuân thủ FLS và OWD."
        },
        {
            "question": "Những thực hành tốt nhất để bảo mật các custom controllers là gì?",
            "answer": "Thực hành tốt nhất bao gồm: kiểm tra đầu vào người dùng để ngăn chặn injection, mã hóa dữ liệu nhạy cảm, sử dụng `with sharing` để tôn trọng quyền người dùng, áp dụng các hàm encode của Salesforce, và viết unit test để đảm bảo không có lỗ hổng bảo mật trong logic."
        },
        {
            "question": "Làm thế nào để quản lý bảo mật phiên trong VisualForce?",
            "answer": "Salesforce tự động quản lý bảo mật phiên thông qua cơ chế SSO và mã thông báo, nhưng cần tránh lưu trữ thông tin nhạy cảm trong session, sử dụng HTTPS cho tất cả giao tiếp, và kiểm tra thời gian hết hạn phiên để đảm bảo an toàn khi người dùng không hoạt động."
        },
        {
            "question": "Vai trò của Content Security Policy (CSP) trong bảo mật VisualForce là gì?",
            "answer": "CSP là chính sách bảo mật giúp ngăn chặn các cuộc tấn công như XSS và data injection bằng cách chỉ cho phép tải nội dung từ các nguồn đáng tin cậy, được định nghĩa trong thuộc tính `contentSecurityPolicy` của thẻ `<apex:page>`, như giới hạn script, style, hoặc frame từ domain an toàn."
        },
        {
            "question": "Làm thế nào để xử lý tải lên tệp tin một cách an toàn trong VisualForce?",
            "answer": "Xử lý tải lên tệp an toàn bằng cách kiểm tra loại tệp (ví dụ: chỉ cho phép .pdf, .doc), giới hạn kích thước tệp (theo giới hạn Salesforce), sử dụng `<apex:inputFile>` kết hợp với logic Apex để validate và lưu trữ tệp trong `Attachment` hoặc `ContentDocument`, tránh tải lên tệp độc hại."
        },
        {
            "question": "Những lỗ hổng phổ biến trong VisualForce là gì và làm thế nào để giảm thiểu chúng?",
            "answer": "Lỗ hổng phổ biến bao gồm XSS (injection script), CSRF (yêu cầu giả mạo), và SQL injection. Giảm thiểu bằng cách encode đầu vào, sử dụng bảo vệ CSRF tự động của Salesforce, kiểm tra dữ liệu người dùng, và áp dụng CSP để giới hạn nguồn nội dung, đồng thời kiểm tra bảo mật thường xuyên."
        },
        {
            "question": "Làm thế nào để đảm bảo rằng các trang VisualForce tuân thủ các quy định bảo vệ dữ liệu?",
            "answer": "Đảm bảo tuân thủ quy định như GDPR hoặc HIPAA bằng cách mã hóa dữ liệu nhạy cảm, kiểm soát truy cập chặt chẽ (FLS, OWD), ghi log hoạt động người dùng, và cung cấp quyền xóa hoặc truy xuất dữ liệu theo yêu cầu, đồng thời kiểm tra định kỳ với các công cụ bảo mật Salesforce."
        },
        {
            "question": "Những bước nào nên được thực hiện nếu nghi ngờ có sự xâm phạm bảo mật trên một trang VisualForce?",
            "answer": "Nếu nghi ngờ xâm phạm, tiến hành điều tra ngay bằng cách phân tích debug logs, xác định lỗ hổng bảo mật, vá lỗi thông qua cập nhật mã, thông báo cho người dùng bị ảnh hưởng, và tuân thủ quy trình phản ứng sự cố bảo mật của Salesforce, bao gồm báo cáo cho đội ngũ hỗ trợ."
        },
        {
            "question": "Làm thế nào để tối ưu hóa việc truy xuất dữ liệu trong VisualForce để cải thiện hiệu suất?",
            "answer": "Tối ưu hóa truy xuất dữ liệu bằng cách sử dụng SOQL selective với indexing, giảm số lượng truy vấn bằng cách kết hợp mối quan hệ cha-con, áp dụng caching cho dữ liệu tĩnh, và sử dụng phân trang để giới hạn dữ liệu hiển thị, đảm bảo giảm tải cho cơ sở dữ liệu Salesforce."
        },
        {
            "question": "Những thực hành tốt nhất để giảm thiểu các truy vấn cơ sở dữ liệu trên trang VisualForce là gì?",
            "answer": "Thực hành tốt nhất bao gồm: dùng truy vấn Bulk SOQL để xử lý nhiều bản ghi cùng lúc, tránh SOQL trong vòng lặp, sử dụng mối quan hệ để lấy dữ liệu liên quan trong một truy vấn, và áp dụng `LIMIT`/`OFFSET` để giảm tải dữ liệu không cần thiết."
        },
        {
            "question": "Làm thế nào để sử dụng caching trong VisualForce để tăng cường hiệu suất?",
            "answer": "Sử dụng caching bằng cách khai báo dữ liệu tĩnh trong `static` hoặc áp dụng cơ chế caching của Salesforce như `cache` trong controller, lưu trữ dữ liệu trong session hoặc View State để giảm số lần truy vấn cơ sở dữ liệu, đặc biệt cho dữ liệu không thay đổi thường xuyên."
        },
        {
            "question": "Salesforce cung cấp những công cụ nào để giám sát và kiểm tra hiệu suất của trang VisualForce?",
            "answer": "Salesforce cung cấp Developer Console để xem debug logs và chỉ số hiệu suất, Lightning Usage App để theo dõi thời gian thực, cùng với các công cụ như Chrome DevTools để phân tích hiệu suất phía client, và các báo cáo hệ thống để giám sát tổng quan."
        },
        {
            "question": "Làm thế nào để tối ưu hóa markup và giảm bớt các thành phần không cần thiết trên trang VisualForce?",
            "answer": "Tối ưu hóa markup bằng cách loại bỏ các thành phần dư thừa, sử dụng `<apex:rendered>` để hiển thị có điều kiện, giảm mức độ lồng nhau của thành phần, và sử dụng CSS để tối giản giao diện, đồng thời kiểm tra hiệu suất với công cụ debug để xác định khu vực cần cải thiện."
        },
        {
            "question": "Vai trò của phân trang trong việc cải thiện hiệu suất là gì?",
            "answer": "Phân trang giới hạn số bản ghi hiển thị trên mỗi trang (ví dụ: 20 bản ghi), giảm tải dữ liệu từ server, cải thiện thời gian tải trang, và tăng trải nghiệm người dùng bằng cách cho phép điều hướng dễ dàng giữa các trang dữ liệu lớn."
        },
        {
            "question": "Làm thế nào để xử lý các tập dữ liệu lớn trong VisualForce một cách hiệu quả?",
            "answer": "Xử lý tập dữ liệu lớn bằng cách triển khai phân trang với `<apex:pageBlockTable>` hoặc logic Apex, sử dụng Batch Apex để truy xuất dữ liệu bất đồng bộ, và áp dụng lazy loading để tải dữ liệu theo nhu cầu, tránh làm quá tải server hoặc giao diện người dùng."
        },
        {
            "question": "Những thực hành tốt nhất để tối ưu hóa JavaScript và CSS trong VisualForce là gì?",
            "answer": "Tối ưu JavaScript và CSS bằng cách nén tệp để giảm kích thước, sử dụng CDN cho thư viện chung, chỉ tải các tệp cần thiết, và áp dụng minification để loại bỏ mã dư thừa, đồng thời kiểm tra hiệu suất với công cụ như YSlow hoặc Google PageSpeed."
        },
        {
            "question": "Làm thế nào để đo lường và cải thiện thời gian tải của trang VisualForce?",
            "answer": "Đo lường thời gian tải bằng Developer Console hoặc công cụ trình duyệt như Chrome DevTools, xác định điểm chai (slow queries, large data), tối ưu hóa SOQL/DML, áp dụng caching, và kiểm tra hiệu suất trên nhiều thiết bị với dữ liệu thực tế để đảm bảo thời gian phản hồi nhanh."
        },
        {
            "question": "Tác động của việc sử dụng các thành phần tiêu chuẩn so với các thành phần tùy chỉnh đối với hiệu suất là gì?",
            "answer": "Thành phần tiêu chuẩn của Salesforce (như `<apex:outputField>`) được tối ưu hóa sẵn, có hiệu suất cao và sử dụng ít tài nguyên hơn. Ngược lại, thành phần tùy chỉnh có thể tăng tải server nếu không được thiết kế tốt, cần tối ưu hóa logic Apex và markup để giảm tác động hiệu suất."
        },
        {
            "question": "Làm thế nào để sử dụng Developer Console để debug trang VisualForce?",
            "answer": "Sử dụng Developer Console để debug bằng cách bật debug logs cho người dùng, mở tab Logs để xem chi tiết thực thi, sử dụng `System.debug` trong controller để in thông tin, và bước qua mã Apex để xác định lỗi hoặc hiệu suất kém."
        },
        {
            "question": "Những bước nào để kích hoạt và xem debug logs cho trang VisualForce?",
            "answer": "Kích hoạt debug logs qua Setup > Debug Logs, chọn người dùng hoặc profile liên quan, đặt mức log (DEBUG hoặc FINE), thực hiện hành động trên trang VisualForce, sau đó xem logs trong Developer Console hoặc tải về để phân tích."
        },
        {
            "question": "Làm thế nào để sử dụng các công cụ phát triển trình duyệt để debug trang VisualForce?",
            "answer": "Sử dụng Chrome DevTools hoặc Firefox Developer Tools để kiểm tra mã HTML/CSS/JavaScript của trang, xem yêu cầu mạng (network requests), kiểm tra lỗi console, và debug mã phía client, giúp xác định vấn đề giao diện hoặc hiệu suất."
        },
        {
            "question": "Những thực hành tốt nhất để kiểm tra trang VisualForce là gì?",
            "answer": "Thực hành tốt nhất bao gồm: viết test cases toàn diện cho controller và giao diện, kiểm tra với các profile và vai trò khác nhau, sử dụng Selenium hoặc công cụ tự động để kiểm tra hồi quy, và đảm bảo độ phủ mã ít nhất 75% qua unit test Apex."
        },
        {
            "question": "Làm thế nào để xử lý và debug các lỗi trên trang VisualForce?",
            "answer": "Xử lý lỗi bằng `try-catch` trong controller để bắt ngoại lệ, hiển thị thông báo lỗi qua `<apex:messages>`, ghi log chi tiết trong Developer Console, và debug từng bước để xác định nguyên nhân, sau đó sửa lỗi và kiểm tra lại hiệu suất."
        },
        {
            "question": "Vai trò của kiểm tra đơn vị trong phát triển VisualForce là gì?",
            "answer": "Kiểm tra đơn vị đảm bảo các thành phần logic (controller, extensions) hoạt động đúng, phát hiện lỗi sớm trước khi triển khai, sử dụng `@isTest` trong Apex để viết test cases, kiểm tra các kịch bản biên và hiệu suất, đạt độ phủ mã tối thiểu 75%."
        },
        {
            "question": "Làm thế nào để kiểm tra hiệu suất của trang VisualForce?",
            "answer": "Kiểm tra hiệu suất bằng cách sử dụng Developer Console để đo thời gian thực thi SOQL/DML, chạy test với tập dữ liệu lớn, dùng công cụ như Lightning Usage App để phân tích thời gian tải, và tối ưu hóa dựa trên kết quả để cải thiện phản hồi."
        },
        {
            "question": "Những kỹ thuật debug phổ biến cho trang VisualForce là gì?",
            "answer": "Kỹ thuật debug bao gồm: sử dụng `System.debug` để ghi log, bước qua mã trong Developer Console, kiểm tra lỗi JavaScript trong console trình duyệt, và phân tích debug logs để xác định vấn đề logic hoặc performance trong controller hoặc markup."
        },
        {
            "question": "Làm thế nào để debug các vấn đề liên quan đến quyền hạn của người dùng trong VisualForce?",
            "answer": "Debug quyền hạn bằng cách kiểm tra profile và permission set của người dùng trong Setup, sử dụng `Schema` để kiểm tra quyền truy cập (FLS, OWD), ghi log quyền trong controller, và thử với các vai trò khác nhau để xác định vấn đề quyền hạn."
        },
        {
            "question": "Quy trình để triển khai và kiểm tra trang VisualForce trong các môi trường khác nhau là gì?",
            "answer": "Phát triển và kiểm tra trong sandbox (Developer hoặc Partial Copy), đảm bảo mã qua unit test, triển khai sang staging để kiểm tra thêm, sau đó dùng Change Sets hoặc Salesforce CLI để triển khai lên production, kiểm tra kỹ lưỡng trước khi phát hành để tránh lỗi."
        },
        {
            "question": "Làm thế nào để tích hợp các API bên ngoài trong trang VisualForce?",
            "answer": "Tích hợp API bên ngoài bằng cách sử dụng Apex để thực hiện HTTP callout (REST hoặc SOAP), xử lý phản hồi JSON/XML trong controller, và hiển thị dữ liệu trên trang qua các thành phần VisualForce, đảm bảo tuân thủ giới hạn callout (150 mỗi giao dịch)."
        },
        {
            "question": "Những tính năng nâng cao của VisualForce cho việc thao tác và hiển thị dữ liệu là gì?",
            "answer": "Tính năng nâng cao bao gồm: sử dụng Apex để thực hiện truy vấn phức tạp, hiển thị dữ liệu động qua `<apex:repeat>` hoặc `<apex:chart>`, tích hợp JavaScript để tạo biểu đồ tương tác, và sử dụng relationship queries để lấy dữ liệu liên quan trong một truy vấn duy nhất."
        },
        {
            "question": "Làm thế nào để tạo và sử dụng các thành phần tùy chỉnh trong VisualForce?",
            "answer": "Tạo thành phần tùy chỉnh bằng thẻ `<apex:component>`, định nghĩa logic trong controller hoặc extension, sau đó tái sử dụng thành phần trên nhiều trang VisualForce thông qua `<apex:include>` hoặc trực tiếp trong markup, đảm bảo mã dễ bảo trì và nhất quán."
        },
        {
            "question": "Làm thế nào để xử lý các cập nhật dữ liệu thời gian thực trên trang VisualForce?",
            "answer": "Xử lý cập nhật thời gian thực bằng cách sử dụng Streaming API hoặc Platform Events để đẩy dữ liệu từ Salesforce, kết hợp JavaScript remoting hoặc AJAX để cập nhật giao diện mà không cần reload toàn bộ trang, đảm bảo trải nghiệm người dùng mượt mà."
        },
        {
            "question": "Vai trò của JavaScript remoting trong VisualForce là gì?",
            "answer": "JavaScript remoting cho phép gọi phương thức Apex từ JavaScript phía client thông qua `@RemoteAction`, giảm tải trang bằng cách thực hiện các tương tác không đồng bộ, cải thiện hiệu suất và tạo trải nghiệm tương tác động mà không cần tải lại trang."
        },
        {
            "question": "Làm thế nào để triển khai phân trang trên trang VisualForce?",
            "answer": "Triển khai phân trang bằng cách sử dụng `<apex:pageBlockTable>` với thuộc tính `rows` để giới hạn bản ghi, kết hợp logic trong controller (sử dụng `Offset` và `Limit`) hoặc thành phần standard như `<apex:pagination>` để cung cấp điều hướng cho người dùng giữa các trang dữ liệu."
        },
        {
            "question": "Những tùy chọn để styling trang VisualForce là gì?",
            "answer": "Styling trang VisualForce bằng cách sử dụng CSS trong `<style>` hoặc `<apex:stylesheet>`, áp dụng thiết kế đáp ứng với media queries, sử dụng các thư viện như Bootstrap (nếu được phép), và đảm bảo giao diện nhất quán với theme Salesforce để tối ưu hóa trải nghiệm người dùng."
        },
        {
            "question": "Làm thế nào để xử lý quốc tế hóa trên trang VisualForce?",
            "answer": "Xử lý quốc tế hóa bằng cách sử dụng Custom Labels để định nghĩa văn bản đa ngôn ngữ, áp dụng tính năng localization của Salesforce (như `$Label` hoặc `$Resource`), và đảm bảo các thành phần hỗ trợ hiển thị đúng định dạng ngày, giờ, và tiền tệ theo khu vực người dùng."
        },
        {
            "question": "Quy trình để triển khai trang VisualForce đến môi trường production là gì?",
            "answer": "Phát triển và kiểm tra trong sandbox, đảm bảo qua unit test và kiểm tra bảo mật, sử dụng Change Sets hoặc Salesforce CLI để gói trang và các thành phần liên quan, triển khai lên staging để kiểm tra cuối cùng, sau đó phát hành lên production với quy trình kiểm soát phiên bản chặt chẽ."
        },
        {
            "question": "Làm thế nào để tối ưu hóa trang VisualForce cho các thiết bị di động?",
            "answer": "Tối ưu hóa bằng cách sử dụng thiết kế đáp ứng (responsive design) với CSS media queries, giảm kích thước tệp JavaScript/CSS, sử dụng thành phần nhẹ như `<apex:outputPanel>`, và kiểm tra giao diện trên các thiết bị di động để đảm bảo khả năng tương thích và hiệu suất tốt trên mạng di động."
        },
        {
            "question": "Những thực hành tốt nhất về các quy tắc đặt tên trong VisualForce là gì?",
            "answer": "Thực hành đặt tên bao gồm: sử dụng tên có ý nghĩa, mô tả (ví dụ: `AccountDetailPage` thay vì `Page1`), tránh khoảng trắng hoặc ký tự đặc biệt, tuân thủ quy ước đặt tên của Salesforce (camelCase hoặc PascalCase), và đảm bảo nhất quán trên tất cả các thành phần và controller."
        },
        {
            "question": "Làm thế nào để tổ chức và cấu trúc trang VisualForce để tăng tính dễ đọc?",
            "answer": "Tổ chức trang bằng cách sử dụng khoảng trắng hợp lý, thêm chú thích (comment) trong markup, nhóm các thành phần logic bằng `<apex:section>` hoặc `<apex:pageBlock>`, và chia nhỏ mã thành các thành phần hoặc trang con để dễ bảo trì và hiểu rõ cấu trúc."
        },
        {
            "question": "Những hướng dẫn để sử dụng các controller tiêu chuẩn so với các controller tùy chỉnh là gì?",
            "answer": "Sử dụng controller tiêu chuẩn cho các trang đơn giản, dựa trên một đối tượng tiêu chuẩn/tùy chỉnh với chức năng CRUD cơ bản. Sử dụng controller tùy chỉnh khi cần logic phức tạp, tích hợp nhiều đối tượng, hoặc thực hiện các thao tác không có sẵn trong standard controller, đảm bảo tối ưu hóa hiệu suất và bảo mật."
        },
        {
            "question": "Làm thế nào để quản lý và tái sử dụng mã trong VisualForce?",
            "answer": "Quản lý mã bằng cách tạo các thành phần tùy chỉnh (`<apex:component>`), sử dụng controller extensions để mở rộng logic, và tái sử dụng mã qua `<apex:include>` hoặc thư viện JavaScript/CSS chung, đảm bảo mã được tổ chức hiệu quả và duy trì dễ dàng."
        },
        {
            "question": "Những thực hành tốt nhất để xử lý lỗi trong VisualForce là gì?",
            "answer": "Thực hành xử lý lỗi bao gồm: sử dụng `try-catch` trong controller để bắt ngoại lệ, hiển thị thông báo lỗi chi tiết qua `<apex:messages>`, ghi log lỗi trong Developer Console để debug, và kiểm tra các trường hợp biên để đảm bảo ứng dụng ổn định."
        },
        {
            "question": "Làm thế nào để đảm bảo rằng trang VisualForce dễ tiếp cận cho người khuyết tật?",
            "answer": "Đảm bảo tiếp cận bằng cách tuân thủ WCAG 2.0, sử dụng thuộc tính ARIA trên các thành phần, cung cấp nhãn (labels) rõ ràng, hỗ trợ điều hướng bằng bàn phím, và kiểm tra giao diện với công cụ như WAVE để xác minh khả năng tiếp cận."
        },
        {
            "question": "Những cân nhắc khi sử dụng thư viện bên thứ ba trong VisualForce là gì?",
            "answer": "Cân nhắc bao gồm: đảm bảo thư viện tương thích với Salesforce (không vi phạm giới hạn), kiểm tra bảo mật và hiệu suất, giảm kích thước tải xuống bằng cách nén, và cập nhật thường xuyên để tránh lỗi phiên bản hoặc lỗ hổng bảo mật."
        },
        {
            "question": "Làm thế nào để theo kịp các phát triển mới và thực hành tốt nhất trong VisualForce?",
            "answer": "Theo dõi tài liệu Salesforce Trailhead, tham gia cộng đồng Salesforce (như Success Community), tham dự hội thảo Dreamforce, và đọc blog/ webinar để cập nhật các cải tiến, tính năng mới, và thực hành tốt nhất trong phát triển VisualForce."
        },
        {
            "question": "Những sai lầm phổ biến cần tránh trong phát triển VisualForce là gì?",
            "answer": "Tránh các sai lầm như: mã hóa cứng ID hoặc dữ liệu nhạy cảm, không encode đầu vào người dùng dẫn đến XSS, bỏ qua tối ưu hóa hiệu suất, và không viết unit test đầy đủ, dẫn đến lỗi khi triển khai lên production."
        },
        {
            "question": "Làm thế nào để lập kế hoạch và thiết kế một trang VisualForce hiệu quả?",
            "answer": "Lập kế hoạch bằng cách phân tích yêu cầu người dùng, phác thảo giao diện và logic dữ liệu, thiết kế controller và markup theo mô hình MVC, sau đó triển khai từng bước, kiểm tra kỹ lưỡng, và tối ưu hóa hiệu suất trước khi phát hành."
        },
        {
            "question": "Mục đích của thẻ `<apex:page>` là gì?",
            "answer": "Thẻ `<apex:page>` là thẻ gốc định nghĩa cấu trúc và thuộc tính cơ bản của trang VisualForce, bao gồm controller, extensions, hành động khi tải trang, và tùy chọn hiển thị header/thanh bên, đóng vai trò như container chính cho toàn bộ nội dung."
        },
        {
            "question": "Làm thế nào để bao gồm CSS và JavaScript trong một trang VisualForce?",
            "answer": "Bao gồm CSS bằng thẻ `<apex:stylesheet value=\"{!$Resource.YourCSS}\"/>` hoặc nhúng trực tiếp trong `<style>`. Tương tự, bao gồm JavaScript bằng `<apex:script value=\"{!$Resource.YourJS}\"/>` hoặc nhúng mã trực tiếp, đảm bảo tài nguyên được tải an toàn và hiệu quả."
        },
        {
            "question": "Vai trò của thẻ `<apex:form>` là gì?",
            "answer": "Thẻ `<apex:form>` tạo biểu mẫu HTML trên trang, cho phép gửi dữ liệu từ người dùng đến server thông qua các thành phần như `<apex:commandButton>`, đảm bảo dữ liệu được mã hóa và bảo vệ chống CSRF, hỗ trợ tương tác giữa giao diện và logic server."
        },
        {
            "question": "Thẻ `<apex:include>` hoạt động như thế nào?",
            "answer": "Thẻ `<apex:include pageName=\"YourPage\"/>` nhúng một trang VisualForce khác vào trang hiện tại, giúp tái sử dụng mã, tổ chức giao diện thành các module, và duy trì tính nhất quán giữa các trang trong Salesforce."
        },
        {
            "question": "Sự khác biệt giữa `<apex:outputText>` và `<apex:inputText>` là gì?",
            "answer": "`<apex:outputText>` hiển thị văn bản tĩnh hoặc động từ controller, không cho phép chỉnh sửa, phù hợp cho dữ liệu đọc-only. Ngược lại, `<apex:inputText>` cho phép người dùng nhập hoặc chỉnh sửa văn bản, liên kết với biến controller để xử lý đầu vào."
        },
        {
            "question": "Làm thế nào để xử lý tải lên tệp tin trong VisualForce?",
            "answer": "Sử dụng `<apex:inputFile>` để cho phép tải lên tệp, liên kết với thuộc tính `value` trong controller để nhận dữ liệu. Trong controller, xử lý tệp bằng cách tạo đối tượng `Attachment` hoặc `ContentVersion`, kiểm tra loại/kích thước tệp, và lưu trữ an toàn trong Salesforce."
        },
        {
            "question": "Mục đích của thẻ `<apex:actionFunction>` là gì?",
            "answer": "Thẻ `<apex:actionFunction>` cho phép gọi phương thức Apex từ JavaScript phía client, hỗ trợ tương tác động mà không cần reload trang, thường dùng với các sự kiện JavaScript để thực hiện logic server-side một cách bất đồng bộ."
        },
        {
            "question": "Làm thế nào để tạo một nút tùy chỉnh trong trang VisualForce?",
            "answer": "Tạo nút bằng `<apex:commandButton value=\"Click Me\" action=\"{!yourMethod}\" rerender=\"sectionId\"/>`, liên kết với phương thức Apex `yourMethod` trong controller, cho phép thực hiện hành động như lưu dữ liệu hoặc điều hướng, với tùy chọn cập nhật khu vực cụ thể."
        },
        {
            "question": "Thẻ `<apex:sectionHeader>` dùng để làm gì?",
            "answer": "Thẻ `<apex:sectionHeader>` tạo tiêu đề phân đoạn cho nội dung, thường nằm trong `<apex:pageBlock>`, giúp tổ chức giao diện thành các phần rõ ràng, cải thiện trải nghiệm người dùng bằng cách cung cấp cấu trúc trực quan."
        },
        {
            "question": "Làm thế nào để hiển thị danh sách bản ghi bằng `<apex:repeat>`?",
            "answer": "Sử dụng `<apex:repeat value=\"{!records}\" var=\"record\">` để lặp qua danh sách `records` từ controller, hiển thị các trường của `record` bên trong thẻ (ví dụ: `<apex:outputText value=\"{!record.Name}\"/>`), tạo danh sách động và linh hoạt."
        },
        {
            "question": "Sự khác biệt giữa controller tiêu chuẩn và custom controller trong VisualForce là gì?",
            "answer": "Controller tiêu chuẩn cung cấp chức năng cơ bản cho đối tượng (CRUD, phân trang) mà không cần mã, liên kết qua `standardController`. Custom controller là lớp Apex do người dùng viết, cho phép logic phức tạp, truy vấn tùy chỉnh, và tích hợp nhiều đối tượng, nhưng cần lập trình thủ công."
        },
        {
            "question": "Làm thế nào để sử dụng một standard controller trong trang VisualForce?",
            "answer": "Chỉ định standard controller trong `<apex:page standardController=\"Account\">`, sử dụng các thành phần như `<apex:detail>` hoặc `<apex:outputField>` để hiển thị, và mở rộng bằng extensions nếu cần logic bổ sung, không yêu cầu viết mã phức tạp."
        },
        {
            "question": "Controller extension là gì, và khi nào nên dùng chúng?",
            "answer": "Controller extension là lớp Apex bổ sung cho standard hoặc custom controller, mở rộng chức năng mà không thay thế toàn bộ logic hiện có, dùng khi cần thêm phương thức hoặc thuộc tính mới mà standard controller không hỗ trợ, như logic tùy chỉnh cho một trang cụ thể."
        },
        {
            "question": "Làm thế nào để truyền tham số đến controller từ trang VisualForce?",
            "answer": "Truyền tham số bằng cách sử dụng thuộc tính `action` trong `<apex:page>` để gọi phương thức controller khi tải trang, hoặc dùng `<apex:param>` trong `<apex:actionFunction>`/`<apex:commandButton>` để gửi dữ liệu động từ giao diện đến controller, xử lý trong phương thức Apex."
        },
        {
            "question": "Chu kỳ sống của một controller trong VisualForce là gì?",
            "answer": "Chu kỳ sống của controller bắt đầu khi trang được tải (khởi tạo controller), thực thi phương thức `action` nếu có, xử lý các sự kiện người dùng (như click nút), và kết thúc khi trang đóng hoặc session hết hạn, với các phương thức như getter/setter và action được gọi theo nhu cầu."
        },
        {
            "question": "Làm thế nào để xử lý phân trang với standard controller?",
            "answer": "Sử dụng `<apex:pageBlockTable>` với standard controller, kết hợp thuộc tính `rows` để giới hạn bản ghi hiển thị, và dùng các phương thức như `getRecords()` hoặc `setPageSize()` để điều khiển phân trang tự động, cung cấp nút điều hướng cho người dùng."
        },
        {
            "question": "Những thực hành tốt nhất để viết mã controller hiệu quả là gì?",
            "answer": "Thực hành bao gồm: bulkify mã để xử lý nhiều bản ghi, giảm SOQL/DML trong vòng lặp, sử dụng `Map` để tối ưu hóa truy vấn, viết unit test để đảm bảo độ phủ mã, và tổ chức mã sạch, rõ ràng với chú thích để dễ bảo trì."
        },
        {
            "question": "Làm thế nào để debug một controller trong VisualForce?",
            "answer": "Debug controller bằng cách sử dụng `System.debug` để ghi log thông tin trong phương thức, mở Developer Console để xem debug logs, bước qua mã Apex để xác định lỗi, và kiểm tra giá trị biến trong runtime để chẩn đoán vấn đề."
        },
        {
            "question": "Vai trò của các phương thức getter và setter trong controller là gì?",
            "answer": "Getter (`getProperty`) trả về dữ liệu từ controller để hiển thị trên trang, đảm bảo liên kết dữ liệu với giao diện. Setter (`setProperty`) xử lý đầu vào người dùng, cập nhật giá trị trong controller, quan trọng cho data binding hai chiều và tương tác động."
        },
        {
            "question": "Làm thế nào để xử lý ngoại lệ trong một controller?",
            "answer": "Xử lý ngoại lệ bằng `try-catch` trong phương thức controller để bắt các lỗi như `QueryException` hoặc `DmlException`, ghi log lỗi bằng `System.debug`, và trả về thông báo lỗi qua thuộc tính hoặc hiển thị trên trang bằng `<apex:messages>`."
        },
        {
            "question": "Làm thế nào để xử lý đầu vào người dùng trong trang VisualForce?",
            "answer": "Sử dụng các thành phần như `<apex:inputText>`, `<apex:selectList>`, hoặc `<apex:inputCheckbox>` để thu thập đầu vào, liên kết `value` với thuộc tính trong controller, sau đó xử lý logic như validation hoặc lưu dữ liệu qua phương thức action trong controller."
        },
        {
            "question": "Những cách nào để kiểm tra đầu vào người dùng trong VisualForce?",
            "answer": "Kiểm tra đầu vào bằng cách sử dụng validation rules trong controller (như kiểm tra rỗng, định dạng email), áp dụng `required=\"true\"` trên thành phần, và hiển thị lỗi qua `<apex:messages>` nếu dữ liệu không hợp lệ, đảm bảo dữ liệu an toàn trước khi xử lý."
        },
        {
            "question": "Làm thế nào để hiển thị dữ liệu động dựa trên lựa chọn của người dùng?",
            "answer": "Hiển thị dữ liệu động bằng cách sử dụng `<apex:rendered>` với điều kiện dựa trên thuộc tính trong controller, kết hợp JavaScript để ẩn/hiện phần tử, hoặc dùng `<apex:actionFunction>` để gọi phương thức Apex lấy dữ liệu mới dựa trên lựa chọn người dùng, không cần reload trang."
        },
        {
            "question": "Quy trình để lưu dữ liệu do người dùng nhập là gì?",
            "answer": "Quy trình bao gồm: thu thập đầu vào qua các thành phần như `<apex:inputText>`, validate dữ liệu trong controller, sử dụng DML (như `insert` hoặc `update`) để lưu vào cơ sở dữ liệu Salesforce, sau đó thông báo kết quả cho người dùng qua `<apex:messages>` hoặc điều hướng đến trang khác."
        },
        {
            "question": "Làm thế nào để xử lý tệp đính kèm trong VisualForce?",
            "answer": "Sử dụng `<apex:inputFile>` để cho phép tải lên tệp, liên kết với thuộc tính `value` trong controller để nhận dữ liệu. Trong controller, tạo đối tượng `Attachment` hoặc `ContentVersion`, kiểm tra loại/kích thước tệp, và sử dụng `insert` để lưu trữ tệp an toàn trong Salesforce."
        },
        {
            "question": "Làm cách nào để tích hợp VisualForce page vào Lightning Experience?",
            "answer": "Tích hợp VisualForce vào Lightning Experience bằng cách nhúng trang vào Lightning Component sử dụng `<lightning:container>`, thêm vào tab VisualForce trong Lightning App Builder, hoặc sử dụng Lightning Out để hiển thị trang VisualForce trong giao diện Lightning, đảm bảo tương thích và hiệu suất tốt."
        },
        {
            "question": "Làm cách nào để chuyển đổi VisualForce page sang Lightning Web Component?",
            "answer": "Chuyển đổi bằng cách phân tích logic và giao diện của VisualForce, tái thiết kế markup trong HTML/LWC, chuyển đổi controller Apex thành JavaScript trong LWC, sử dụng `@wire` hoặc imperative call để gọi Apex, và tối ưu hóa hiệu suất cho framework Lightning hiện đại, vì không có công cụ chuyển đổi tự động."
        },
        {
            "question": "Làm cách nào để sử dụng VisualForce page cho việc báo cáo và phân tích dữ liệu?",
            "answer": "Sử dụng Apex controller để truy vấn dữ liệu qua SOQL, hiển thị dưới dạng bảng với `<apex:pageBlockTable>` hoặc biểu đồ bằng JavaScript/thư viện như Chart.js, tích hợp logic phân tích động, và cung cấp bộ lọc người dùng để tạo báo cáo tùy chỉnh, linh hoạt và tương tác."
        },
        {
            "question": "Làm thế nào để đảm bảo VisualForce page luôn cập nhật dữ liệu mới mà không cần tải lại trang?",
            "answer": "Đảm bảo cập nhật thời gian thực bằng cách sử dụng JavaScript remoting với `<apex:actionFunction>` để gọi phương thức Apex, áp dụng AJAX để làm mới khu vực cụ thể, hoặc sử dụng Streaming API để đẩy dữ liệu từ Salesforce, giảm tải cho server và cải thiện trải nghiệm người dùng."
        },
        {
            "question": "Làm cách nào để tạo một báo cáo động sử dụng VisualForce page?",
            "answer": "Tạo báo cáo động bằng cách sử dụng Apex để truy vấn dữ liệu theo điều kiện người dùng (qua `<apex:inputText>` hoặc `<apex:selectList>`), hiển thị dữ liệu trong `<apex:pageBlockTable>` hoặc biểu đồ JavaScript, và dùng `<apex:actionFunction>` để cập nhật báo cáo mà không cần reload, cung cấp giao diện tương tác."
        }
    ],
    "SFDC’s Aura Component": [
        {
            "question": "Aura Component là gì?",
            "answer": "Aura Component là một thành phần giao diện người dùng có thể tái sử dụng trong Salesforce Lightning, được xây dựng trên Aura Framework. Nó cho phép tạo các giao diện động, tương tác cho ứng dụng web và di động, sử dụng HTML, CSS, và JavaScript, kết hợp với logic server-side qua Apex, nhằm cung cấp trải nghiệm người dùng linh hoạt và hiệu quả."
        },
        {
            "question": "Sự khác biệt giữa Aura Component và VisualForce Page là gì?",
            "answer": "Aura Component tập trung vào xây dựng các ứng dụng trang đơn (single-page applications) với khả năng tái sử dụng cao, sử dụng Aura Framework hiện đại và các thành phần Lightning, trong khi VisualForce Page là các trang web truyền thống với markup tương tự HTML, tập trung vào giao diện cố định và logic server-side qua Apex, ít linh hoạt hơn trong việc tạo giao diện động."
        },
        {
            "question": "Những phần chính của một gói Aura Component là gì?",
            "answer": "Một gói Aura Component bao gồm: (1) **Markup (.cmp)**: tệp HTML để định nghĩa giao diện; (2) **Controller (JavaScript)**: chứa logic xử lý sự kiện và tương tác; (3) **Helper**: tệp JavaScript hỗ trợ tái sử dụng mã cho controller; (4) **Style (CSS)**: tệp định nghĩa phong cách giao diện; và (5) **Documentation (tùy chọn)**: tài liệu mô tả, ví dụ, và hướng dẫn sử dụng thành phần."
        },
        {
            "question": "Làm cách nào để tạo một Aura Component?",
            "answer": "Để tạo một Aura Component, mở Developer Console trong Salesforce, chọn 'File' > 'New' > 'Lightning Component', nhập tên thành phần (theo quy tắc đặt tên hợp lệ), sau đó định nghĩa markup trong tệp `.cmp`, logic trong tệp `.js` (controller và helper nếu cần), và phong cách trong `.css`. Sau đó, lưu và triển khai trong tổ chức Salesforce."
        },
        {
            "question": "Làm cách nào để sử dụng JavaScript trong Aura Component?",
            "answer": "Sử dụng JavaScript trong controller và helper của Aura Component để xử lý sự kiện người dùng (như onclick), thao tác dữ liệu, và tương tác với Salesforce qua các cuộc gọi Apex (sử dụng `$A.enqueueAction` hoặc `$A.getCallback`). JavaScript giúp tạo logic phía client động, giảm tải server, và cải thiện trải nghiệm người dùng."
        },
        {
            "question": "Vai trò của controller trong một Aura Component là gì?",
            "answer": "Controller trong Aura Component là một tệp JavaScript chứa các phương thức xử lý sự kiện từ markup (như onClick, onChange), đóng vai trò trung gian giữa giao diện người dùng (view) và mô hình dữ liệu (model). Nó quản lý logic phía client, gọi các phương thức server-side qua Apex, và đảm bảo giao diện cập nhật động khi có tương tác."
        },
        {
            "question": "Làm cách nào để xử lý sự kiện trong Aura Component?",
            "answer": "Xử lý sự kiện trong Aura Component bằng cách định nghĩa các handler trong controller, sử dụng các thuộc tính như `onClick={c.handleClick}` trong markup. Bạn có thể tạo sự kiện tùy chỉnh (`<aura:event>`) để giao tiếp giữa các thành phần, phát sự kiện qua `component.getEvent().fire()`, và xử lý chúng trong các thành phần cha hoặc ứng dụng."
        },
        {
            "question": "Sự khác biệt giữa Aura Component và Lightning Web Component (LWC) là gì?",
            "answer": "Aura Component sử dụng khung công nghệ cũ của Salesforce, dựa trên JavaScript và HTML với hiệu suất trung bình, trong khi Lightning Web Component (LWC) sử dụng tiêu chuẩn web hiện đại (Web Components, ES6), có hiệu suất cao hơn, dễ tích hợp với các công nghệ bên ngoài, và nhỏ gọn hơn về tài nguyên, nhưng đòi hỏi kiến thức mới hơn."
        },
        {
            "question": "Làm cách nào để triển khai một Aura Component?",
            "answer": "Triển khai Aura Component bằng cách phát triển trong Developer Console hoặc Salesforce DX, đẩy mã nguồn qua Change Sets, Salesforce CLI (`sfdx force:source:deploy`), hoặc sử dụng hệ thống kiểm soát phiên bản (như Git). Đảm bảo kiểm tra kỹ lưỡng trong sandbox trước khi triển khai lên production để tránh lỗi."
        },
        {
            "question": "Những thực hành tốt nhất cho việc phát triển Aura Component là gì?",
            "answer": "Thực hành tốt nhất bao gồm: giữ thành phần nhỏ, dễ tái sử dụng; sử dụng sự kiện và thuộc tính để giao tiếp giữa các thành phần; tận dụng liên kết dữ liệu để giảm thao tác DOM; đảm bảo khả năng tiếp cận (accessibility) với ARIA; và tối ưu hóa hiệu suất bằng cách giảm các cuộc gọi server không cần thiết."
        },
        {
            "question": "Sự khác biệt giữa một thành phần và một ứng dụng trong Aura là gì?",
            "answer": "Ứng dụng Aura (`<aura:application>`) là điểm vào chính cho giao diện, hoạt động như một container chứa các thành phần Lightning, thường dùng để khởi tạo và chạy toàn bộ ứng dụng. Thành phần Aura (`<aura:component>`) là các khối giao diện nhỏ, có thể tái sử dụng, được nhúng vào ứng dụng hoặc thành phần khác để xây dựng giao diện động."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu giữa các thành phần trong Aura?",
            "answer": "Truyền dữ liệu giữa các thành phần trong Aura bằng cách sử dụng: (1) **Thuộc tính**: định nghĩa thuộc tính trong thành phần con với `@api` (trong LWC tương tự), và truyền giá trị từ thành phần cha; (2) **Sự kiện**: phát sự kiện tùy chỉnh từ thành phần con, thành phần cha lắng nghe qua `<aura:handler>`; (3) **Lightning Data Service (LDS)**: chia sẻ dữ liệu chung qua dịch vụ dữ liệu."
        },
        {
            "question": "Vai trò của Lightning Locker trong Aura Component là gì?",
            "answer": "Lightning Locker là một lớp bảo mật trong Aura Component, cung cấp môi trường sandbox tách biệt cho từng thành phần, ngăn chặn truy cập trái phép vào DOM, dữ liệu, hoặc mã của các thành phần khác. Nó đảm bảo an toàn, tách biệt namespace, và tuân thủ chính sách bảo mật của Salesforce."
        },
        {
            "question": "Làm cách nào để xử lý quốc tế hóa trong Aura Component?",
            "answer": "Xử lý quốc tế hóa (i18n) trong Aura Component bằng cách sử dụng `$Label` để truy cập nhãn tùy chỉnh (Custom Labels) được định nghĩa trong Salesforce, hỗ trợ hiển thị văn bản, ngày, số theo ngôn ngữ và khu vực của người dùng, thông qua Translation Workbench hoặc Custom Labels."
        },
        {
            "question": "Mục đích của thành phần `aura:iteration` là gì?",
            "answer": "Thành phần `<aura:iteration>` trong Aura Component được sử dụng để lặp qua một danh sách hoặc mảng dữ liệu (như List, Map) từ controller, hiển thị từng phần tử dưới dạng thành phần con hoặc nội dung, giúp tạo danh sách động và linh hoạt trên giao diện người dùng."
        },
        {
            "question": "Làm cách nào để xử lý xác thực người dùng trong Aura Component?",
            "answer": "Salesforce tự động xử lý xác thực người dùng thông qua phiên đăng nhập, và bạn có thể truy cập thông tin người dùng hiện tại thông qua biến toàn cục `$User` (như `$User.Id`, `$User.Name`) trong markup hoặc controller, đảm bảo logic chỉ thực hiện với người dùng đã xác thực."
        },
        {
            "question": "Sự khác biệt giữa Lightning Component và VisualForce Component là gì?",
            "answer": "Lightning Component (bao gồm Aura và LWC) là các thành phần giao diện hiện đại, được thiết kế cho Lightning Experience, sử dụng Aura Framework hoặc Web Components với hiệu suất cao và khả năng đáp ứng. VisualForce Component là các thành phần truyền thống, dựa trên markup VisualForce, phù hợp hơn cho giao diện cố định và logic server-side, ít linh hoạt hơn trong ứng dụng động."
        },
        {
            "question": "Làm cách nào để kiểm tra Aura Component?",
            "answer": "Kiểm tra Aura Component bằng cách sử dụng Lightning Testing Service (LTS) trong Salesforce, viết bài kiểm tra đơn vị bằng JavaScript (sử dụng cú pháp QUnit hoặc Jasmine), chạy qua Developer Console hoặc CLI, đảm bảo độ phủ mã tối thiểu 75% và kiểm tra các kịch bản người dùng thực tế."
        },
        {
            "question": "Vai trò của thành phần `aura:handler` là gì?",
            "answer": "Thành phần `<aura:handler>` trong Aura Component định nghĩa các handler để xử lý sự kiện (như sự kiện hệ thống hoặc tùy chỉnh), cho phép phản hồi khi sự kiện được phát, như xử lý sự kiện `init`, `change`, hoặc sự kiện ứng dụng/thành phần, đảm bảo giao tiếp linh hoạt giữa các thành phần."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của Aura Component?",
            "answer": "Tối ưu hóa hiệu suất bằng cách giảm thao tác trực tiếp với DOM, sử dụng liên kết dữ liệu (`v.` hoặc `!v.`) để tự động cập nhật giao diện, tránh re-render không cần thiết, áp dụng caching cho dữ liệu tĩnh, và giảm số lượng cuộc gọi server qua batching hoặc sử dụng LDS."
        },
        {
            "question": "Vai trò của tệp helper trong một Aura Component là gì?",
            "answer": "Tệp helper trong Aura Component là một phần JavaScript chứa các phương thức có thể tái sử dụng, giúp giảm độ phức tạp trong controller bằng cách tách logic chung (như tính toán, xử lý dữ liệu) ra khỏi các phương thức xử lý sự kiện, tăng tính rõ ràng và bảo trì mã nguồn."
        },
        {
            "question": "Vai trò của tệp style trong một Aura Component là gì?",
            "answer": "Tệp style (CSS) trong Aura Component định nghĩa phong cách giao diện cho thành phần, sử dụng selector `:host` để áp dụng cho thành phần gốc, đảm bảo giao diện nhất quán với Lightning Design System (LDS) và cho phép tùy chỉnh giao diện mà không ảnh hưởng đến các thành phần khác."
        },
        {
            "question": "Vai trò của tệp documentation trong một Aura Component là gì?",
            "answer": "Tệp documentation (tùy chọn) cung cấp tài liệu chi tiết về mục đích, cách sử dụng, các thuộc tính, sự kiện, và ví dụ của Aura Component, giúp người phát triển hiểu rõ và tái sử dụng thành phần một cách hiệu quả, thường được viết dưới dạng markdown hoặc HTML."
        },
        {
            "question": "Làm cách nào để tạo một Aura Component sử dụng Developer Console?",
            "answer": "Mở Developer Console trong Salesforce, chọn 'File' > 'New' > 'Lightning Component', nhập tên thành phần (ví dụ: `myComponent`), sau đó tạo các tệp `.cmp` (markup), `.js` (controller/helper), và `.css` (style), định nghĩa logic và giao diện, rồi lưu và triển khai trong tổ chức."
        },
        {
            "question": "Làm cách nào để triển khai một Aura Component?",
            "answer": "Triển khai Aura Component bằng cách sử dụng Developer Console để phát triển, sau đó đẩy mã nguồn lên tổ chức Salesforce thông qua Change Sets, Salesforce CLI (`sfdx force:source:push`), hoặc hệ thống kiểm soát phiên bản (như Git). Đảm bảo kiểm tra trong sandbox trước khi triển khai lên production."
        },
        {
            "question": "Những loại thuộc tính khác nhau trong Aura Components là gì?",
            "answer": "Aura Components hỗ trợ các loại thuộc tính bao gồm: (1) **Nguyên thủy**: String, Integer, Boolean; (2) **Mảng**: String[], Object[]; (3) **Bộ sưu tập**: List, Map, Set; (4) **Đối tượng**: đối tượng tiêu chuẩn/tùy chỉnh (như Account, Contact__c); (5) **Lớp Apex tùy chỉnh**; và (6) **Loại khung**: Aura.Component, Aura.Component[], Aura.Action, cho phép linh hoạt trong quản lý dữ liệu."
        },
        {
            "question": "Làm cách nào để liên kết dữ liệu trong Aura Components?",
            "answer": "Liên kết dữ liệu trong Aura Components bằng cách sử dụng `{!v.attribute}` cho liên kết hai chiều (thường dùng trong input), hoặc `{v.attribute}` cho liên kết một chiều (hiển thị chỉ đọc), đảm bảo dữ liệu từ controller được tự động cập nhật trên giao diện mà không cần thao tác DOM thủ công."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu giữa các thành phần trong Aura?",
            "answer": "Truyền dữ liệu bằng: (1) **Thuộc tính**: định nghĩa thuộc tính trong thành phần con với `<aura:attribute>`, truyền giá trị từ thành phần cha; (2) **Sự kiện**: phát sự kiện tùy chỉnh từ con, cha xử lý qua `<aura:handler>`; (3) **Lightning Data Service (LDS)**: dùng để chia sẻ dữ liệu chung giữa các thành phần một cách hiệu quả."
        },
        {
            "question": "Những loại sự kiện khác nhau trong Aura Components là gì?",
            "answer": "Aura Components hỗ trợ hai loại sự kiện chính: (1) **Sự kiện thành phần (Component Event)**: dùng trong cấu trúc cha-con, phát từ con và xử lý ở cha; (2) **Sự kiện ứng dụng (Application Event)**: dùng cho mô hình publish-subscribe, phát từ bất kỳ thành phần nào và xử lý trên toàn ứng dụng qua `<aura:handler>`."
        },
        {
            "question": "Làm cách nào để tạo và xử lý sự kiện thành phần trong Aura Components?",
            "answer": "Tạo sự kiện thành phần bằng thẻ `<aura:event type=\"COMPONENT\">`, định nghĩa trong tệp `.evt`. Phát sự kiện từ controller con qua `component.getEvent('eventName').setParams({data: value}).fire()`. Xử lý trong thành phần cha bằng `<aura:handler event=\"c:EventName\" action=\"{!c.handleEvent}\"/>`."
        },
        {
            "question": "Làm cách nào để sử dụng sự kiện ứng dụng để giao tiếp giữa các thành phần?",
            "answer": "Định nghĩa sự kiện ứng dụng bằng `<aura:event type=\"APPLICATION\">`, phát từ bất kỳ thành phần nào qua `component.getEvent('eventName').fire()`. Các thành phần khác đăng ký handler qua `<aura:handler event=\"c:EventName\" action=\"{!c.handleEvent}\"/>` để xử lý sự kiện trên toàn ứng dụng."
        },
        {
            "question": "Vai trò của caching trong Aura Components là gì?",
            "answer": "Caching trong Aura Components lưu trữ kết quả của các cuộc gọi server (như Apex hoặc LDS) trong bộ nhớ tạm, giảm số lượng yêu cầu đến server, cải thiện hiệu suất, và đảm bảo dữ liệu được truy xuất nhanh hơn cho các tương tác lặp lại."
        },
        {
            "question": "Làm cách nào để giảm thao tác DOM trong Aura Components?",
            "answer": "Giảm thao tác DOM bằng cách sử dụng liên kết dữ liệu (`v.` hoặc `!v.`) để tự động cập nhật giao diện, tránh sử dụng `component.set()` hoặc truy cập DOM trực tiếp qua JavaScript, và tối ưu hóa logic trong helper để giảm số lần render không cần thiết."
        },
        {
            "question": "Những thực hành tốt nhất cho việc tối ưu hóa hiệu suất của Aura Components là gì?",
            "answer": "Thực hành bao gồm: giảm thao tác DOM, sử dụng liên kết dữ liệu hiệu quả, áp dụng caching cho dữ liệu tĩnh, batching các cuộc gọi server, tránh re-render không cần thiết, và sử dụng LDS để quản lý dữ liệu một cách tối ưu."
        },
        {
            "question": "Vai trò của Lightning Locker trong Aura Component là gì?",
            "answer": "Lightning Locker cung cấp một sandbox bảo mật, tách biệt namespace giữa các Aura Components, ngăn chặn truy cập trái phép vào DOM hoặc dữ liệu của các thành phần khác, đảm bảo an toàn và tuân thủ chính sách bảo mật của Salesforce."
        },
        {
            "question": "Những giới hạn nào mà Lightning Locker áp đặt trên Aura Components?",
            "answer": "Lightning Locker hạn chế truy cập trực tiếp vào DOM của các thành phần khác, giới hạn sử dụng các API JavaScript không được phép, và yêu cầu sử dụng các phương thức an toàn của Aura để tương tác, đảm bảo tính cô lập và bảo mật giữa các thành phần."
        },
        {
            "question": "Làm cách nào để xử lý quốc tế hóa trong Aura Component?",
            "answer": "Xử lý quốc tế hóa bằng cách sử dụng `$Label` để truy cập Custom Labels trong Salesforce, hỗ trợ đa ngôn ngữ qua Translation Workbench, và định dạng ngày, số, tiền tệ theo địa phương người dùng thông qua các hàm JavaScript hoặc thành phần tiêu chuẩn của Salesforce."
        },
        {
            "question": "Làm cách nào để hiển thị ngày và số theo định dạng của địa phương trong Aura Components?",
            "answer": "Sử dụng các hàm định dạng của JavaScript như `toLocaleDateString()` hoặc `$Locale` trong Salesforce để hiển thị ngày và số theo địa phương người dùng, kết hợp với Custom Labels hoặc thành phần tiêu chuẩn như `<ui:outputDate>` để đảm bảo định dạng chính xác."
        },
        {
            "question": "Tại sao nên chuyển từ Aura Components sang LWC?",
            "answer": "Chuyển sang LWC vì nó sử dụng tiêu chuẩn web hiện đại (Web Components, ES6), có hiệu suất cao hơn, nhỏ gọn hơn, dễ tích hợp với các công nghệ bên ngoài, và là tương lai phát triển của Salesforce, trong khi Aura dần bị ngừng hỗ trợ lâu dài."
        },
        {
            "question": "Chu trình sống của một Aura Component là gì?",
            "answer": "Chu trình sống của Aura Component bao gồm: (1) **Khởi tạo**: gọi `doInit` trong controller sau khi component được tạo; (2) **Render**: hiển thị giao diện; (3) **Sự kiện**: xử lý các sự kiện người dùng; (4) **Hủy**: cleanup tài nguyên khi component bị xóa qua `unrender` hoặc `destroy`. Các phương thức như `render`, `afterRender` có thể được tùy chỉnh qua custom renderer."
        },
        {
            "question": "Làm cách nào để xử lý lỗi và ngoại lệ trong Aura Components?",
            "answer": "Xử lý lỗi bằng cách sử dụng `try-catch` trong JavaScript (controller/helper) để bắt ngoại lệ từ các cuộc gọi Apex hoặc logic client-side, hiển thị thông báo lỗi qua `<ui:message>` hoặc `<lightning:notification>`, và ghi log lỗi qua `console.log` hoặc `$A.log` để debug."
        },
        {
            "question": "Làm cách nào để tích hợp thư viện bên ngoài trong Aura Components?",
            "answer": "Tích hợp thư viện bên ngoài bằng cách sử dụng thẻ `<ltng:require>` trong markup để tải các tệp JavaScript/CSS (như jQuery, Chart.js), đảm bảo thư viện tương thích với Lightning Locker, và sử dụng chúng trong controller hoặc helper để mở rộng chức năng."
        },
        {
            "question": "Những cách để tạo sự kiện tùy chỉnh trong Aura Components là gì?",
            "answer": "Tạo sự kiện tùy chỉnh bằng cách định nghĩa `<aura:event type=\"COMPONENT\"|\"APPLICATION\">` trong tệp `.evt`, phát sự kiện từ controller/helper qua `component.getEvent('eventName').setParams({data}).fire()`, và xử lý trong các thành phần khác qua `<aura:handler>`."
        },
        {
            "question": "Làm cách nào để sử dụng thuộc tính Aura hiệu quả?",
            "answer": "Sử dụng thuộc tính Aura hiệu quả bằng cách định nghĩa `<aura:attribute>` với loại dữ liệu phù hợp (String, List, Object), đặt `required` nếu cần, sử dụng giá trị mặc định (`default`), và liên kết dữ liệu qua `{!v.attribute}` để đảm bảo cập nhật giao diện động."
        },
        {
            "question": "Làm cách nào để xử lý ngôn ngữ RTL (từ phải sang trái) trong Aura Components?",
            "answer": "Xử lý ngôn ngữ RTL bằng cách sử dụng `@if(isRTL)` trong CSS để áp dụng phong cách phù hợp, kiểm tra `$Locale.isRTL` trong JavaScript, và sử dụng thuộc tính `@noflip` để ngăn chặn tự động chuyển đổi nếu không cần thiết, đảm bảo giao diện hỗ trợ các ngôn ngữ như Arabic, Hebrew."
        },
        {
            "question": "Làm cách nào để định nghĩa một thuộc tính danh sách trong Aura Component?",
            "answer": "Định nghĩa thuộc tính danh sách bằng cách sử dụng `<aura:attribute name=\"myList\" type=\"List\" default=\"[]\"/>` trong markup, cho phép lưu trữ và thao tác với mảng dữ liệu như danh sách bản ghi hoặc số liệu, dễ dàng lặp qua với `<aura:iteration>`."
        },
        {
            "question": "Làm cách nào để lặp qua một thuộc tính danh sách trong markup?",
            "answer": "Sử dụng `<aura:iteration items=\"{!v.myList}\" var=\"item\">` để lặp qua danh sách `myList` trong markup, hiển thị mỗi `item` bên trong thẻ, ví dụ: `<ui:outputText value=\"{!item.Name}\"/>`, tạo danh sách động trên giao diện."
        },
        {
            "question": "Làm cách nào để xử lý thay đổi của một thuộc tính danh sách và cập nhật UI tương ứng?",
            "answer": "Xử lý thay đổi bằng cách sử dụng liên kết dữ liệu `{!v.myList}` để tự động cập nhật UI khi danh sách thay đổi, đảm bảo `myList` được gán lại trong controller/helper, và sử dụng `component.set('v.myList', newList)` để kích hoạt re-render nếu cần."
        },
        {
            "question": "Sự khác biệt giữa phát sự kiện và xuất bản sự kiện là gì?",
            "answer": "Phát sự kiện (fire event) gửi sự kiện đến các thành phần cha hoặc liên quan trực tiếp qua `<aura:handler>`, trong khi xuất bản sự kiện (publish event) sử dụng sự kiện ứng dụng (`<aura:applicationEvent>`) để gửi đến toàn bộ ứng dụng, cho phép nhiều thành phần khác nhau xử lý mà không cần kết nối trực tiếp."
        },
        {
            "question": "Làm cách nào để xử lý tham số sự kiện trong một handler?",
            "answer": "Trong handler sự kiện (controller), tham số sự kiện được truyền vào phương thức dưới dạng đối tượng `event`. Truy cập dữ liệu qua `event.getParams()` hoặc `event.getParam('key')` để lấy thông tin như giá trị hoặc trạng thái, xử lý logic dựa trên dữ liệu này."
        },
        {
            "question": "Khung xử lý re-rendering của component như thế nào?",
            "answer": "Aura Framework tự động re-render component khi thuộc tính liên kết dữ liệu (`v.` hoặc `!v.`) thay đổi, hoặc khi có sự kiện yêu cầu cập nhật giao diện. Quá trình này sử dụng cơ chế reactive, giảm thiểu thao tác DOM thủ công, nhưng cần tránh thay đổi không cần thiết để tối ưu hiệu suất."
        },
        {
            "question": "Khi nào thì một component được re-render?",
            "answer": "Component được re-render khi thuộc tính liên kết dữ liệu thay đổi (qua `component.set()`), có sự kiện yêu cầu cập nhật (như `force:refreshView`), hoặc khi logic trong controller/helper kích hoạt thay đổi giao diện, đảm bảo UI phản ánh đúng trạng thái dữ liệu hiện tại."
        },
        {
            "question": "Vai trò của `$User` trong Aura Components là gì?",
            "answer": "Biến toàn cục `$User` trong Aura Components cung cấp thông tin về người dùng hiện tại, như `Id`, `Name`, `ProfileId`, giúp kiểm tra quyền, hiển thị dữ liệu tùy chỉnh, hoặc thực hiện logic dựa trên vai trò hoặc thông tin người dùng mà không cần truy vấn thêm."
        },
        {
            "question": "Làm cách nào để định dạng ngày dựa trên địa phương của người dùng?",
            "answer": "Sử dụng các hàm JavaScript như `Date.toLocaleDateString()` hoặc `$Locale` trong Salesforce để định dạng ngày theo khu vực người dùng, kết hợp với Custom Labels để hiển thị nhãn phù hợp, đảm bảo giao diện thân thiện với địa phương."
        },
        {
            "question": "Làm cách nào để sử dụng `$Locale` trong Aura Components?",
            "answer": "Biến `$Locale` cung cấp thông tin địa phương của người dùng (như ngôn ngữ, định dạng ngày, số), được sử dụng trong markup hoặc controller để định dạng dữ liệu (ví dụ: `{!$Locale.currency}`), đảm bảo hiển thị phù hợp với khu vực người dùng."
        },
        {
            "question": "Lợi ích của LWC so với Aura Components là gì?",
            "answer": "LWC có hiệu suất cao hơn nhờ sử dụng Web Components và ES6, nhỏ gọn hơn về tài nguyên, dễ tích hợp với các công nghệ web hiện đại, và được Salesforce ưu tiên phát triển lâu dài, trong khi Aura dần bị ngừng hỗ trợ."
        },
        {
            "question": "Trong trường hợp nào bạn vẫn chọn sử dụng Aura Components thay vì LWC?",
            "answer": "Chọn Aura nếu bạn có mã nguồn hiện tại sử dụng Aura, cần duy trì tính tương thích với các thành phần cũ, hoặc yêu cầu các tính năng cụ thể của Aura chưa có trong LWC, như custom renderer hoặc một số API cũ mà LWC chưa hỗ trợ hoàn toàn."
        },
        {
            "question": "Làm cách nào để di chuyển từ Aura Components sang LWC?",
            "answer": "Di chuyển bằng cách sử dụng hướng dẫn của Salesforce, phân tích mã Aura hiện tại, tái cấu trúc logic trong JavaScript/LWC, chuyển đổi markup HTML, và sử dụng `@wire` hoặc LDS để thay thế các cuộc gọi Apex, đảm bảo kiểm tra kỹ lưỡng trong quá trình chuyển đổi."
        },
        {
            "question": "Custom renderer trong Aura Components là gì?",
            "answer": "Custom renderer là một tệp JavaScript (`renderer.js`) trong Aura Component, cho phép tùy chỉnh quá trình render (như `render`, `afterRender`, `unrender`) để thao tác trực tiếp với DOM, mở rộng giao diện hoặc thêm logic trình bày phức tạp mà framework mặc định không hỗ trợ."
        },
        {
            "question": "Làm cách nào để sử dụng custom renderer để sửa đổi DOM của component?",
            "answer": "Tạo tệp `renderer.js`, định nghĩa các phương thức như `render()` để tạo DOM tùy chỉnh, `afterRender()` để thao tác sau khi render, và `unrender()` để dọn dẹp, sử dụng `component.getElement()` để truy cập và chỉnh sửa DOM, tuân thủ Lightning Locker."
        },
        {
            "question": "Các phương thức vòng đời khác nhau trong custom renderer là gì?",
            "answer": "Các phương thức vòng đời chính trong custom renderer bao gồm: `render()` (tạo giao diện), `afterRender()` (thao tác sau khi render), `unrender()` (dọn dẹp trước khi hủy), và `rerender()` (cập nhật giao diện khi có thay đổi), giúp tùy chỉnh toàn bộ chu trình sống của component."
        },
        {
            "question": "Làm cách nào để xử lý sự kiện `init` trong một component?",
            "answer": "Xử lý sự kiện `init` bằng cách định nghĩa `<aura:handler name=\"init\" value=\"{!this}\" action=\"{!c.doInit}\"/>` trong markup, và tạo phương thức `doInit` trong controller để khởi tạo dữ liệu hoặc thực hiện logic ban đầu sau khi component được tạo."
        },
        {
            "question": "Mục đích của hàm `doInit()` là gì?",
            "answer": "Hàm `doInit()` trong controller Aura Component được gọi tự động sau khi component được khởi tạo, dùng để tải dữ liệu ban đầu, gọi Apex, hoặc thiết lập trạng thái giao diện, đảm bảo component sẵn sàng khi hiển thị."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong các hành động server-side?",
            "answer": "Xử lý lỗi trong hành động server-side bằng cách sử dụng callback trong `$A.enqueueAction`, kiểm tra `action.getState()` (SUCCESS hoặc ERROR), bắt ngoại lệ trong Apex, và hiển thị thông báo lỗi qua `<ui:message>` hoặc `console.error` trong JavaScript."
        },
        {
            "question": "Làm cách nào để hiển thị thông báo toast trong Aura Components?",
            "answer": "Hiển thị thông báo toast bằng cách sử dụng thành phần `<lightning:notification>` hoặc gọi API `$A.get('e.force:showToast')` từ controller/helper, cấu hình thuộc tính như `title`, `message`, `type` (success, error, warning) để thông báo cho người dùng."
        },
        {
            "question": "Làm cách nào để sử dụng Lightning Utility Bar trong Aura Components?",
            "answer": "Sử dụng Lightning Utility Bar bằng cách định nghĩa Aura Component, đăng ký nó trong Utility Bar qua Setup > Utility Bar, và cấu hình hành động (như mở component trên thanh công cụ), đảm bảo component hỗ trợ tương tác với người dùng qua sự kiện hoặc API."
        },
        {
            "question": "Làm cách nào để xử lý tải lên tệp trong Aura Components?",
            "answer": "Xử lý tải lên tệp bằng cách sử dụng `<lightning:input type=\"file\">` hoặc `<lightning:fileUpload>`, liên kết với controller để xử lý dữ liệu qua JavaScript, sau đó gọi Apex để lưu tệp vào `Attachment` hoặc `ContentVersion`, kiểm tra loại/kích thước tệp để đảm bảo an toàn."
        },
        {
            "question": "Làm cách nào để sử dụng Lightning Data Service (LDS) trong Aura Components?",
            "answer": "Sử dụng LDS trong Aura Component bằng cách sử dụng `<force:recordData>` hoặc `<aura:lds>` trong markup, cấu hình `aura:id`, `recordId`, và `fields` để truy xuất dữ liệu bản ghi từ Salesforce, lợi dụng caching và xử lý tự động của LDS để tăng hiệu suất."
        },
        {
            "question": "Sự khác biệt giữa LDS và các truy vấn SOQL truyền thống là gì?",
            "answer": "LDS cung cấp dữ liệu theo thời gian thực, tự động cập nhật khi bản ghi thay đổi, sử dụng cơ chế caching và giảm tải server, trong khi SOQL là truy vấn tĩnh, yêu cầu viết mã Apex để thực thi, không tự động cập nhật, và cần quản lý thủ công."
        },
        {
            "question": "Làm cách nào để xử lý phân trang trong Aura Components?",
            "answer": "Xử lý phân trang bằng cách sử dụng logic trong controller/helper với `offset` và `limit` trong SOQL, hiển thị dữ liệu trong `<aura:iteration>` hoặc `<lightning:datatable>`, và cung cấp nút điều hướng (prev/next) để người dùng chuyển trang, tối ưu hóa cho dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để triển khai sắp xếp và lọc trong danh sách bản ghi?",
            "answer": "Triển khai sắp xếp và lọc bằng cách sử dụng `ORDER BY` và `WHERE` trong SOQL, tích hợp logic trong controller để xử lý yêu cầu người dùng qua `<lightning:input>` hoặc `<lightning:select>`, và cập nhật giao diện qua liên kết dữ liệu hoặc re-render."
        },
        {
            "question": "Làm cách nào để sử dụng thành phần `lightning:datatable`?",
            "answer": "Sử dụng `<lightning:datatable>` bằng cách định nghĩa `columns` (các cột với label, fieldName) và `data` (danh sách bản ghi) trong controller, thêm các thuộc tính như `keyField`, `onrowaction` để xử lý tương tác, hiển thị dữ liệu bảng động và tương tác."
        },
        {
            "question": "Làm cách nào để tùy chỉnh thành phần `lightning:datatable`?",
            "answer": "Tùy chỉnh `<lightning:datatable>` bằng cách cấu hình `columns` với các thuộc tính như `type` (text, date, button), `sortable`, `editable`, thêm event handler như `oncellchange` hoặc `onrowaction` để xử lý hành động, và sử dụng CSS để điều chỉnh giao diện."
        },
        {
            "question": "Làm cách nào để xử lý các tập dữ liệu lớn trong `lightning:datatable`?",
            "answer": "Xử lý tập dữ liệu lớn bằng cách sử dụng phân trang (`pageSize`, `offset`), lazy loading (tải dữ liệu theo nhu cầu), hoặc áp dụng Batch Apex để truy xuất dữ liệu bất đồng bộ, đảm bảo hiệu suất và giảm tải server khi hiển thị trong `<lightning:datatable>`."
        },
        {
            "question": "Làm cách nào để sử dụng thành phần `lightning:accordion`?",
            "answer": "Sử dụng `<lightning:accordion>` bằng cách định nghĩa các `sections` với `label` và `content`, cấu hình `activeSectionName` để mở/khóa phần, và sử dụng sự kiện như `onsectiontoggle` để xử lý tương tác, tạo giao diện gấp gọn cho nội dung phức tạp."
        },
        {
            "question": "Làm cách nào để sử dụng thành phần `lightning:tabset`?",
            "answer": "Sử dụng `<lightning:tabset>` bằng cách định nghĩa các `tabs` với `label` và `content`, cấu hình `activeTabName` để chọn tab mặc định, và thêm event handler như `ontabchange` để xử lý thay đổi tab, tạo giao diện tabbed linh hoạt."
        },
        {
            "question": "Làm cách nào để tạo các chủ đề tùy chỉnh trong Aura Components?",
            "answer": "Tạo chủ đề tùy chỉnh bằng cách định nghĩa CSS trong tệp `.css`, sử dụng selector `:host` để áp dụng phong cách cho thành phần gốc, tích hợp với Lightning Design System (LDS) để đảm bảo nhất quán, và tùy chỉnh màu sắc, font, hoặc layout theo yêu cầu thương hiệu."
        },
        {
            "question": "Làm cách nào để xử lý thiết kế đáp ứng trong Aura Components?",
            "answer": "Xử lý thiết kế đáp ứng bằng cách sử dụng media queries trong CSS, áp dụng các lớp của Lightning Design System (LDS) như `slds-grid` hoặc `slds-wrap`, và đảm bảo giao diện tự động điều chỉnh theo kích thước màn hình (desktop, mobile) để tối ưu hóa trải nghiệm người dùng."
        },
        {
            "question": "Vai trò của thành phần `lightning:container` là gì?",
            "answer": "Thành phần `<lightning:container>` trong Aura Component cung cấp một khung chứa để nhúng các thành phần khác (như VisualForce, HTML5), hỗ trợ tổ chức giao diện phức tạp, tích hợp nội dung bên ngoài, và đảm bảo tương thích với Lightning Experience."
        },
        {
            "question": "Làm cách nào để sử dụng `lightning:overlayLibrary` để tạo modal?",
            "answer": "Sử dụng `<lightning:overlayLibrary>` bằng cách gọi phương thức như `showCustomModal()` từ controller/helper, định nghĩa nội dung modal (title, body, footer), và sử dụng `close()` để đóng modal, tạo cửa sổ popup tương tác trong Aura Component."
        },
        {
            "question": "Làm cách nào để xử lý điều hướng bàn phím trong Aura Components cho khả năng tiếp cận?",
            "answer": "Xử lý điều hướng bàn phím bằng cách sử dụng thuộc tính `tabindex`, đảm bảo các phần tử có thể tập trung qua `Tab`, và áp dụng ARIA attributes (như `aria-label`, `aria-hidden`) để hỗ trợ công cụ đọc màn hình, tuân thủ WCAG cho người khuyết tật."
        },
        {
            "question": "Làm cách nào để đảm bảo component của bạn tương thích với công cụ đọc màn hình?",
            "answer": "Đảm bảo tương thích bằng cách sử dụng ARIA attributes (như `role`, `aria-describedby`), cung cấp nhãn rõ ràng cho các phần tử, kiểm tra với công cụ như WAVE hoặc NVDA, và đảm bảo giao diện có thể điều hướng bằng bàn phím để hỗ trợ người dùng khuyết tật."
        },
        {
            "question": "Các thuộc tính ARIA là gì và làm cách nào để sử dụng chúng trong Aura Components?",
            "answer": "ARIA (Accessible Rich Internet Applications) attributes là các thuộc tính HTML5 giúp mô tả vai trò, trạng thái, và thuộc tính của phần tử cho công cụ đọc màn hình. Sử dụng chúng trong markup Aura, ví dụ: `<div aria-label=\"Navigation Menu\" role=\"navigation\">`, để tăng khả năng tiếp cận."
        },
        {
            "question": "Làm cách nào để kiểm tra khả năng tiếp cận trong Aura Components?",
            "answer": "Kiểm tra khả năng tiếp cận bằng cách sử dụng công cụ như Wave, Lighthouse trong Chrome DevTools, hoặc JAWS/NVDA để mô phỏng công cụ đọc màn hình, đảm bảo component tuân thủ WCAG 2.0 và cung cấp trải nghiệm tốt cho người khuyết tật."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu từ một component cha đến component con sử dụng thuộc tính?",
            "answer": "Truyền dữ liệu bằng cách định nghĩa `<aura:attribute>` trong thành phần con với `type` phù hợp, sau đó truyền giá trị từ thành phần cha qua thuộc tính trong markup, ví dụ: `<c:childComponent myAttribute=\"{!v.data}\" />`."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu từ component con đến component cha sử dụng sự kiện?",
            "answer": "Component con phát sự kiện tùy chỉnh qua `component.getEvent('eventName').setParams({data: value}).fire()`, component cha đăng ký handler bằng `<aura:handler event=\"c:EventName\" action=\"{!c.handleEvent}\"/>` để nhận và xử lý dữ liệu."
        },
        {
            "question": "Sự khác biệt giữa thuộc tính công khai và thuộc tính riêng tư là gì?",
            "answer": "Thuộc tính công khai (`<aura:attribute access=\"public\">`) có thể được truy cập và chỉnh sửa từ bên ngoài component (như thành phần cha), trong khi thuộc tính riêng tư (`access=\"private\"`) chỉ được sử dụng bên trong component, giúp bảo mật và cô lập dữ liệu."
        },
        {
            "question": "Làm cách nào để làm cho một thuộc tính là bắt buộc?",
            "answer": "Định nghĩa thuộc tính trong `<aura:attribute>` với `required=\"true\"`, đảm bảo thành phần cha phải cung cấp giá trị cho thuộc tính này khi sử dụng, tránh lỗi khi không có dữ liệu."
        },
        {
            "question": "Làm cách nào để đặt giá trị mặc định cho một thuộc tính?",
            "answer": "Sử dụng thuộc tính `default` trong `<aura:attribute>`, ví dụ: `<aura:attribute name=\"myAttribute\" type=\"String\" default=\"Default Value\" />`, để thiết lập giá trị ban đầu cho thuộc tính khi không có giá trị được truyền vào."
        },
        {
            "question": "Làm cách nào để phát một sự kiện thành phần?",
            "answer": "Phát sự kiện thành phần bằng cách sử dụng `component.getEvent('eventName').setParams({key: value}).fire()` từ controller/helper, đảm bảo sự kiện đã được định nghĩa trong tệp `.evt` với `type=\"COMPONENT\"`."
        },
        {
            "question": "Làm cách nào để xử lý một sự kiện thành phần trong component cha?",
            "answer": "Xử lý sự kiện bằng cách sử dụng `<aura:handler event=\"c:EventName\" action=\"{!c.handleEvent}\"/>` trong markup của component cha, định nghĩa phương thức `handleEvent` trong controller để nhận và xử lý dữ liệu từ sự kiện."
        },
        {
            "question": "Event bubbling trong Aura Components là gì?",
            "answer": "Event bubbling là cơ chế trong Aura Component mà sự kiện được truyền từ thành phần con lên thành phần cha và các cấp cha khác theo thứ tự phân cấp, cho phép xử lý sự kiện ở nhiều cấp độ mà không cần định nghĩa riêng biệt."
        },
        {
            "question": "Làm cách nào để ngăn chặn sự lan truyền sự kiện?",
            "answer": "Ngăn chặn sự lan truyền bằng cách sử dụng `event.stopPropagation()` trong handler sự kiện của JavaScript, đảm bảo sự kiện không tiếp tục truyền lên các thành phần cha, kiểm soát hành vi xử lý một cách chính xác."
        },
        {
            "question": "Làm cách nào để tạo và sử dụng sự kiện ứng dụng?",
            "answer": "Tạo sự kiện ứng dụng bằng `<aura:event type=\"APPLICATION\">`, phát từ bất kỳ component nào qua `component.getEvent('eventName').fire()`, và các component khác đăng ký handler qua `<aura:handler event=\"c:EventName\" action=\"{!c.handleEvent}\"/>` để xử lý trên toàn ứng dụng."
        },
        {
            "question": "Làm cách nào để giảm số lượng cuộc gọi server trong Aura Components?",
            "answer": "Giảm cuộc gọi server bằng cách sử dụng batching (kết hợp nhiều hành động thành một cuộc gọi), áp dụng caching cho dữ liệu tĩnh, sử dụng LDS để quản lý dữ liệu chung, và tối ưu hóa logic trong client để giảm phụ thuộc vào server."
        },
        {
            "question": "Batching trong Aura là gì, và nó giúp cải thiện hiệu suất như thế nào?",
            "answer": "Batching trong Aura là kỹ thuật kết hợp nhiều hành động server-side (như gọi Apex) thành một yêu cầu duy nhất, giảm số lượng request đến server, cải thiện hiệu suất bằng cách giảm độ trễ và tối ưu hóa tài nguyên hệ thống."
        },
        {
            "question": "Làm cách nào để sử dụng Lightning Design System (LDS) trong Aura Components?",
            "answer": "Sử dụng LDS bằng cách áp dụng các lớp CSS như `slds-grid`, `slds-button`, hoặc `slds-card` trong markup và style, đảm bảo giao diện nhất quán với Lightning Experience, và tận dụng các thành phần tiêu chuẩn như `<lightning:button>`."
        },
        {
            "question": "Làm cách nào để đảm bảo Aura Component tương thích với Lightning Experience?",
            "answer": "Đảm bảo tương thích bằng cách sử dụng Lightning Design System (LDS) cho styling, kiểm tra giao diện trên Lightning App Builder, sử dụng các thành phần tiêu chuẩn như `<lightning:recordViewForm>`, và tối ưu hóa hiệu suất để phù hợp với nền tảng Lightning."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu lớn trong Aura Components?",
            "answer": "Xử lý dữ liệu lớn bằng cách sử dụng phân trang với `<aura:iteration>` và logic trong controller, áp dụng Batch Apex để truy xuất dữ liệu bất đồng bộ, và sử dụng LDS để quản lý caching, đảm bảo hiệu suất và giảm tải server."
        },
        {
            "question": "Làm cách nào để tạo một giao diện đáp ứng trong Aura Components?",
            "answer": "Tạo giao diện đáp ứng bằng cách sử dụng media queries trong CSS, áp dụng các lớp của Lightning Design System (LDS) như `slds-responsive`, và kiểm tra giao diện trên nhiều kích thước màn hình (desktop, tablet, mobile) để đảm bảo trải nghiệm tốt."
        }
    ],
    "SFDC’s Lightning Web Component": [
        {
            "question": "Lightning Web Component (LWC) là gì?",
            "answer": "Lightning Web Component (LWC) là một khung phát triển giao diện người dùng hiện đại trong Salesforce, dựa trên các tiêu chuẩn web (HTML, JavaScript ES6, CSS) và Web Components, cho phép xây dựng các thành phần giao diện tái sử dụng, hiệu suất cao, và dễ tích hợp với nền tảng Lightning Experience."
        },
        {
            "question": "Sự khác biệt giữa LWC và Aura Component là gì?",
            "answer": "LWC sử dụng các tiêu chuẩn web hiện đại như Web Components, ES6, và Shadow DOM, mang lại hiệu suất cao, nhỏ gọn, và dễ tích hợp với công nghệ bên ngoài, trong khi Aura Component dựa trên công nghệ cũ hơn, có hiệu suất thấp hơn, và đang dần bị Salesforce ngừng hỗ trợ dài hạn."
        },
        {
            "question": "Những tính năng chính của LWC là gì?",
            "answer": "Tính năng chính của LWC bao gồm: sử dụng tiêu chuẩn web (HTML, JavaScript, CSS), hỗ trợ Web Components và Shadow DOM để đóng gói giao diện, liên kết dữ liệu qua Lightning Data Service (LDS) để truy xuất dữ liệu Salesforce, dễ kiểm tra với `@salesforce/lwc-jest`, và hiệu suất cao nhờ tối ưu hóa re-rendering."
        },
        {
            "question": "Làm cách nào để thiết lập môi trường phát triển cho LWC?",
            "answer": "Thiết lập môi trường bằng cách cài đặt Salesforce CLI (`npm install -g sfdx`), tích hợp Visual Studio Code với extension Salesforce, tạo dự án Salesforce DX (`sfdx force:project:create`), kết nối với tổ chức Salesforce (`sfdx force:auth:login`), và sử dụng lệnh LWC để quản lý thành phần."
        },
        {
            "question": "Làm cách nào để tạo một LWC cơ bản?",
            "answer": "Tạo LWC cơ bản bằng cách chạy lệnh `sfdx lwc:create -n MyComponent` trong dự án Salesforce DX, tạo các tệp `mycomponent.js` (module JavaScript), `mycomponent.html` (mẫu HTML), và `mycomponent.css` (tệp CSS), sau đó định nghĩa logic, giao diện, và phong cách."
        },
        {
            "question": "Cấu trúc của một LWC là gì?",
            "answer": "Cấu trúc LWC bao gồm: (1) **Tệp JavaScript (.js)**: chứa logic và thuộc tính với decorators như `@api`, `@track`, `@wire`; (2) **Tệp HTML (.html)**: định nghĩa giao diện với các phần tử HTML và bindings; (3) **Tệp CSS (.css)**: định nghĩa phong cách, sử dụng `:host` và Shadow DOM để đóng gói."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu trong LWC?",
            "answer": "Xử lý dữ liệu trong LWC bằng cách định nghĩa thuộc tính trong module JavaScript (sử dụng `@api` cho công khai, `@track` cho theo dõi thay đổi), liên kết dữ liệu với giao diện qua `{this.property}` trong HTML, và sử dụng Lightning Data Service (LDS) hoặc Apex để truy xuất/trao đổi dữ liệu từ Salesforce."
        },
        {
            "question": "Làm cách nào để giao tiếp giữa các thành phần trong LWC?",
            "answer": "Giao tiếp giữa các thành phần LWC bằng cách sử dụng: (1) **Sự kiện tùy chỉnh**: phát sự kiện qua `this.dispatchEvent(new CustomEvent('eventName', { detail: data }))`, thành phần cha xử lý qua listener; (2) **Thuộc tính `@api`**: truyền dữ liệu từ cha đến con; (3) **Lightning Message Service (LMS)**: giao tiếp giữa các thành phần độc lập."
        },
        {
            "question": "Vai trò của Dịch vụ Dữ liệu Lightning (LDS) trong LWC là gì?",
            "answer": "Lightning Data Service (LDS) trong LWC cung cấp một cách thống nhất để truy cập, thao tác, và chia sẻ dữ liệu Salesforce, sử dụng cơ chế caching để tăng hiệu suất, tự động xử lý lỗi và cập nhật dữ liệu theo thời gian thực, giảm nhu cầu viết mã Apex thủ công."
        },
        {
            "question": "Làm cách nào để triển khai một LWC đến tổ chức Salesforce của bạn?",
            "answer": "Triển khai LWC bằng cách sử dụng Salesforce CLI với lệnh `sfdx force:source:deploy -p force-app` từ dự án Salesforce DX, đẩy các tệp LWC (`.js`, `.html`, `.css`) lên tổ chức, đảm bảo kiểm tra trong sandbox trước khi triển khai lên production."
        },
        {
            "question": "Sự khác biệt giữa LWC và thành phần web truyền thống là gì?",
            "answer": "LWC là thành phần web chuẩn (Web Components) tích hợp sâu với Salesforce, sử dụng LDS để truy xuất dữ liệu, hỗ trợ Shadow DOM để đóng gói, và có các tính năng như `@wire`, `@api` đặc thù, trong khi thành phần web truyền thống không có tích hợp với nền tảng Salesforce và thiếu các công cụ như LDS."
        },
        {
            "question": "Làm cách nào để xử lý styling trong LWC?",
            "answer": "Xử lý styling trong LWC bằng cách tạo tệp `.css` cùng tên với component, sử dụng selector `:host` để áp dụng phong cách cho thành phần gốc, tận dụng Shadow DOM để đóng gói CSS, tránh xung đột với các thành phần khác, và tích hợp Lightning Design System (LDS) để đảm bảo giao diện nhất quán."
        },
        {
            "question": "Vai trò của `@track` decorator trong LWC là gì?",
            "answer": "Decorator `@track` trong LWC được sử dụng để theo dõi thay đổi của thuộc tính hoặc đối tượng phức tạp trong module JavaScript, đảm bảo component tự động re-render khi giá trị thuộc tính thay đổi, tối ưu hóa hiệu suất và giữ giao diện đồng bộ với dữ liệu."
        },
        {
            "question": "Làm cách nào để xử lý sự kiện trong LWC?",
            "answer": "Xử lý sự kiện trong LWC bằng cách định nghĩa handler trong mẫu HTML (ví dụ: `<button onclick={handleClick}>Click</button>`), sau đó thực hiện logic trong phương thức `handleClick` của module JavaScript. Sử dụng `addEventListener` hoặc `@api` để xử lý sự kiện công cộng giữa các thành phần."
        },
        {
            "question": "Dịch vụ Dữ liệu Lightning (LDS) là gì và hoạt động như thế nào với LWC?",
            "answer": "LDS là dịch vụ trong Salesforce cung cấp cách truy cập thống nhất, thao tác dữ liệu bản ghi, sử dụng cơ chế caching để tăng tốc, và tự động xử lý lỗi. Trong LWC, LDS được tích hợp qua `@wire` (như `getRecord`) để liên kết dữ liệu từ Salesforce, đảm bảo cập nhật thời gian thực và giảm tải server."
        },
        {
            "question": "Làm cách nào để triển khai các thay đổi của LWC đến tổ chức Salesforce của bạn?",
            "answer": "Triển khai bằng cách sử dụng `sfdx force:source:deploy` trong dự án Salesforce DX, đẩy các tệp LWC từ thư mục `force-app` lên tổ chức, sau khi kiểm tra trong sandbox, đảm bảo tuân thủ quy trình kiểm soát phiên bản và kiểm tra bảo mật."
        },
        {
            "question": "Mục đích của `@wire` decorator trong LWC là gì?",
            "answer": "Decorator `@wire` trong LWC kết nối thành phần với nguồn dữ liệu Salesforce, như Apex hoặc LDS, để lấy dữ liệu không đồng bộ, tự động cập nhật giao diện khi dữ liệu thay đổi, và quản lý lỗi qua `{data, error}`, giảm nhu cầu viết mã xử lý thủ công."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong LWC?",
            "answer": "Xử lý lỗi trong LWC bằng cách sử dụng `try-catch` trong module JavaScript để bắt ngoại lệ từ các cuộc gọi Apex hoặc logic client-side, hiển thị thông báo lỗi trong mẫu HTML qua `<template if:true={error}>`, hoặc sử dụng `<lightning-toast>` để thông báo cho người dùng."
        },
        {
            "question": "Sự khác biệt giữa một Lightning Web Component và một Aura Component là gì?",
            "answer": "LWC sử dụng tiêu chuẩn web hiện đại (Web Components, ES6, Shadow DOM), có hiệu suất cao hơn, nhỏ gọn hơn, và dễ tích hợp với công nghệ bên ngoài, trong khi Aura Component dựa trên công nghệ cũ, hiệu suất thấp hơn, và đang dần bị Salesforce ngừng hỗ trợ dài hạn."
        },
        {
            "question": "Làm cách nào để tạo một phần tử tùy chỉnh trong LWC?",
            "answer": "Tạo phần tử tùy chỉnh trong LWC bằng cách sử dụng `sfdx lwc:create` để tạo thành phần (ví dụ: `MyComponent`), sử dụng tên như `<c-my-component>` trong HTML, định nghĩa logic trong `.js`, giao diện trong `.html`, và phong cách trong `.css`, tự động đóng gói như Web Component."
        },
        {
            "question": "Tại sao chọn LWC thay vì Aura Components?",
            "answer": "Chọn LWC vì nó sử dụng tiêu chuẩn web hiện đại, có hiệu suất cao hơn nhờ Shadow DOM và Web Components, dễ tích hợp với các thư viện JavaScript bên ngoài, và được Salesforce ưu tiên phát triển dài hạn, giảm chi phí bảo trì so với Aura."
        },
        {
            "question": "LWC có hỗ trợ Shadow DOM không?",
            "answer": "Có, LWC sử dụng Shadow DOM để đóng gói giao diện và phong cách của mỗi thành phần, ngăn chặn xung đột CSS/JavaScript với các thành phần khác, đảm bảo tính biệt lập và bảo mật, đồng thời tối ưu hóa hiệu suất render."
        },
        {
            "question": "Làm cách nào để tạo một LWC mới?",
            "answer": "Tạo LWC mới bằng cách chạy lệnh `sfdx lwc:create -n MyComponent` trong dự án Salesforce DX, tạo các tệp `mycomponent.js`, `mycomponent.html`, và `mycomponent.css` trong thư mục `force-app/main/default/lwc`, sau đó định nghĩa logic và giao diện."
        },
        {
            "question": "Các tệp chính của một LWC là gì?",
            "answer": "Các tệp chính của LWC bao gồm: (1) `mycomponent.js`: chứa logic và thuộc tính với decorators như `@api`, `@track`, `@wire`; (2) `mycomponent.html`: định nghĩa giao diện với HTML và bindings; (3) `mycomponent.css`: chứa phong cách, sử dụng `:host` và Shadow DOM để đóng gói."
        },
        {
            "question": "Làm cách nào để liên kết dữ liệu trong LWC?",
            "answer": "Liên kết dữ liệu trong LWC bằng cách định nghĩa thuộc tính trong `.js` với `@api` (công khai) hoặc `@track` (theo dõi thay đổi), sau đó sử dụng `{this.propertyName}` trong `.html` để hiển thị, đảm bảo giao diện tự động cập nhật khi dữ liệu thay đổi nhờ cơ chế reactive."
        },
        {
            "question": "Vai trò của `@track` decorator trong LWC là gì?",
            "answer": "Decorator `@track` theo dõi thay đổi của thuộc tính hoặc đối tượng phức tạp trong LWC, kích hoạt re-rendering của component khi giá trị thay đổi, đảm bảo giao diện luôn đồng bộ với dữ liệu, nhưng nên sử dụng cẩn thận vì có thể ảnh hưởng hiệu suất nếu lạm dụng."
        },
        {
            "question": "Làm cách nào để phát và xử lý sự kiện tùy chỉnh trong LWC?",
            "answer": "Phát sự kiện tùy chỉnh trong LWC bằng cách sử dụng `this.dispatchEvent(new CustomEvent('eventName', { detail: data }))` trong `.js`, và xử lý trong thành phần khác bằng cách thêm listener trong `.html` (ví dụ: `<template onmyevent={handleEvent}>`), đảm bảo giao tiếp linh hoạt."
        },
        {
            "question": "LDS là gì và tại sao quan trọng trong LWC?",
            "answer": "Lightning Data Service (LDS) là dịch vụ trong Salesforce cung cấp cách truy xuất và thao tác dữ liệu bản ghi một cách thống nhất, quan trọng trong LWC vì nó tự động quản lý caching, xử lý lỗi, và cập nhật dữ liệu theo thời gian thực, giảm mã trùng lặp và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng LDS trong LWC để lấy dữ liệu từ Salesforce?",
            "answer": "Sử dụng decorator `@wire` trong `.js` để liên kết với LDS, ví dụ: `@wire(getRecord, { recordId: '$recordId', fields: FIELDS })`, sau đó hiển thị dữ liệu trong `.html` qua `{record.data.fields.Name.value}`, đảm bảo dữ liệu tự động cập nhật."
        },
        {
            "question": "Làm cách nào để xử lý sự kiện từ phần tử HTML trong LWC?",
            "answer": "Xử lý sự kiện bằng cách định nghĩa handler trong `.html` (ví dụ: `<button onclick={handleClick}>Click</button>`), sau đó triển khai phương thức `handleClick` trong `.js` để thực hiện logic, sử dụng `event` để truy cập thông tin sự kiện, đảm bảo tương tác động."
        },
        {
            "question": "Làm cách nào để sử dụng CSS cho LWC?",
            "answer": "Sử dụng tệp `.css` cùng tên với component, định nghĩa phong cách với selector `:host` để áp dụng cho thành phần gốc, tận dụng Shadow DOM để đóng gói CSS, tránh xung đột, và tích hợp Lightning Design System (LDS) để đảm bảo giao diện nhất quán."
        },
        {
            "question": "Làm cách nào để tích hợp LWC với các thư viện JavaScript bên ngoài?",
            "answer": "Tích hợp thư viện bên ngoài bằng cách cài đặt qua npm (`npm install library-name`), sau đó import trong `.js` (ví dụ: `import Chart from 'chart.js'`), sử dụng trong logic component, đảm bảo thư viện tương thích với Salesforce và Shadow DOM."
        },
        {
            "question": "Làm cách nào để kiểm tra LWC?",
            "answer": "Kiểm tra LWC bằng cách sử dụng `@salesforce/lwc-jest`, một framework kiểm thử đơn vị tích hợp với Salesforce CLI, viết test cases trong `.test.js`, chạy qua `npm test`, đảm bảo độ phủ mã và kiểm tra các kịch bản người dùng."
        },
        {
            "question": "Làm cách nào để sử dụng slot trong LWC để tạo component có thể mở rộng?",
            "answer": "Sử dụng `<slot>` trong `.html` để định nghĩa vị trí chèn nội dung từ component cha, ví dụ: `<template><slot></slot></template>`, cho phép component cha truyền nội dung linh hoạt, tăng tính tái sử dụng và mở rộng."
        },
        {
            "question": "Làm cách nào để xử lý quốc tế hóa (i18n) trong LWC?",
            "answer": "Xử lý quốc tế hóa bằng cách sử dụng `@salesforce/i18n` để định dạng ngày, số, và tiền tệ theo địa phương người dùng, kết hợp Custom Labels (`import LABELS from '@salesforce/label'`) để hiển thị văn bản đa ngôn ngữ, đảm bảo giao diện thân thiện với khu vực."
        },
        {
            "question": "Làm cách nào để sử dụng Apex trong LWC?",
            "answer": "Sử dụng Apex trong LWC bằng cách sử dụng `@wire` để gọi phương thức Apex có `@AuraEnabled` (cacheable=true) hoặc gọi thủ công (imperative) qua `import` (ví dụ: `import myMethod from '@salesforce/apex/MyClass.myMethod'`), sử dụng `.then()` để xử lý phản hồi, đảm bảo quản lý lỗi và hiệu suất."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của LWC?",
            "answer": "Tối ưu hóa hiệu suất bằng cách giảm thao tác DOM, sử dụng `@track` hiệu quả để theo dõi thay đổi, áp dụng caching qua LDS, tránh lặp qua dữ liệu lớn trong `renderedCallback`, và sử dụng phân trang/lazy loading để xử lý dữ liệu lớn."
        },
        {
            "question": "Sự khác biệt giữa LWC và các web component chuẩn là gì?",
            "answer": "LWC là web component chuẩn (Web Components) với tích hợp đặc thù của Salesforce, như hỗ trợ LDS, `@wire`, và Shadow DOM, trong khi web component chuẩn không có các tính năng này, đòi hỏi tích hợp thủ công với backend hoặc API riêng, thiếu sự tối ưu cho nền tảng Salesforce."
        },
        {
            "question": "Làm cách nào để chuyển đổi một Aura Component sang LWC?",
            "answer": "Chuyển đổi bằng cách phân tích mã Aura, tái cấu trúc logic JavaScript trong `.js`, chuyển markup HTML sang `.html`, sử dụng `@wire` thay thế cho LDS/Apex calls, và áp dụng Shadow DOM/CSS trong `.css`, kiểm tra kỹ lưỡng hiệu suất và tương thích."
        },
        {
            "question": "Làm cách nào để hỗ trợ phiên bản cũ của component trong quá trình chuyển đổi?",
            "answer": "Hỗ trợ phiên bản cũ bằng cách duy trì cả Aura và LWC song song trong tổ chức, tạo wrapper component để chuyển đổi dần, kiểm tra tương thích với người dùng cũ, và sử dụng Lightning App Builder để nhúng cả hai loại component trong cùng giao diện."
        },
        {
            "question": "Làm cách nào để sử dụng conditional rendering trong LWC?",
            "answer": "Sử dụng `<template if:true={condition}>` hoặc `<template if:false={condition}>` trong `.html` để hiển thị nội dung có điều kiện dựa trên thuộc tính JavaScript (ví dụ: `{this.isVisible}`), đảm bảo giao diện động và hiệu quả."
        },
        {
            "question": "Làm cách nào để lặp qua một mảng trong mẫu HTML của LWC?",
            "answer": "Sử dụng `<template for:each={array} for:item='item'>` trong `.html` để lặp qua mảng `array` từ `.js`, hiển thị mỗi `item` trong nội dung, ví dụ: `<p>{item.name}</p>`, tạo danh sách động và tương tác."
        },
        {
            "question": "Làm cách nào để truy cập phần tử DOM trong LWC?",
            "answer": "Truy cập phần tử DOM trong LWC bằng cách sử dụng `this.template.querySelector()` hoặc `this.template.querySelectorAll()` trong phương thức `connectedCallback` hoặc `renderedCallback`, nhưng nên hạn chế để tận dụng liên kết dữ liệu và tránh xung đột Shadow DOM."
        },
        {
            "question": "Làm cách nào để sử dụng JavaScript third-party libraries trong LWC?",
            "answer": "Sử dụng thư viện bên ngoài bằng cách cài đặt qua npm (`npm install library-name`), import trong `.js` (ví dụ: `import Chart from 'chart.js'`), và sử dụng trong logic component, đảm bảo tương thích với Shadow DOM và chính sách bảo mật Salesforce."
        },
        {
            "question": "Làm cách nào để tạo một component có thể sử dụng lại?",
            "answer": "Tạo component tái sử dụng bằng cách định nghĩa thuộc tính `@api` linh hoạt, sử dụng sự kiện tùy chỉnh để giao tiếp, tránh hardcoding dữ liệu, và thiết kế giao diện/phong cách chung để áp dụng trong nhiều ngữ cảnh khác nhau trong Salesforce."
        },
        {
            "question": "Làm cách nào để kiểm tra hiệu suất của LWC?",
            "answer": "Kiểm tra hiệu suất bằng cách sử dụng Chrome DevTools (Performance tab) để đo thời gian render, sử dụng `@salesforce/lwc-jest` để kiểm tra hiệu suất code, và chạy test với tập dữ liệu lớn để tối ưu hóa thao tác DOM và cuộc gọi server."
        },
        {
            "question": "Làm cách nào để sử dụng `localStorage` hoặc `sessionStorage` trong LWC?",
            "answer": "Sử dụng `localStorage.setItem()` và `localStorage.getItem()` để lưu trữ dữ liệu vĩnh viễn giữa các session, hoặc `sessionStorage.setItem()`/`sessionStorage.getItem()` để lưu trữ tạm thời trong một session, đảm bảo kiểm tra bảo mật và giới hạn kích thước dữ liệu."
        },
        {
            "question": "Làm cách nào để sử dụng `XMLHttpRequest` hoặc `fetch` để gọi API bên ngoài?",
            "answer": "Sử dụng `fetch` hoặc `XMLHttpRequest` trong `.js` để gửi request HTTP đến API bên ngoài, xử lý phản hồi JSON qua `.then()` hoặc `async/await`, đảm bảo tuân thủ CORS và giới hạn callout của Salesforce (150 mỗi giao dịch)."
        },
        {
            "question": "Làm cách nào để xử lý CORS trong LWC?",
            "answer": "Xử lý CORS bằng cách đảm bảo API bên ngoài hỗ trợ CORS, cấu hình tổ chức Salesforce để cho phép domain cụ thể qua Remote Site Settings, và sử dụng `fetch` với headers phù hợp để tránh lỗi chặn truy cập."
        },
        {
            "question": "Làm cách nào để sử dụng `Promise` trong LWC?",
            "answer": "Sử dụng `Promise` trong `.js` để quản lý các hoạt động bất đồng bộ, ví dụ: `new Promise((resolve, reject) => { ... })`, kết hợp với `.then()` hoặc `async/await` để xử lý kết quả từ các cuộc gọi như Apex hoặc API."
        },
        {
            "question": "Làm cách nào để sử dụng `async/await` trong LWC?",
            "answer": "Sử dụng `async/await` trong `.js` bằng cách định nghĩa phương thức `async` (ví dụ: `async handleClick() { const data = await fetchData(); }`), chờ kết quả từ `Promise` mà không cần `.then()`, đảm bảo mã dễ đọc và quản lý tốt hơn."
        },
        {
            "question": "Làm cách nào để sử dụng Reactivity API của LWC để theo dõi thay đổi của đối tượng phức tạp?",
            "answer": "Sử dụng `@track` để theo dõi đối tượng phức tạp trong `.js`, đảm bảo gán lại toàn bộ đối tượng hoặc sử dụng `Object.assign()` khi thay đổi thuộc tính con, kích hoạt re-rendering tự động, nhưng cần cân nhắc hiệu suất với dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để sử dụng lifecycle hooks trong LWC?",
            "answer": "Sử dụng các phương thức lifecycle trong `.js` như: `constructor()` (khởi tạo), `connectedCallback()` (kết nối DOM), `renderedCallback()` (sau render), `disconnectedCallback()` (hủy kết nối), `errorCallback(error, stack)` (xử lý lỗi), để quản lý các giai đoạn sống của component."
        },
        {
            "question": "Làm cách nào để sử dụng `renderedCallback` để thao tác DOM sau khi component được render?",
            "answer": "Định nghĩa `renderedCallback()` trong `.js` để thực hiện thao tác DOM sau khi component được render, ví dụ: `this.template.querySelector('selector').style.color = 'red'`, nhưng nên hạn chế để tận dụng liên kết dữ liệu."
        },
        {
            "question": "Làm cách nào để sử dụng `disconnectedCallback` để làm sạch các tài nguyên?",
            "answer": "Định nghĩa `disconnectedCallback()` trong `.js` để xóa event listeners (`removeEventListener`), giải phóng tài nguyên (như timers), và dọn dẹp dữ liệu tạm thời trước khi component bị hủy, đảm bảo không gây rò rỉ bộ nhớ."
        },
        {
            "question": "Làm cách nào để sử dụng `errorCallback` để xử lý lỗi?",
            "answer": "Định nghĩa `errorCallback(error, stack)` trong `.js` để bắt và xử lý lỗi xảy ra trong component, hiển thị thông báo lỗi qua `<lightning-toast>` hoặc log vào Developer Console, đảm bảo ứng dụng ổn định."
        },
        {
            "question": "Làm cách nào để sử dụng `constructor` trong LWC?",
            "answer": "Sử dụng `constructor()` trong `.js` để khởi tạo thuộc tính hoặc trạng thái ban đầu của component, nhưng tránh thao tác DOM hoặc gọi API phức tạp, sử dụng `connectedCallback()` thay thế để thực hiện logic sau khi kết nối DOM."
        },
        {
            "question": "Làm cách nào để sử dụng i18n (quốc tế hóa) trong LWC?",
            "answer": "Sử dụng `@salesforce/i18n` trong `.js` để định dạng ngày, số, và tiền tệ theo địa phương người dùng, kết hợp `import LABELS from '@salesforce/label'` để truy cập Custom Labels, đảm bảo giao diện hỗ trợ đa ngôn ngữ."
        },
        {
            "question": "Làm cách nào để sử dụng `localStorage` để lưu trữ dữ liệu giữa các session?",
            "answer": "Sử dụng `localStorage.setItem('key', 'value')` và `localStorage.getItem('key')` trong `.js` để lưu trữ dữ liệu vĩnh viễn giữa các session, kiểm tra bảo mật và giới hạn kích thước (thường 5-10MB tùy trình duyệt)."
        },
        {
            "question": "Làm cách nào để sử dụng `sessionStorage` để lưu trữ dữ liệu trong một session?",
            "answer": "Sử dụng `sessionStorage.setItem('key', 'value')` và `sessionStorage.getItem('key')` trong `.js` để lưu trữ dữ liệu tạm thời trong một session, mất khi tab trình duyệt đóng, phù hợp cho dữ liệu session ngắn hạn."
        },
        {
            "question": "Làm cách nào để sử dụng cookies để lưu trữ dữ liệu?",
            "answer": "Sử dụng `document.cookie = 'key=value; expires=date; path=/'` trong `.js` để lưu trữ dữ liệu trong cookie, xử lý parsing và encoding với thư viện hoặc mã tùy chỉnh, nhưng cần chú ý bảo mật và giới hạn kích thước (4KB)."
        },
        {
            "question": "Làm cách nào để sử dụng geolocation API trong LWC?",
            "answer": "Sử dụng `navigator.geolocation.getCurrentPosition()` trong `.js` để lấy vị trí địa lý của người dùng, xử lý trong `connectedCallback` hoặc phương thức khác, đảm bảo trình duyệt hỗ trợ và người dùng cấp quyền."
        },
        {
            "question": "Làm cách nào để sử dụng media queries để tạo giao diện đáp ứng?",
            "answer": "Sử dụng media queries trong `.css` (ví dụ: `@media (max-width: 768px) { ... }`) để tùy chỉnh phong cách theo kích thước màn hình, đảm bảo giao diện linh hoạt trên desktop, tablet, và mobile trong LWC."
        },
        {
            "question": "Làm cách nào để sử dụng flexbox hoặc grid layout trong LWC?",
            "answer": "Sử dụng CSS flexbox (`display: flex`) hoặc grid (`display: grid`) trong `.css` để tổ chức bố cục giao diện, kết hợp với Lightning Design System (LDS) để tạo giao diện đáp ứng và nhất quán trong LWC."
        },
        {
            "question": "Làm cách nào để sử dụng animations hoặc transitions trong LWC?",
            "answer": "Sử dụng CSS `transition` hoặc `animation` trong `.css` để tạo hiệu ứng động, ví dụ: `transition: opacity 0.5s ease`, hoặc tích hợp thư viện JavaScript như GSAP để tạo animation phức tạp trong `.js`."
        },
        {
            "question": "Làm cách nào để sử dụng canvas để vẽ đồ họa trong LWC?",
            "answer": "Sử dụng phần tử `<canvas>` trong `.html`, truy cập qua `this.template.querySelector('canvas')` trong `.js`, và sử dụng API Canvas 2D của JavaScript để vẽ đồ họa, như đường, hình, hoặc biểu đồ."
        },
        {
            "question": "Làm cách nào để sử dụng video hoặc audio trong LWC?",
            "answer": "Sử dụng phần tử `<video>` hoặc `<audio>` trong `.html`, định nghĩa nguồn (`src`) và thuộc tính (như `controls`, `autoplay`), xử lý sự kiện như `onplay` hoặc `onended` trong `.js` để tương tác với media."
        },
        {
            "question": "Làm cách nào để sử dụng form và input elements trong LWC?",
            "answer": "Sử dụng các phần tử HTML chuẩn như `<form>`, `<input>`, `<select>` trong `.html`, liên kết `value` với thuộc tính trong `.js` qua `{this.property}`, và xử lý sự kiện như `onsubmit` hoặc `onchange` để thu thập và xử lý dữ liệu."
        },
        {
            "question": "Làm cách nào để xử lý validation của form trong LWC?",
            "answer": "Xử lý validation bằng cách sử dụng thuộc tính HTML5 như `required`, `pattern`, `min`, `max` trên `<input>`, kiểm tra qua `checkValidity()` trong `.js`, và hiển thị lỗi qua `<template if:true={error}>` để đảm bảo dữ liệu hợp lệ."
        },
        {
            "question": "Làm cách nào để sử dụng file input để tải lên tệp?",
            "answer": "Sử dụng `<input type=\"file\" onchange={handleFileUpload}>` trong `.html`, xử lý tệp trong `handleFileUpload` bằng `event.target.files[0]` trong `.js`, sau đó gọi Apex để lưu vào `ContentVersion` hoặc `Attachment`, kiểm tra loại/kích thước tệp."
        },
        {
            "question": "Làm cách nào để sử dụng `Promise.all` để chờ các Promise đồng thời?",
            "answer": "Sử dụng `Promise.all([promise1, promise2])` trong `.js` để chờ nhiều Promise hoàn thành cùng lúc, trả về một mảng kết quả, xử lý lỗi qua `.catch()`, đảm bảo quản lý nhiều tác vụ bất đồng bộ hiệu quả."
        },
        {
            "question": "Làm cách nào để ngừa sự lan truyền sự kiện (event propagation)?",
            "answer": "Ngừa sự lan truyền sự kiện trong LWC bằng cách sử dụng `event.stopPropagation()` trong handler sự kiện của `.js`, ví dụ: `handleClick(event) { event.stopPropagation(); /* logic xử lý */ }`. Điều này ngăn sự kiện tiếp tục truyền lên các thành phần cha, đảm bảo kiểm soát hành vi chính xác."
        },
        {
            "question": "Làm cách nào để tùy chỉnh styling của component từ bên ngoài?",
            "answer": "Tùy chỉnh styling từ bên ngoài bằng cách sử dụng CSS variables (custom properties) trong `.css`, như `:host { --custom-color: blue; }`, sau đó component cha có thể ghi đè giá trị qua thuộc tính `@api` hoặc CSS cấp cao hơn, đảm bảo linh hoạt mà vẫn giữ biệt lập Shadow DOM."
        },
        {
            "question": "Làm cách nào để sử dụng class CSS từ Lightning Design System trong LWC?",
            "answer": "Sử dụng các lớp CSS từ Lightning Design System (LDS) trong `.html` và `.css` của LWC, ví dụ: `<div class=\"slds-box\">Content</div>`, kết hợp với tệp `.css` để áp dụng phong cách nhất quán với Lightning Experience, đảm bảo giao diện chuyên nghiệp."
        },
        {
            "question": "Làm cách nào để xử lý lỗi từ `@wire`?",
            "answer": "Xử lý lỗi từ `@wire` bằng cách kiểm tra thuộc tính `error` trong kết quả wire, ví dụ: `@wire(getRecord, { recordId: '$recordId', fields: FIELDS }) result({ data, error }) { if (error) { this.error = error; } else { this.data = data; } }`, hiển thị lỗi qua `.html` với `<template if:true={error}>`."
        },
        {
            "question": "Làm cách nào để định nghĩa một thuộc tính trong LWC?",
            "answer": "Định nghĩa thuộc tính trong LWC bằng cách sử dụng decorator `@api` cho thuộc tính công khai (ví dụ: `@api recordId;`) hoặc `@track` cho thuộc tính riêng tư cần theo dõi thay đổi (ví dụ: `@track items = [];`), trong `.js`, cho phép liên kết dữ liệu với giao diện."
        },
        {
            "question": "Làm cách nào để sử dụng thuộc tính trong mẫu HTML?",
            "answer": "Sử dụng thuộc tính trong `.html` bằng cách tham chiếu `{this.propertyName}`, ví dụ: `<p>{this.name}</p>`, đảm bảo dữ liệu từ `.js` được hiển thị động, tự động cập nhật khi thuộc tính thay đổi nhờ cơ chế reactive của LWC."
        },
        {
            "question": "Làm cách nào để cập nhật thuộc tính và kích hoạt re-rendering?",
            "answer": "Cập nhật thuộc tính trong `.js` bằng cách gán trực tiếp (ví dụ: `this.property = newValue;`), nếu thuộc tính có `@track`, LWC sẽ tự động kích hoạt re-rendering. Với đối tượng phức tạp, cần gán lại toàn bộ hoặc sử dụng `Object.assign()` để đảm bảo thay đổi được phát hiện."
        },
        {
            "question": "Làm thế nào để cài đặt Salesforce CLI?",
            "answer": "Cài đặt Salesforce CLI bằng cách tải từ trang chính thức của Salesforce hoặc sử dụng package manager như `npm install -g sfdx` (Node.js cần được cài đặt trước), sau đó chạy `sfdx --version` để kiểm tra, đảm bảo môi trường phát triển sẵn sàng cho LWC."
        },
        {
            "question": "Làm thế nào để tạo một dự án mới với Salesforce DX?",
            "answer": "Tạo dự án mới bằng cách chạy `sfdx force:project:create -n MyProject` trong terminal, tạo thư mục dự án với cấu trúc mặc định (`force-app`, `sfdx-project.json`), sẵn sàng cho phát triển LWC và triển khai lên Salesforce."
        },
        {
            "question": "Làm thế nào để kết nối dự án với tổ chức Salesforce của bạn?",
            "answer": "Kết nối dự án với tổ chức bằng lệnh `sfdx force:auth:login`, mở trình duyệt đăng nhập Salesforce, cấp quyền cho CLI, sau đó kiểm tra kết nối qua `sfdx force:org:display` để xác nhận tổ chức được liên kết."
        },
        {
            "question": "Làm cách nào để thêm một component mới vào dự án LWC?",
            "answer": "Thêm component mới bằng lệnh `sfdx lwc:create -n NewComponent` trong thư mục `force-app/main/default/lwc`, tạo các tệp `newcomponent.js`, `newcomponent.html`, và `newcomponent.css`, sau đó định nghĩa logic và giao diện."
        },
        {
            "question": "Các tệp nào được tạo ra khi sử dụng lệnh `lwc:create`?",
            "answer": "Lệnh `sfdx lwc:create` tạo thư mục `NewComponent` trong `force-app/main/default/lwc`, chứa các tệp: `newcomponent.js` (logic), `newcomponent.html` (giao diện), và `newcomponent.css` (phong cách), cùng với cấu trúc mặc định cho LWC."
        },
        {
            "question": "Làm cách nào để sử dụng VisualForce với Lightning Out?",
            "answer": "Sử dụng Lightning Out để nhúng VisualForce page vào ứng dụng web bên ngoài Salesforce bằng cách tải thư viện JavaScript Lightning Out, cấu hình endpoint Salesforce, và gọi trang VisualForce qua `<script>` trong HTML, đảm bảo tương thích và bảo mật."
        },
        {
            "question": "Làm cách nào để thiết kế VisualForce page với hiệu ứng động sử dụng JavaScript?",
            "answer": "Thiết kế VisualForce với hiệu ứng động bằng cách nhúng JavaScript qua `<apex:script>`, sử dụng thư viện như jQuery hoặc Vanilla JS để thêm animation, transition, hoặc tương tác động, kết hợp với Apex để xử lý dữ liệu, đảm bảo hiệu suất và tương thích."
        },
        {
            "question": "Làm cách nào để tùy chỉnh VisualForce page dựa trên ngữ cảnh của người dùng?",
            "answer": "Tùy chỉnh VisualForce bằng cách sử dụng Apex controller để lấy thông tin người dùng (như profile, language) qua `$User` hoặc `UserInfo`, sau đó hiển thị/ẩn thành phần qua `<apex:rendered>` hoặc logic JavaScript, đảm bảo giao diện phù hợp với ngữ cảnh."
        },
        {
            "question": "Làm cách nào để tích hợp VisualForce page với các widget bên ngoài như Google Maps?",
            "answer": "Tích hợp Google Maps bằng cách nhúng API Google Maps qua `<apex:includeScript>` trong VisualForce, sử dụng JavaScript để hiển thị bản đồ, lấy dữ liệu từ Apex qua controller, và cấu hình vị trí dựa trên bản ghi Salesforce, đảm bảo bảo mật và hiệu suất."
        },
        {
            "question": "Làm cách nào để xử lý tệp tin động trong VisualForce?",
            "answer": "Xử lý tệp động trong VisualForce bằng cách sử dụng Apex để tạo nội dung tệp (như PDF qua `renderAs='pdf'` hoặc Blob qua `ContentVersion`), sau đó cung cấp URL tải về hoặc hiển thị trực tiếp, đảm bảo kiểm tra quyền và giới hạn tài nguyên."
        },
        {
            "question": "Làm cách nào để tối ưu hóa SEO cho VisualForce page nếu trang đó được hiển thị công khai?",
            "answer": "Tối ưu hóa SEO bằng cách sử dụng thẻ meta, tiêu đề (`<apex:page title=\"Page Title\">`), tối ưu nội dung HTML, giảm thời gian tải qua caching, và sử dụng sitemap nếu công khai, nhưng cần tuân thủ chính sách bảo mật Salesforce."
        },
        {
            "question": "Làm cách nào để sử dụng VisualForce để tạo form phức tạp với xác thực đầu vào nâng cao?",
            "answer": "Tạo form phức tạp bằng cách sử dụng `<apex:inputText>` với `required`, `validator`, kết hợp Apex controller để kiểm tra đầu vào qua `try-catch`, hiển thị lỗi qua `<apex:messages>`, và sử dụng JavaScript để thêm validation nâng cao như regex hoặc format check."
        },
        {
            "question": "Làm cách nào để đảm bảo rằng VisualForce page hoạt động tốt trên các trình duyệt cũ?",
            "answer": "Đảm bảo tương thích với trình duyệt cũ bằng cách sử dụng polyfill (như ES5), kiểm tra mã HTML/CSS/JavaScript trên các trình duyệt như IE, Firefox, Chrome cũ, và tối ưu hóa markup để tránh sử dụng các tính năng web hiện đại không hỗ trợ."
        },
        {
            "question": "Làm cách nào để kết hợp VisualForce page với custom branding của doanh nghiệp?",
            "answer": "Kết hợp branding bằng cách tùy chỉnh CSS qua `<apex:stylesheet>` hoặc static resources, thay đổi logo, màu sắc, font chữ theo nhận diện thương hiệu, sử dụng Lightning Design System (LDS) để giữ nhất quán, và kiểm tra giao diện trên các thiết bị."
        },
        {
            "question": "Làm cách nào để xử lý tính năng download file từ VisualForce page?",
            "answer": "Xử lý download file bằng cách sử dụng `renderAs='pdf'` trong `<apex:page>` để tạo file PDF, hoặc dùng Apex để tạo Blob và cung cấp link download qua `<apex:outputLink>`, đảm bảo kiểm tra quyền người dùng và giới hạn tài nguyên."
        },
        {
            "question": "Làm cách nào để tích hợp VisualForce page với các công cụ phân tích web để theo dõi tương tác người dùng?",
            "answer": "Tích hợp công cụ như Google Analytics bằng cách nhúng mã tracking qua `<apex:script>`, sử dụng JavaScript để theo dõi sự kiện (như click, submit), và cấu hình trong Salesforce để thu thập dữ liệu tương tác, đảm bảo tuân thủ chính sách bảo mật."
        },
        {
            "question": "Làm cách nào để hiển thị dữ liệu dạng biểu đồ trên LWC?",
            "answer": "Hiển thị biểu đồ trên LWC bằng cách tích hợp thư viện như Chart.js qua npm, import trong `.js`, sử dụng `<canvas>` trong `.html`, và vẽ biểu đồ dựa trên dữ liệu từ Apex/LDS, đảm bảo hiệu suất và tương tác động."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu lớn trong LWC mà không ảnh hưởng đến hiệu suất?",
            "answer": "Xử lý dữ liệu lớn bằng cách sử dụng phân trang (`<template for:each>` với `slice` hoặc `limit`), lazy loading qua JavaScript, và Batch Apex để truy xuất dữ liệu bất đồng bộ, kết hợp LDS để caching, đảm bảo giao diện mượt mà."
        },
        {
            "question": "Làm cách nào để tích hợp LWC với các hệ thống bên ngoài thông qua API?",
            "answer": "Tích hợp API bên ngoài trong LWC bằng cách sử dụng `fetch` hoặc `XMLHttpRequest` trong `.js` để gọi API, xử lý dữ liệu JSON, và hiển thị trên giao diện, đảm bảo tuân thủ CORS và giới hạn callout của Salesforce (150 mỗi giao dịch)."
        },
        {
            "question": "Làm cách nào để tạo một giao diện đáp ứng trong LWC?",
            "answer": "Tạo giao diện đáp ứng bằng cách sử dụng media queries trong `.css`, áp dụng các lớp của Lightning Design System (LDS) như `slds-grid` hoặc `slds-wrap`, và kiểm tra trên nhiều kích thước màn hình (desktop, mobile) để đảm bảo trải nghiệm tốt."
        },
        {
            "question": "Làm cách nào để sử dụng `lightning:datatable` trong LWC?",
            "answer": "Sử dụng `<lightning-datatable>` trong `.html`, định nghĩa `columns` (các cột với `label`, `fieldName`) và `data` (danh sách bản ghi) trong `.js`, thêm event handler như `onrowaction` để xử lý tương tác, hiển thị dữ liệu bảng động và hiệu quả."
        },
        {
            "question": "Làm cách nào để tùy chỉnh `lightning:datatable` trong LWC?",
            "answer": "Tùy chỉnh `<lightning-datatable>` bằng cách cấu hình `columns` với `type` (text, date, button), `sortable`, `editable`, thêm event handler như `oncellchange`, và sử dụng CSS trong `.css` để điều chỉnh giao diện, đảm bảo tương tác và hiển thị tốt."
        }
    ],
    "SFDC’s Trigger": [
        {
            "question": "Trigger trong Salesforce là gì?",
            "answer": "Trigger trong Salesforce là các đoạn mã Apex được tự động thực thi trước hoặc sau khi xảy ra các sự kiện trên cơ sở dữ liệu, như chèn (insert), cập nhật (update), xóa (delete), hoặc khôi phục (undelete) bản ghi. Trigger cho phép thực hiện các hành động tùy chỉnh, như kiểm tra dữ liệu, cập nhật bản ghi liên quan, hoặc gửi thông báo, để mở rộng chức năng của nền tảng."
        },
        {
            "question": "Những loại Trigger khác nhau là gì?",
            "answer": "Trigger trong Salesforce được phân loại dựa trên thời điểm và loại sự kiện: (1) **Before Triggers**: thực thi trước khi bản ghi được lưu (before insert, before update, before delete), thường dùng để kiểm tra hoặc chỉnh sửa dữ liệu; (2) **After Triggers**: thực thi sau khi bản ghi được lưu (after insert, after update, after delete, after undelete), dùng để cập nhật bản ghi liên quan hoặc thực hiện hành động phụ như gửi email."
        },
        {
            "question": "Khi nào bạn nên sử dụng Trigger thay vì Validation Rules hoặc Flows?",
            "answer": "Sử dụng Trigger khi cần logic phức tạp hoặc hiệu suất cao mà Validation Rules hoặc Flows không hỗ trợ, như xử lý dữ liệu khối lượng lớn, tích hợp API bên ngoài, hoặc thực hiện các thao tác DML trên nhiều đối tượng. Trigger phù hợp cho các yêu cầu lập trình không thể thực hiện qua công cụ click-and-point như Process Builder hoặc Flow."
        },
        {
            "question": "Làm cách nào để tạo một Trigger?",
            "answer": "Tạo Trigger bằng cách mở Developer Console trong Salesforce, chọn 'File' > 'New' > 'Apex Trigger', nhập tên Trigger, chọn đối tượng liên quan (như Account, Contact), sau đó viết mã Apex trong cú pháp chuẩn, định nghĩa các sự kiện (before/after, insert/update/delete), và lưu lại để triển khai trong tổ chức."
        },
        {
            "question": "Cú pháp của Trigger là gì?",
            "answer": "Cú pháp cơ bản của Trigger trong Salesforce là: `trigger TriggerName on ObjectName (trigger_events) { // code }`, trong đó: `TriggerName` là tên Trigger, `ObjectName` là đối tượng (như Account), và `trigger_events` là các sự kiện (before insert, after update, v.v.), chứa logic Apex để xử lý dữ liệu."
        },
        {
            "question": "Làm cách nào để xử lý các hoạt động khối lượng lớn trong Trigger?",
            "answer": "Xử lý các hoạt động khối lượng lớn bằng cách kiểm tra `Trigger.isBulk` để xác định ngữ cảnh xử lý nhiều bản ghi, sử dụng vòng lặp trên `Trigger.new` hoặc `Trigger.old` để xử lý từng bản ghi theo lô, tránh DML hoặc SOQL trong vòng lặp để không vượt giới hạn governor, và áp dụng bulkification để tối ưu hiệu suất."
        },
        {
            "question": "Những trường hợp sử dụng phổ biến của Trigger là gì?",
            "answer": "Trigger được sử dụng phổ biến để: (1) Kiểm tra dữ liệu phức tạp (như trùng lặp, định dạng); (2) Cập nhật bản ghi liên quan (như đồng bộ trường giữa đối tượng cha và con); (3) Gửi thông báo (email, Chatter) dựa trên sự kiện; (4) Tính toán giá trị trường tùy chỉnh (như tổng số lượng) trước khi lưu."
        },
        {
            "question": "Làm cách nào để debug một Trigger?",
            "answer": "Debug Trigger bằng cách sử dụng debug logs trong Developer Console: bật log cho người dùng hoặc trigger, đặt mức log (DEBUG, FINE), thực hiện hành động kích hoạt Trigger (như insert bản ghi), sau đó phân tích log trong tab Logs để xem chi tiết lỗi, giá trị biến, hoặc thời gian thực thi."
        },
        {
            "question": "Các biến ngữ cảnh Trigger là gì?",
            "answer": "Các biến ngữ cảnh Trigger cung cấp thông tin về ngữ cảnh thực thi, bao gồm: `Trigger.isBefore`, `Trigger.isAfter`, `Trigger.isInsert`, `Trigger.isUpdate`, `Trigger.isDelete`, `Trigger.isUndelete`, `Trigger.new`, `Trigger.old`, `Trigger.newMap`, `Trigger.oldMap`, giúp kiểm soát logic dựa trên sự kiện và bản ghi."
        },
        {
            "question": "Làm cách nào để ngăn chặn Trigger đệ quy?",
            "answer": "Ngăn chặn Trigger đệ quy bằng cách sử dụng biến static trong một lớp helper (ví dụ: `public static Boolean isRunning = false;`), kiểm tra `if (!isRunning) { isRunning = true; // logic Trigger; isRunning = false; }` để đảm bảo Trigger chỉ chạy một lần cho cùng bản ghi hoặc sự kiện."
        },
        {
            "question": "Các sự kiện trigger trong Salesforce là gì?",
            "answer": "Các sự kiện Trigger trong Salesforce bao gồm: before insert (trước khi chèn), before update (trước khi cập nhật), before delete (trước khi xóa), after insert (sau khi chèn), after update (sau khi cập nhật), after delete (sau khi xóa), và after undelete (sau khi khôi phục), kích hoạt logic tùy chỉnh dựa trên hành động trên bản ghi."
        },
        {
            "question": "Thứ tự thực thi của Trigger là gì?",
            "answer": "Thứ tự thực thi Trigger là: (1) Before Triggers (trước khi lưu, theo thứ tự định nghĩa); (2) Validation Rules; (3) After Triggers (sau khi lưu, theo thứ tự định nghĩa); (4) Workflow Rules; (5) Processes (Process Builder/Flows). Trigger chạy đồng bộ, không thể thay đổi thứ tự trực tiếp nhưng có thể quản lý qua framework."
        },
        {
            "question": "Làm cách nào để truy cập giá trị cũ và mới của một trường trong Trigger?",
            "answer": "Truy cập giá trị cũ qua `Trigger.old` (danh sách bản ghi trước khi thay đổi) hoặc `Trigger.oldMap` (map ID đến bản ghi cũ), và giá trị mới qua `Trigger.new` (danh sách bản ghi mới) hoặc `Trigger.newMap` (map ID đến bản ghi mới), tùy thuộc ngữ cảnh before/after để so sánh hoặc xử lý."
        },
        {
            "question": "Sự khác biệt giữa Trigger.new và Trigger.newMap là gì?",
            "answer": "Trigger.new là một danh sách (List) các đối tượng sObject (như List<Account>) chứa các bản ghi mới trong ngữ cảnh hiện tại, dùng để lặp qua bản ghi. Trigger.newMap là một map (Map<Id, sObject>) ánh xạ ID bản ghi đến đối tượng, hữu ích để truy xuất nhanh bản ghi theo ID mà không cần lặp."
        },
        {
            "question": "Làm cách nào để xử lý xóa trong Trigger?",
            "answer": "Xử lý xóa trong Trigger bằng cách sử dụng sự kiện before delete hoặc after delete, truy cập `Trigger.old` (danh sách bản ghi bị xóa) hoặc `Trigger.oldMap` (map ID đến bản ghi), thực hiện logic như ghi log, cập nhật bản ghi liên quan, hoặc gửi thông báo trước khi bản ghi bị xóa khỏi cơ sở dữ liệu."
        },
        {
            "question": "Những thực hành tốt nhất cho viết Trigger hiệu quả là gì?",
            "answer": "Thực hành tốt nhất bao gồm: (1) Bulkify mã để xử lý nhiều bản ghi; (2) Tránh DML và SOQL trong vòng lặp để không vượt giới hạn governor; (3) Sử dụng trigger handler pattern để tổ chức logic; (4) Xử lý ngoại lệ với try-catch; (5) Kiểm tra kỹ lưỡng với unit test để đảm bảo hiệu suất và độ tin cậy."
        },
        {
            "question": "Làm cách nào để kiểm tra một Trigger?",
            "answer": "Kiểm tra Trigger bằng cách viết lớp test Apex với annotation `@isTest`, tạo dữ liệu mẫu, kích hoạt Trigger qua các thao tác như insert, update, delete trên đối tượng, sau đó sử dụng `System.assert` để kiểm tra kết quả mong đợi, đảm bảo độ phủ mã tối thiểu 75%."
        },
        {
            "question": "Làm cách nào để xử lý ngoại lệ trong Trigger?",
            "answer": "Xử lý ngoại lệ trong Trigger bằng cách sử dụng `try-catch` để bắt các ngoại lệ như `DmlException` hoặc `QueryException`, ghi log lỗi qua `System.debug` hoặc lưu vào đối tượng tùy chỉnh, quyết định tiếp tục xử lý hoặc dừng bằng cách thêm lỗi qua `addError()` nếu cần."
        },
        {
            "question": "Trigger có thể được kích hoạt bởi bao nhiêu bản ghi cùng lúc?",
            "answer": "Trigger có thể xử lý nhiều bản ghi cùng lúc (bulk operations), thường trong ngữ cảnh hàng loạt (bulkified), phụ thuộc vào giới hạn governor (tối đa 50,000 bản ghi mỗi giao dịch). Cần bulkify mã để đảm bảo xử lý hiệu quả và không vượt giới hạn."
        },
        {
            "question": "Làm cách nào để đảm bảo Trigger không ảnh hưởng hiệu suất?",
            "answer": "Đảm bảo hiệu suất bằng cách bulkify mã, giảm số lượng SOQL/DML, sử dụng maps thay vòng lặp, kiểm tra giới hạn governor qua `Limits.getCpuTime()`, và chạy test với dữ liệu lớn trước khi triển khai để tối ưu hóa."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger cho đối tượng Account?",
            "answer": "Sử dụng Trigger cho đối tượng Account bằng cách định nghĩa `trigger AccountTrigger on Account (before insert, before update, after insert, after update) { // logic }`, sau đó sử dụng `Trigger.new` và `Trigger.old` để kiểm tra, cập nhật trường (như Name, Industry), hoặc đồng bộ với bản ghi liên quan."
        },
        {
            "question": "Làm cách nào để cập nhật bản ghi liên quan trong Trigger?",
            "answer": "Cập nhật bản ghi liên quan bằng cách sử dụng SOQL để truy vấn bản ghi liên quan (như Contact hoặc Opportunity liên kết với Account), sau đó sử dụng DML như `update` trong Trigger để cập nhật, đảm bảo xử lý theo lô và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng maps trong Trigger để cải thiện hiệu suất?",
            "answer": "Sử dụng `Trigger.newMap` và `Trigger.oldMap` để lưu trữ và truy xuất nhanh bản ghi theo ID, giảm số lượng SOQL cần thiết, tránh vòng lặp lồng nhau, và tăng tốc độ xử lý khi làm việc với nhiều bản ghi trong ngữ cảnh khối lượng lớn."
        },
        {
            "question": "Làm cách nào để xử lý Trigger cho các bản ghi bị xóa mềm (soft delete)?",
            "answer": "Xử lý xóa mềm trong Trigger bằng cách sử dụng sự kiện after delete với `Trigger.old` để lưu thông tin bản ghi vào đối tượng tùy chỉnh (như Audit Log), đánh dấu bản ghi là inactive thay vì xóa hoàn toàn, và kiểm tra trạng thái trong logic trước khi xử lý."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để gửi email thông báo?",
            "answer": "Sử dụng `Messaging.SingleEmailMessage` hoặc `Messaging.MassEmailMessage` trong Trigger (thường trong after trigger) để gửi email, cấu hình người nhận, nội dung qua `setToAddresses()` và `setSubject()`, đảm bảo không vượt giới hạn email hàng ngày (tối đa 5,000 email)."
        },
        {
            "question": "Làm cách nào để kiểm tra Trigger.isInsert trong mã?",
            "answer": "Kiểm tra `Trigger.isInsert` trong mã Apex để xác định Trigger được kích hoạt bởi sự kiện chèn (insert), ví dụ: `if (Trigger.isInsert) { // logic cho insert }`, giúp điều kiện hóa logic dựa trên loại sự kiện."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tính toán trường tùy chỉnh?",
            "answer": "Sử dụng logic trong before trigger để tính toán giá trị cho trường tùy chỉnh (như tổng số lượng hoặc giá trị) dựa trên dữ liệu trong `Trigger.new`, sau đó gán giá trị vào trường trước khi bản ghi được lưu, tránh sử dụng DML không cần thiết."
        },
        {
            "question": "Làm cách nào để xử lý Trigger cho các bản ghi được khôi phục (undelete)?",
            "answer": "Xử lý undelete trong Trigger bằng cách sử dụng sự kiện after undelete với `Trigger.new` để truy cập bản ghi được khôi phục, thực hiện logic như cập nhật trạng thái, gửi thông báo, hoặc đồng bộ với bản ghi liên quan, đảm bảo không gây đệ quy."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để kiểm tra dữ liệu trùng lặp?",
            "answer": "Sử dụng SOQL trong before trigger để kiểm tra bản ghi hiện có dựa trên trường cụ thể (như Email trên Contact), so sánh với `Trigger.new`, và thêm lỗi qua `record.addError('Trùng lặp dữ liệu')` nếu phát hiện trùng lặp, đảm bảo dữ liệu sạch."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gán chủ sở hữu cho bản ghi?",
            "answer": "Tự động gán chủ sở hữu bằng cách sử dụng before trigger để cập nhật trường `OwnerId` trong `Trigger.new` dựa trên logic như vùng lãnh thổ, đội nhóm, hoặc quy tắc kinh doanh, đảm bảo không cần DML bổ sung."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để cập nhật trường trên bản ghi cha?",
            "answer": "Sử dụng SOQL trong after trigger để truy vấn bản ghi cha (như Account) thông qua mối quan hệ với bản ghi con (như Contact), sau đó sử dụng DML để cập nhật trường trên bản ghi cha, xử lý theo lô để tránh giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi con?",
            "answer": "Tự động tạo bản ghi con trong after trigger bằng cách tạo danh sách bản ghi con (như Task hoặc Note) liên quan đến bản ghi cha trong `Trigger.new`, sau đó sử dụng `insert` DML để lưu, đảm bảo xử lý khối lượng lớn hiệu quả."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để kiểm tra quyền truy cập của người dùng?",
            "answer": "Kiểm tra quyền truy cập bằng cách sử dụng `Schema.DescribeSObjectResult` hoặc `isAccessible()`, `isUpdateable()` trong before trigger để xác định người dùng có quyền truy cập bản ghi hay không, thêm lỗi qua `addError()` nếu không đủ quyền."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để ghi log hoạt động?",
            "answer": "Ghi log hoạt động bằng cách tạo bản ghi trong đối tượng tùy chỉnh (như Audit_Log__c) trong after trigger, sử dụng `Trigger.old` và `Trigger.new` để lưu thông tin thay đổi (như trường, giá trị cũ/mới), đảm bảo không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gửi thông báo Chatter?",
            "answer": "Sử dụng `ConnectApi` trong after trigger để đăng bài trên Chatter, ví dụ: `ConnectApi.ChatterFeeds.postFeedElement(null, 'me', ConnectApi.FeedElementType.FeedItem, content)`, đảm bảo không vượt giới hạn API callout (tối đa 150 mỗi giao dịch)."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý trường picklist?",
            "answer": "Xử lý trường picklist trong before trigger bằng cách kiểm tra giá trị `Trigger.new[0].PicklistField__c` (hoặc tương tự), áp dụng logic để cập nhật hoặc xác thực giá trị, đảm bảo tuân thủ các giá trị hợp lệ trong picklist của Salesforce."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý trường formula?",
            "answer": "Không thể trực tiếp thay đổi trường formula vì nó là trường tính toán tự động, nhưng có thể sử dụng giá trị formula trong `Trigger.new` để logic khác (như kiểm tra hoặc cập nhật trường khác), đảm bảo không thực hiện DML trên trường formula."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý trường lookup?",
            "answer": "Xử lý trường lookup trong Trigger bằng cách sử dụng SOQL để truy vấn bản ghi liên quan (như Account liên kết với Contact) qua trường lookup, sau đó cập nhật hoặc kiểm tra logic dựa trên mối quan hệ, đảm bảo không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý trường master-detail?",
            "answer": "Xử lý trường master-detail trong Trigger bằng cách sử dụng SOQL để truy vấn bản ghi master từ bản ghi detail trong `Trigger.new`, áp dụng logic như cập nhật trường trên bản ghi master, đảm bảo tuân thủ quy tắc cascade (như xóa bản ghi detail khi master bị xóa)."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong nhiều ngôn ngữ?",
            "answer": "Xử lý đa ngôn ngữ bằng cách sử dụng `UserInfo.getLocale()` trong Trigger để xác định ngôn ngữ người dùng, sau đó áp dụng logic như hiển thị nhãn hoặc xử lý dữ liệu phù hợp với khu vực, kết hợp Custom Labels nếu cần."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý tiền tệ đa dạng?",
            "answer": "Xử lý tiền tệ đa dạng bằng cách kiểm tra `CurrencyIsoCode` trong `Trigger.new` (nếu tổ chức hỗ trợ đa tiền tệ), sử dụng logic để chuyển đổi tiền tệ hoặc tính toán dựa trên tỷ giá, đảm bảo chính xác và tuân thủ quy định địa phương."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gán lãnh thổ?",
            "answer": "Tự động gán lãnh thổ bằng cách sử dụng before trigger để cập nhật `TerritoryId` trong `Trigger.new` dựa trên logic như địa lý, mã vùng, hoặc quy tắc kinh doanh, đảm bảo phân bổ đúng lãnh thổ cho bản ghi."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi bị khóa (locked records)?",
            "answer": "Xử lý bản ghi bị khóa bằng cách kiểm tra `Approval.isLocked()` trong before trigger để xác định bản ghi đang trong quy trình phê duyệt, thêm lỗi qua `addError()` nếu cần, hoặc thực hiện logic khác (như gửi thông báo) nếu bản ghi không thể chỉnh sửa."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo task liên quan?",
            "answer": "Tự động tạo Task trong after trigger bằng cách tạo danh sách `Task` mới liên quan đến bản ghi trong `Trigger.new`, gán trường như `WhatId` hoặc `WhoId`, sau đó sử dụng `insert` DML để lưu, đảm bảo xử lý khối lượng lớn hiệu quả."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để kiểm tra giới hạn governor?",
            "answer": "Kiểm tra giới hạn governor trong Trigger bằng cách sử dụng `Limits.getCpuTime()`, `Limits.getQueries()`, hoặc các phương thức `Limits` khác để theo dõi tài nguyên sử dụng, đảm bảo không vượt quá giới hạn (như 10,000 ms CPU time, 100 SOQL queries)."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong sandbox?",
            "answer": "Xử lý bản ghi trong sandbox bằng cách kiểm tra `UserInfo.isSandbox()` trong Trigger để áp dụng logic khác nhau (như không gửi email thật), đảm bảo không ảnh hưởng đến dữ liệu production và tối ưu hóa thử nghiệm."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tích hợp với API bên ngoài?",
            "answer": "Tích hợp API bên ngoài trong Trigger bằng cách sử dụng `@future` hoặc `Queueable` để thực hiện callout HTTP bất đồng bộ, tránh giới hạn synchronous callout (150 mỗi giao dịch), sau đó xử lý phản hồi trong logic Trigger."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý file attachments?",
            "answer": "Xử lý file attachments trong Trigger bằng cách sử dụng `ContentVersion` hoặc `Attachment` trong after trigger, truy cập tệp qua `Trigger.new`, kiểm tra kích thước và loại tệp, sau đó lưu hoặc cập nhật bằng DML, đảm bảo không vượt giới hạn tài nguyên."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động cập nhật trường trên bản ghi liên quan?",
            "answer": "Tự động cập nhật trường trên bản ghi liên quan bằng cách sử dụng SOQL trong after trigger để truy vấn bản ghi liên quan (như Contact của Account), sau đó sử dụng DML `update` để cập nhật, xử lý theo lô để tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để kiểm tra dữ liệu trước khi lưu?",
            "answer": "Kiểm tra dữ liệu trước khi lưu trong before trigger bằng cách sử dụng `Trigger.new` để duyệt qua bản ghi, áp dụng logic như kiểm tra rỗng, định dạng, hoặc trùng lặp, thêm lỗi qua `record.addError()` nếu dữ liệu không hợp lệ, đảm bảo dữ liệu sạch khi lưu."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gửi thông báo SMS?",
            "answer": "Tự động gửi SMS trong after trigger bằng cách sử dụng API bên ngoài (như Twilio) trong một phương thức `@future` hoặc `Queueable`, cấu hình thông tin người nhận và nội dung qua `Trigger.new`, đảm bảo không vượt giới hạn callout và tài nguyên."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Process Builder?",
            "answer": "Xử lý bản ghi trong Process Builder bằng cách đảm bảo Trigger chạy trước hoặc sau Process Builder (theo thứ tự thực thi), sử dụng biến ngữ cảnh như `Trigger.isBefore` để kiểm tra, tránh đệ quy bằng cách sử dụng biến static trong trigger handler."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong đối tượng tùy chỉnh?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách tạo danh sách bản ghi mới cho đối tượng tùy chỉnh (như Custom_Object__c) liên quan đến `Trigger.new`, sau đó sử dụng `insert` DML để lưu, đảm bảo xử lý khối lượng lớn hiệu quả."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Flow?",
            "answer": "Xử lý bản ghi trong Flow bằng cách đảm bảo Trigger chạy trước hoặc sau Flow (theo thứ tự thực thi), sử dụng biến ngữ cảnh để kiểm tra ngữ cảnh, và áp dụng logic không gây đệ quy, thường qua trigger handler pattern."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để kiểm tra quyền truy cập vào bản ghi?",
            "answer": "Kiểm tra quyền truy cập bằng cách sử dụng `Schema.SObjectType.ObjectName.isAccessible()` hoặc `isUpdateable()` trong before trigger, thêm lỗi qua `addError()` nếu người dùng không có quyền (như FLS hoặc OWD), đảm bảo an toàn dữ liệu."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Approval Process?",
            "answer": "Xử lý bản ghi trong Approval Process bằng cách sử dụng before/after trigger để kiểm tra trạng thái phê duyệt (`Approval.isLocked()`), cập nhật trường hoặc gửi thông báo dựa trên trạng thái, đảm bảo không gây xung đột với quy trình phê duyệt."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gán vai trò cho người dùng?",
            "answer": "Tự động gán vai trò bằng cách sử dụng before trigger để cập nhật `RoleId` trong `Trigger.new` dựa trên logic như vị trí, phòng ban, hoặc quy tắc kinh doanh, đảm bảo không cần DML bổ sung và tuân thủ quy định."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Communities?",
            "answer": "Xử lý bản ghi trong Salesforce Communities bằng cách kiểm tra `UserInfo.getUserType()` để xác định người dùng là thành viên cộng đồng, áp dụng logic phù hợp (như giới hạn quyền truy cập), đảm bảo hiệu suất và tương thích."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Mobile?",
            "answer": "Xử lý bản ghi trong Salesforce Mobile bằng cách đảm bảo Trigger chạy giống như trên web, tối ưu hóa mã để giảm thời gian xử lý (bulkify), tránh tác động tiêu cực đến trải nghiệm người dùng trên thiết bị di động."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo báo cáo?",
            "answer": "Tự động tạo báo cáo trong after trigger bằng cách sử dụng Apex để truy vấn dữ liệu, tổng hợp vào đối tượng báo cáo tùy chỉnh (như Report__c), sau đó khởi chạy Batch Apex hoặc gửi email nếu cần, đảm bảo không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Lightning?",
            "answer": "Xử lý bản ghi trong Salesforce Lightning bằng cách đảm bảo Trigger tương thích với Lightning Web Component hoặc Aura Component, sử dụng biến ngữ cảnh để kiểm tra ngữ cảnh, và tối ưu hóa để không ảnh hưởng đến giao diện Lightning Experience."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động cập nhật dashboard?",
            "answer": "Tự động cập nhật dashboard trong after trigger bằng cách sử dụng Apex để cập nhật dữ liệu nguồn của dashboard (như bản ghi Report hoặc Dashboard), sau đó khởi chạy Batch Apex hoặc Flow để làm mới dashboard, đảm bảo không vượt giới hạn tài nguyên."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Analytics?",
            "answer": "Xử lý bản ghi trong Salesforce Analytics bằng cách sử dụng after trigger để cập nhật dữ liệu cho Tableau CRM (Einstein Analytics), đảm bảo dữ liệu sẵn sàng cho phân tích qua SOQL hoặc API, tuân thủ giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Einstein?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách khởi chạy dự đoán Einstein qua API hoặc Apex, sau đó xử lý kết quả (như gán điểm số) trong `Trigger.new`, đảm bảo xử lý bất đồng bộ để tránh giới hạn."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Marketing Cloud?",
            "answer": "Xử lý bản ghi trong Marketing Cloud bằng cách sử dụng after trigger với `@future` hoặc `Queueable` để gọi API Marketing Cloud, đồng bộ dữ liệu như danh sách khách hàng hoặc chiến dịch, đảm bảo không vượt giới hạn callout."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gán nhãn cho bản ghi?",
            "answer": "Tự động gán nhãn trong before trigger bằng cách cập nhật trường tùy chỉnh (như Tag__c) trong `Trigger.new` dựa trên điều kiện (như giá trị trường, ngày tháng), đảm bảo không cần DML bổ sung."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Service Cloud?",
            "answer": "Xử lý bản ghi trong Service Cloud bằng cách sử dụng after trigger để tự động gán Case, cập nhật trạng thái, hoặc gửi thông báo Chatter, đảm bảo hiệu suất và không gây đệ quy với Process Builder/Flow."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Commerce Cloud?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách tạo bản ghi như Order hoặc Product trong Commerce Cloud, sử dụng SOQL để truy vấn dữ liệu, sau đó sử dụng DML để lưu, đảm bảo xử lý khối lượng lớn hiệu quả."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Field Service?",
            "answer": "Xử lý bản ghi trong Field Service bằng cách sử dụng after trigger để tự động gán Work Order, cập nhật lịch trình kỹ thuật viên, hoặc gửi thông báo, đảm bảo tương thích với quy trình và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Health Cloud?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách xử lý hồ sơ bệnh nhân (như Care Plan), cập nhật trạng thái, hoặc gửi thông báo, đảm bảo tuân thủ HIPAA và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Financial Services Cloud?",
            "answer": "Xử lý bản ghi trong Financial Services Cloud bằng cách sử dụng after trigger để tự động gán tài khoản, cập nhật giao dịch, hoặc xử lý yêu cầu tài chính, đảm bảo tuân thủ quy định tài chính và hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Nonprofit Cloud?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách xử lý quyên góp, cập nhật danh sách thành viên, hoặc gửi thông báo, đảm bảo hiệu quả và không vượt giới hạn tài nguyên."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Education Cloud?",
            "answer": "Xử lý bản ghi trong Education Cloud bằng cách sử dụng after trigger để tự động gán sinh viên, cập nhật điểm số, hoặc xử lý đăng ký, đảm bảo chính xác và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Government Cloud?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách xử lý hồ sơ công dân, cập nhật trạng thái, hoặc gửi thông báo, đảm bảo tuân thủ quy định chính phủ và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Industries?",
            "answer": "Xử lý bản ghi trong Salesforce Industries bằng cách sử dụng after trigger để tự động hóa quy trình ngành cụ thể (như bảo hiểm, năng lượng), đảm bảo hiệu suất và tuân thủ quy định ngành."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động gán quyền truy cập?",
            "answer": "Tự động gán quyền truy cập trong after trigger bằng cách sử dụng `Manual Sharing` hoặc `Sharing Rules` qua Apex, cập nhật quyền cho người dùng dựa trên logic trong `Trigger.new`, đảm bảo không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Platform Events?",
            "answer": "Xử lý bản ghi trong Platform Events bằng cách sử dụng Trigger trên đối tượng event (như `__e`), thực hiện logic như cập nhật bản ghi liên quan hoặc gửi thông báo, đảm bảo xử lý bất đồng bộ để không vượt giới hạn."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Streaming API?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách sử dụng dữ liệu từ Streaming API (qua Platform Events), xử lý bất đồng bộ với `@future` hoặc `Queueable`, đảm bảo không ảnh hưởng đến hiệu suất hệ thống."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Bulk API?",
            "answer": "Xử lý bản ghi trong Bulk API bằng cách đảm bảo Trigger được thiết kế để xử lý khối lượng lớn, bulkify mã, và sử dụng `Trigger.isBulk` để tối ưu hóa, tránh ảnh hưởng đến hiệu suất khi dữ liệu được nhập hàng loạt."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce REST API?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách sử dụng `@future` hoặc `Queueable` để gọi REST API, xử lý dữ liệu từ `Trigger.new`, đảm bảo tuân thủ giới hạn callout và không gây đệ quy."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce SOAP API?",
            "answer": "Xử lý bản ghi trong SOAP API bằng cách sử dụng after trigger với `@future` hoặc `Queueable` để gọi SOAP API, đồng bộ dữ liệu từ `Trigger.new`, đảm bảo tương thích và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Metadata API?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách sử dụng `@future` hoặc `Queueable` để gọi Metadata API, tạo hoặc cập nhật metadata (như custom object), đảm bảo không vượt giới hạn tài nguyên."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Tooling API?",
            "answer": "Xử lý bản ghi trong Tooling API bằng cách sử dụng after trigger với `@future` hoặc `Queueable` để gọi API, xử lý dữ liệu phát triển (như Apex Class), đảm bảo tối ưu hóa hiệu suất và không gây lỗi."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Apex REST?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách sử dụng `@future` hoặc `Queueable` để gọi Apex REST, xử lý dữ liệu từ `Trigger.new`, đảm bảo tích hợp hiệu quả và không vượt giới hạn callout."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Apex SOAP?",
            "answer": "Xử lý bản ghi trong Apex SOAP bằng cách sử dụng after trigger với `@future` hoặc `Queueable` để gọi SOAP, đồng bộ dữ liệu từ `Trigger.new`, đảm bảo tương thích và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Lightning Connect?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách sử dụng `@future` hoặc `Queueable` để đồng bộ dữ liệu từ nguồn bên ngoài qua Lightning Connect, xử lý `Trigger.new`, đảm bảo không vượt giới hạn callout."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Platform Encryption?",
            "answer": "Xử lý bản ghi trong Platform Encryption bằng cách sử dụng after trigger để kiểm tra dữ liệu mã hóa, đảm bảo logic không vi phạm chính sách bảo mật, và sử dụng API an toàn để xử lý, tuân thủ quy định."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Field Audit Trail?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách ghi log thay đổi trường vào Field Audit Trail, sử dụng `Trigger.old` và `Trigger.new` để theo dõi lịch sử, đảm bảo tuân thủ và không vượt giới hạn."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Duplicate Management?",
            "answer": "Xử lý bản ghi trong Duplicate Management bằng cách sử dụng before trigger để kiểm tra trùng lặp qua Duplicate Rules, thêm lỗi qua `addError()` nếu phát hiện, đảm bảo dữ liệu sạch và tuân thủ chính sách."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Territory Management?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách gán `TerritoryId` dựa trên logic địa lý hoặc quy tắc kinh doanh, sử dụng SOQL để xác định lãnh thổ, đảm bảo phân bổ đúng và hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Partner Relationship Management?",
            "answer": "Xử lý bản ghi trong Partner Relationship Management bằng cách sử dụng after trigger để tự động hóa quy trình đối tác, như cập nhật trạng thái hoặc gửi thông báo, đảm bảo hiệu suất và tương thích."
        },
        {
            "question": "Làm cách nào để quản lý và duy trì trigger khi có nhiều trigger hoạt động trên cùng một đối tượng?",
            "answer": "Quản lý nhiều trigger bằng cách áp dụng trigger framework (trigger handler pattern), gom tất cả logic vào một lớp handler trung tâm (như TriggerHandler), sử dụng biến static để kiểm soát đệ quy, và tổ chức mã theo mô-đun để dễ bảo trì và tránh xung đột."
        },
        {
            "question": "Làm cách nào để kiểm soát thứ tự thực thi của các trigger trên cùng một đối tượng?",
            "answer": "Salesforce không cho phép chỉ định thứ tự trực tiếp, nhưng bạn có thể sử dụng trigger handler pattern để tổ chức logic trong một lớp duy nhất, sắp xếp các phương thức xử lý (before, after) theo thứ tự mong muốn, đảm bảo không gây đệ quy hoặc xung đột."
        },
        {
            "question": "Làm cách nào để đảm bảo trigger không gây ra lỗi do dữ liệu null?",
            "answer": "Đảm bảo không lỗi null bằng cách kiểm tra `if (record.Field__c != null)` trong `Trigger.new` hoặc `Trigger.old` trước khi thao tác, sử dụng phương thức như `isEmpty()` hoặc `isBlank()` để xác nhận, tránh lỗi NullPointerException."
        },
        {
            "question": "Làm cách nào để ghi log chi tiết trong trigger để hỗ trợ quá trình debug?",
            "answer": "Ghi log chi tiết bằng cách sử dụng `System.debug()` trong Trigger để in giá trị biến, trạng thái, hoặc lỗi, hoặc tạo đối tượng tùy chỉnh (như Debug_Log__c) để lưu thông tin, sau đó phân tích qua Developer Console hoặc Apex Logs."
        },
        {
            "question": "Làm cách nào để triển khai trigger mà không ảnh hưởng đến hiệu suất của hệ thống?",
            "answer": "Triển khai trigger hiệu quả bằng cách bulkify mã, giảm số lượng SOQL/DML, sử dụng maps để truy xuất nhanh, kiểm tra giới hạn governor qua `Limits`, và chạy test với dữ liệu lớn trong sandbox để tối ưu hóa trước khi triển khai lên production."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Lightning Web Components?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách sử dụng `@wire` để lắng nghe sự kiện từ component, xử lý dữ liệu từ `Trigger.new`, đảm bảo không vượt giới hạn governor và tương thích với Lightning Web Components."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Platform Encryption?",
            "answer": "Xử lý bản ghi trong Platform Encryption bằng cách sử dụng after trigger để kiểm tra dữ liệu mã hóa, đảm bảo logic không vi phạm chính sách bảo mật, và sử dụng API an toàn để xử lý, tuân thủ quy định."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để tự động tạo bản ghi trong Salesforce Field Audit Trail?",
            "answer": "Tự động tạo bản ghi trong after trigger bằng cách ghi log thay đổi trường vào Field Audit Trail, sử dụng `Trigger.old` và `Trigger.new` để theo dõi lịch sử, đảm bảo tuân thủ và không vượt giới hạn."
        },
        {
            "question": "Làm cách nào để sử dụng Trigger để xử lý bản ghi trong Salesforce Duplicate Management?",
            "answer": "Xử lý bản ghi trong Duplicate Management bằng cách sử dụng before trigger để kiểm tra trùng lặp qua Duplicate Rules, thêm lỗi qua `addError()` nếu phát hiện, đảm bảo dữ liệu sạch và tuân thủ chính sách."
        }
    ],
    "SFDC’s Batch": [
        {
            "question": "Batch Apex trong Salesforce là gì?",
            "answer": "Batch Apex là một công cụ trong Salesforce cho phép xử lý dữ liệu lớn theo lô (batches) một cách bất đồng bộ, vượt qua các giới hạn governor thông thường (như SOQL, DML, CPU time). Nó chia dữ liệu thành các lô (mặc định 200 bản ghi/lô), chạy nền, và phù hợp cho xử lý hàng nghìn hoặc hàng triệu bản ghi mà không làm ảnh hưởng đến hiệu suất hệ thống."
        },
        {
            "question": "Khi nào bạn nên sử dụng Batch Apex?",
            "answer": "Sử dụng Batch Apex khi cần xử lý số lượng lớn bản ghi (hàng nghìn hoặc hơn), vượt qua giới hạn governor của giao dịch Apex thông thường, hoặc thực hiện công việc bất đồng bộ như cập nhật mass, xóa dữ liệu cũ, hoặc đồng bộ với hệ thống bên ngoài, đảm bảo không làm gián đoạn trải nghiệm người dùng."
        },
        {
            "question": "Lợi ích của việc sử dụng Batch Apex là gì?",
            "answer": "Lợi ích bao gồm: (1) Xử lý dữ liệu lớn hiệu quả mà không vượt giới hạn governor; (2) Mỗi lô là giao dịch riêng, nếu lỗi không ảnh hưởng lô khác; (3) Chạy nền, không làm chậm hệ thống; (4) Dễ giám sát qua Apex Jobs Dashboard; (5) Tích hợp tốt với các công cụ Salesforce như Scheduler."
        },
        {
            "question": "Làm cách nào để tạo một lớp Batch Apex?",
            "answer": "Tạo lớp Batch Apex bằng cách thực hiện interface `Database.Batchable<sObject>` hoặc `Database.Batchable<AnyType>`, định nghĩa ba phương thức: `start()` (trả về QueryLocator hoặc Iterable), `execute()` (xử lý bản ghi trong lô), và `finish()` (hoàn tất công việc), sau đó triển khai logic xử lý dữ liệu."
        },
        {
            "question": "Các phương thức trong interface Database.Batchable là gì?",
            "answer": "Interface `Database.Batchable` bao gồm: (1) `start()`: trả về `Database.QueryLocator` hoặc `Iterable` để xác định dữ liệu cần xử lý; (2) `execute()`: xử lý danh sách bản ghi trong lô (List<sObject>), thực hiện logic như DML, SOQL; (3) `finish()`: thực hiện các tác vụ sau khi tất cả lô hoàn thành, như gửi email hoặc log kết quả."
        },
        {
            "question": "Làm cách nào để lên lịch một công việc Batch Apex?",
            "answer": "Lên lịch Batch Apex bằng cách sử dụng `System.scheduleBatch(new BatchClass(), 'JobName', cronExpression)`, trong đó `cronExpression` là biểu thức cron (như '0 0 1 * * ?' cho 1h sáng hàng ngày), đảm bảo công việc chạy định kỳ mà không cần thủ công kích hoạt."
        },
        {
            "question": "Làm cách nào để giám sát công việc Batch Apex?",
            "answer": "Giám sát Batch Apex qua 'Apex Jobs' trong Setup, kiểm tra trạng thái (Completed, Failed, Processing), tiến độ (số lô đã xử lý), và lỗi (nếu có) qua cột Logs hoặc Developer Console, sau đó phân tích để tối ưu hóa hoặc sửa lỗi."
        },
        {
            "question": "Những thực hành tốt nhất cho viết mã Batch Apex là gì?",
            "answer": "Thực hành tốt nhất bao gồm: (1) Xử lý dữ liệu theo lô hiệu quả với kích thước tối ưu (200-2,000 bản ghi); (2) Sử dụng SOQL selective, tránh lồng nhau; (3) Xử lý ngoại lệ với try-catch và log lỗi; (4) Test với dữ liệu nhỏ trước khi chạy trên sản xuất; (5) Tối ưu hóa DML và callout để không vượt giới hạn."
        },
        {
            "question": "Batch Apex xử lý giao dịch như thế nào?",
            "answer": "Batch Apex chia dữ liệu thành các lô, mỗi lô là một giao dịch độc lập, có giới hạn governor riêng (như 100 SOQL, 150 DML). Nếu một lô thất bại (do lỗi), các lô khác vẫn tiếp tục, đảm bảo toàn vẹn dữ liệu và không làm gián đoạn toàn bộ công việc."
        },
        {
            "question": "Batch Apex có thể dùng với callout bên ngoài không?",
            "answer": "Có, Batch Apex có thể thực hiện callout HTTP bên ngoài trong phương thức `execute()`, nhưng cần sử dụng `@future` hoặc `Database.AllowCallouts` để cho phép, quản lý giới hạn callout (tối đa 100 mỗi giao dịch), và đảm bảo không làm chậm lô hiện tại."
        },
        {
            "question": "Sự khác biệt giữa Batch Apex và Queueable Apex là gì?",
            "answer": "Batch Apex xử lý dữ liệu lớn theo lô (tối đa 50,000 bản ghi), phù hợp cho công việc khối lượng lớn bất đồng bộ, trong khi Queueable Apex chạy một công việc đơn lẻ, nhỏ hơn, không phải lô, và có giới hạn chain (tối đa 50 job liên tiếp), ít phức tạp hơn Batch Apex."
        },
        {
            "question": "Làm cách nào để xử lý trạng thái trong Batch Apex?",
            "answer": "Xử lý trạng thái trong Batch Apex bằng cách sử dụng biến instance trong lớp (như `public Integer processedRecords = 0;`), nhưng cần cẩn thận với dữ liệu lớn để tránh giới hạn heap (6 MB mỗi lô), hoặc sử dụng `AsyncApexJob` trong `finish()` để theo dõi tiến độ."
        },
        {
            "question": "Giới hạn governor cho Batch Apex là gì?",
            "answer": "Giới hạn governor cho mỗi lô Batch Apex bao gồm: 100 SOQL queries, 150 DML statements, 10,000 ms CPU time, 6 MB heap size, và tối đa 50,000 bản ghi mỗi batch (mặc định 200, có thể tùy chỉnh). Tổng số job đồng thời bị giới hạn bởi tổ chức (thường 5)."
        },
        {
            "question": "Làm cách nào để lên lịch Batch Apex chạy vào thời gian cụ thể?",
            "answer": "Lên lịch bằng cách sử dụng `System.scheduleBatch(new BatchClass(), 'JobName', cronExpression)`, trong đó `cronExpression` định nghĩa thời gian cụ thể (như '0 15 10 ? * MON-FRI' cho 10:15 sáng từ thứ Hai đến thứ Sáu)."
        },
        {
            "question": "Vai trò của phương thức Database.executeBatch là gì?",
            "answer": "Phương thức `Database.executeBatch(new BatchClass(), batchSize)` khởi chạy Batch Apex job ngay lập tức, không cần lên lịch, với `batchSize` tùy chọn (mặc định 200, tối đa 2,000) để điều chỉnh số bản ghi mỗi lô, phù hợp cho công việc khẩn cấp."
        },
        {
            "question": "Điều gì xảy ra nếu công việc Batch Apex thất bại?",
            "answer": "Nếu Batch Apex job thất bại, nó bị đánh dấu 'Failed' trong Apex Jobs, các lô chưa xử lý không chạy, và lỗi được ghi trong debug logs. Bạn có thể xem chi tiết qua Developer Console, sửa lỗi, sau đó chạy lại job bằng `Database.executeBatch` hoặc `System.scheduleBatch`."
        },
        {
            "question": "Làm cách nào để xử lý ngoại lệ trong Batch Apex?",
            "answer": "Xử lý ngoại lệ trong Batch Apex bằng cách sử dụng `try-catch` trong phương thức `execute()` để bắt các ngoại lệ như `DmlException` hoặc `QueryException`, ghi log lỗi qua `System.debug` hoặc lưu vào đối tượng tùy chỉnh, quyết định tiếp tục lô tiếp theo hoặc dừng job."
        },
        {
            "question": "Số lượng công việc Batch Apex chạy đồng thời tối đa là bao nhiêu?",
            "answer": "Số lượng Batch Apex job chạy đồng thời tối đa phụ thuộc vào giấy phép tổ chức, thường giới hạn 5 job đồng thời cho mỗi tổ chức (có thể tăng qua hỗ trợ Salesforce), cần quản lý lịch trình để tránh xung đột tài nguyên."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của công việc Batch Apex?",
            "answer": "Tối ưu hóa hiệu suất bằng cách: (1) Sử dụng kích thước lô hợp lý (200-2,000); (2) Sử dụng SOQL selective với indexing; (3) Tránh DML/SOQL trong vòng lặp; (4) Áp dụng caching cho dữ liệu tĩnh; (5) Kiểm tra giới hạn governor qua `Limits` để điều chỉnh logic."
        },
        {
            "question": "Làm cách nào để kiểm tra một công việc Batch Apex?",
            "answer": "Kiểm tra Batch Apex bằng cách viết lớp test Apex với `@isTest`, tạo dữ liệu mẫu, khởi chạy job qua `Test.startTest(); Database.executeBatch(new BatchClass()); Test.stopTest();`, sau đó sử dụng `System.assert` để kiểm tra kết quả, đảm bảo độ phủ mã tối thiểu 75%."
        },
        {
            "question": "Batch Apex là một phần của Apex Code hay là một tính năng riêng biệt?",
            "answer": "Batch Apex là một phần của Apex Code, là một tính năng mở rộng trong Salesforce để xử lý dữ liệu lớn theo lô, dựa trên framework Apex và interface `Database.Batchable`, tích hợp chặt chẽ với nền tảng để quản lý công việc bất đồng bộ."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu nào?",
            "answer": "Batch Apex có thể xử lý bất kỳ dữ liệu nào trong Salesforce mà bạn có thể truy vấn qua SOQL, bao gồm bản ghi từ đối tượng tiêu chuẩn (Account, Contact), tùy chỉnh (Custom_Object__c), hoặc dữ liệu liên quan qua mối quan hệ, phù hợp cho các tác vụ như cập nhật, xóa, hoặc tạo mass."
        },
        {
            "question": "Giới hạn governor là gì và tại sao Batch Apex giúp vượt qua chúng?",
            "answer": "Giới hạn governor là các giới hạn tài nguyên trong Salesforce (như 100 SOQL, 150 DML mỗi giao dịch) để đảm bảo hiệu suất và công bằng. Batch Apex vượt qua chúng bằng cách chia dữ liệu thành các lô, mỗi lô là giao dịch riêng, có giới hạn riêng, cho phép xử lý khối lượng lớn mà không vi phạm giới hạn tổng thể."
        },
        {
            "question": "Phương thức start trong Batch Apex trả về gì?",
            "answer": "Phương thức `start()` trong Batch Apex trả về một `Database.QueryLocator` (kết quả của SOQL query) hoặc `Iterable` để xác định tập hợp bản ghi cần xử lý, giúp Batch Apex truy xuất dữ liệu lớn hiệu quả mà không bị giới hạn số lượng bản ghi."
        },
        {
            "question": "Làm cách nào để xác định kích thước của mỗi lô trong Batch Apex?",
            "answer": "Xác định kích thước lô bằng cách sử dụng `Database.executeBatch(new BatchClass(), batchSize)` hoặc `System.scheduleBatch(new BatchClass(), 'JobName', 0, batchSize)`, trong đó `batchSize` là số bản ghi mỗi lô (mặc định 200, tối đa 2,000), tối ưu hóa dựa trên dữ liệu và giới hạn governor."
        },
        {
            "question": "Trong phương thức execute, làm cách nào để truy cập các bản ghi của lô hiện tại?",
            "answer": "Trong `execute(List<sObject> scope)`, tham số `scope` chứa danh sách bản ghi (List<sObject>) của lô hiện tại, cho phép truy cập trực tiếp qua vòng lặp (ví dụ: `for (Account acc : scope) { // logic }`), xử lý từng bản ghi trong lô mà không cần truy vấn thêm."
        },
        {
            "question": "Làm cách nào để lên lịch một Batch Apex job chạy hàng ngày vào một thời gian cụ thể?",
            "answer": "Lên lịch hàng ngày bằng `System.scheduleBatch(new BatchClass(), 'DailyJob', '0 0 1 * * ?')`, trong đó biểu thức cron '0 0 1 * * ?' chỉ định chạy lúc 1h sáng mỗi ngày, đảm bảo công việc tự động và không cần kích hoạt thủ công."
        },
        {
            "question": "Có thể chạy Batch Apex job ngay lập tức không, chứ không phải lên lịch?",
            "answer": "Có, chạy ngay lập tức bằng `Database.executeBatch(new BatchClass(), batchSize)`, khởi động job đồng bộ trong ngữ cảnh hiện tại, không cần up lịch, phù hợp cho công việc khẩn cấp hoặc test."
        },
        {
            "question": "Nếu tôi muốn chạy Batch Apex job sau một khoảng thời gian nhất định, chẳng hạn như 5 phút sau, làm cách nào?",
            "answer": "Chạy Batch Apex sau 5 phút bằng cách sử dụng `System.scheduleBatch(new BatchClass(), 'DelayedJob', cronExpression)`, tính toán biểu thức cron dựa trên thời gian hiện tại cộng thêm 5 phút (ví dụ: '0 5 * * * ?' nếu tính theo phút), đảm bảo chạy đúng thời điểm."
        },
        {
            "question": "Làm cách nào để xem log của một Batch Apex job?",
            "answer": "Xem log Batch Apex qua 'Apex Jobs' trong Setup, chọn job, nhấp vào cột Logs để truy cập debug logs trong Developer Console, phân tích chi tiết lỗi, thời gian thực thi, và dữ liệu xử lý để debug hoặc tối ưu hóa."
        },
        {
            "question": "Nếu một lô trong Batch Apex job thất bại, có thể tiếp tục các lô sau đó không?",
            "answer": "Có, mỗi lô là giao dịch riêng, nên nếu một lô thất bại (do lỗi), các lô sau đó vẫn tiếp tục chạy, đảm bảo toàn vẹn công việc, nhưng cần kiểm tra log để sửa lỗi và chạy lại lô thất bại nếu cần."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong phương thức execute của Batch Apex?",
            "answer": "Xử lý lỗi trong `execute()` bằng cách sử dụng `try-catch` để bắt ngoại lệ (như `DmlException`, `QueryException`), ghi log lỗi qua `System.debug` hoặc lưu vào đối tượng tùy chỉnh, quyết định bỏ qua lỗi, tiếp tục lô, hoặc dừng job nếu nghiêm trọng."
        },
        {
            "question": "Tại sao kích thước lô quan trọng trong Batch Apex?",
            "answer": "Kích thước lô ảnh hưởng đến hiệu suất và tài nguyên: lô quá lớn có thể vượt giới hạn governor (như heap size), lô quá nhỏ làm tăng số giao dịch, chậm tiến độ. Chọn kích thước hợp lý (200-2,000) cân bằng giữa hiệu quả và giới hạn tài nguyên hệ thống."
        },
        {
            "question": "Làm cách nào để tối ưu hóa truy vấn SOQL trong Batch Apex?",
            "answer": "Tối ưu hóa SOQL bằng cách: (1) Sử dụng truy vấn selective với indexing; (2) Chỉ lấy các trường cần thiết; (3) Tránh SOQL lồng nhau; (4) Sử dụng `WHERE` để lọc dữ liệu nhỏ hơn, giảm tải server và tăng tốc xử lý trong `start()` và `execute()`."
        },
        {
            "question": "Có thể sử dụng caching để tăng hiệu suất trong Batch Apex không?",
            "answer": "Có, sử dụng caching bằng cách lưu trữ kết quả SOQL hoặc tính toán trong biến instance hoặc `static` (nếu phù hợp), giảm số lần truy vấn trong các lô, nhưng cần cẩn thận với giới hạn heap size (6 MB mỗi lô) để không gây lỗi."
        },
        {
            "question": "Làm cách nào để kích hoạt một Batch Apex job từ một trigger?",
            "answer": "Kích hoạt Batch Apex từ Trigger bằng cách sử dụng `@future` hoặc `Queueable` trong Trigger (vì Trigger là synchronous, không thể gọi Batch trực tiếp), sau đó gọi `Database.executeBatch(new BatchClass())` từ phương thức bất đồng bộ, đảm bảo không vượt giới hạn governor."
        },
        {
            "question": "Một ví dụ về việc sử dụng Batch Apex để di chuyển dữ liệu từ một đối tượng sang đối tượng khác.",
            "answer": "Ví dụ: tạo lớp Batch Apex `MigrateDataBatch` xử lý di chuyển dữ liệu từ `Old_Object__c` sang `New_Object__c`: `start()` trả về QueryLocator cho `Old_Object__c`, `execute()` sao chép dữ liệu, `finish()` gửi email báo hoàn thành, chạy qua `Database.executeBatch(new MigrateDataBatch())`."
        },
        {
            "question": "Batch Apex có thể được sử dụng để cập nhật mass các trường trên các bản ghi không?",
            "answer": "Có, Batch Apex lý tưởng để cập nhật mass các trường trên nhiều bản ghi, ví dụ: cập nhật trường `Status` trên hàng nghìn Account, sử dụng `start()` để truy vấn, `execute()` để cập nhật qua DML, đảm bảo xử lý theo lô và không vượt giới hạn."
        },
        {
            "question": "Sự khác biệt giữa Batch Apex và Schedulable Apex là gì?",
            "answer": "Batch Apex là công cụ xử lý dữ liệu lớn theo lô, bất đồng bộ, phù hợp cho khối lượng lớn, trong khi Schedulable Apex là interface để lên lịch chạy bất kỳ Apex code nào (bao gồm Batch Apex) vào thời gian cụ thể, không tập trung vào xử lý dữ liệu lớn mà vào định thời gian."
        },
        {
            "question": "Khi nào nên sử dụng Batch Apex thay vì viết một script bên ngoài để xử lý dữ liệu?",
            "answer": "Sử dụng Batch Apex khi cần tích hợp chặt chẽ với Salesforce, không cần lo về authentication hay API limits, dễ giám sát qua Apex Jobs, và tận dụng cơ chế bất đồng bộ, thay vì script bên ngoài đòi hỏi cấu hình bổ sung và ít tương thích hơn."
        },
        {
            "question": "Những cách để tối ưu hóa kích thước lô trong Batch Apex là gì?",
            "answer": "Tối ưu hóa kích thước lô bằng cách: (1) Thử nghiệm với các kích thước khác nhau (200-2,000) để tìm giá trị tối ưu; (2) Cân bằng giữa số bản ghi/lô và số lô cần xử lý; (3) Kiểm tra giới hạn governor và tài nguyên (heap, CPU) để tránh lỗi."
        },
        {
            "question": "Tại sao quan trọng phải test Batch Apex job với dữ liệu nhỏ trước khi chạy trên dữ liệu lớn?",
            "answer": "Test với dữ liệu nhỏ giúp phát hiện lỗi logic, kiểm tra hiệu suất, và đảm bảo mã không vượt giới hạn governor, tránh hậu quả nghiêm trọng khi chạy trên dữ liệu lớn, đồng thời tối ưu hóa kích thước lô và logic trước khi triển khai sản xuất."
        },
        {
            "question": "Batch Apex có thể xử lý các giao dịch phức tạp như thế nào?",
            "answer": "Batch Apex xử lý giao dịch phức tạp bằng cách chia nhỏ thành các lô độc lập, mỗi lô thực hiện logic như DML, SOQL, callout, nhưng cần quản lý giao dịch trong `execute()` để tránh lỗi, dùng `try-catch` và log lỗi để đảm bảo toàn vẹn dữ liệu."
        },
        {
            "question": "Có thể tùy chỉnh kích thước lô trong Batch Apex không?",
            "answer": "Có, tùy chỉnh kích thước lô bằng cách sử dụng tham số `batchSize` trong `Database.executeBatch(new BatchClass(), batchSize)` hoặc `System.scheduleBatch(new BatchClass(), 'JobName', 0, batchSize)`, với giá trị từ 1 đến 2,000, tùy thuộc vào dữ liệu và giới hạn."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xóa dữ liệu lớn không?",
            "answer": "Có, Batch Apex có thể xóa dữ liệu lớn bằng cách sử dụng `start()` để truy vấn bản ghi cần xóa, `execute()` để thực hiện `delete` trên danh sách bản ghi trong lô, đảm bảo không vượt giới hạn DML (150 mỗi lô) và tối ưu hóa hiệu suất."
        },
        {
            "question": "Batch Apex có thể được sử dụng để tạo dữ liệu mới không?",
            "answer": "Có, Batch Apex có thể tạo dữ liệu mới bằng cách sử dụng `start()` để xác định dữ liệu nguồn, `execute()` để tạo danh sách bản ghi mới (như `List<Account> newRecords = new List<Account>();`) và `insert` qua DML, xử lý theo lô để đảm bảo hiệu quả."
        },
        {
            "question": "Phương thức finish trong Batch Apex được gọi khi nào?",
            "answer": "Phương thức `finish()` được gọi sau khi tất cả các lô trong Batch Apex job hoàn thành, hoặc nếu job bị hủy, dùng để thực hiện các tác vụ cuối cùng như gửi email, log kết quả, hoặc khởi chạy công việc khác (như Batch hoặc Queueable)."
        },
        {
            "question": "Trong phương thức finish, có thể làm gì?",
            "answer": "Trong `finish()`, có thể: (1) Gửi email thông báo qua `Messaging.SingleEmailMessage`; (2) Ghi log kết quả vào đối tượng tùy chỉnh; (3) Khởi chạy Batch hoặc Queueable khác qua `Database.executeBatch` hoặc `System.enqueueJob`; (4) Tổng hợp dữ liệu từ tất cả lô để báo cáo."
        },
        {
            "question": "Làm cách nào để hủy một Batch Apex job đang chạy?",
            "answer": "Hủy Batch Apex job bằng cách sử dụng `System.abortJob(jobId)`, trong đó `jobId` là ID của job (lấy từ `AsyncApexJob` trong `finish()` hoặc Apex Jobs), đảm bảo không làm gián đoạn các lô đã hoàn thành."
        },
        {
            "question": "Có thể lên lịch một Batch Apex job để chạy hàng tuần vào một ngày và giờ cụ thể không?",
            "answer": "Có, lên lịch hàng tuần bằng `System.scheduleBatch(new BatchClass(), 'WeeklyJob', '0 0 1 ? * MON')`, trong đó biểu thức cron '0 0 1 ? * MON' chỉ định chạy lúc 1h sáng thứ Hai hàng tuần, đảm bảo công việc tự động và chính xác."
        },
        {
            "question": "Làm cách nào để xem số lượng lô đã xử lý và số lượng bản ghi trong mỗi lô?",
            "answer": "Xem số lượng lô và bản ghi qua 'Apex Jobs' trong Setup, chọn job, kiểm tra cột 'Status' và 'Completed Batches', sau đó phân tích debug logs hoặc sử dụng `AsyncApexJob` trong `finish()` để truy xuất chi tiết (như `jobInfo.NumberOfBatches`, `jobInfo.JobItemsProcessed`)."
        },
        {
            "question": "Nếu có lỗi trong một lô, có thể xem chi tiết lỗi ở đâu?",
            "answer": "Xem chi tiết lỗi trong debug logs của job, truy cập qua 'Apex Jobs' trong Setup, chọn job, nhấp vào cột Logs, sau đó phân tích trong Developer Console để xác định nguyên nhân (như ngoại lệ, giới hạn governor) và sửa lỗi."
        },
        {
            "question": "Tại sao quan trọng phải giảm số lượng truy vấn SOQL trong Batch Apex?",
            "answer": "Giảm SOQL trong Batch Apex quan trọng vì mỗi lô có giới hạn 100 SOQL queries, và truy vấn dư thừa làm chậm tiến độ, tăng nguy cơ vượt giới hạn, ảnh hưởng hiệu suất. Sử dụng maps, bulkification, và indexing giúp tối ưu hóa."
        },
        {
            "question": "Có thể sử dụng biến static để lưu trữ dữ liệu giữa các lô không?",
            "answer": "Có, sử dụng biến static trong lớp Batch Apex để lưu trữ dữ liệu giữa các lô (như tổng số bản ghi), nhưng cần cẩn thận với giới hạn heap size (6 MB mỗi lô) và xung đột khi nhiều job chạy đồng thời, nên ưu tiên `finish()` để tổng hợp."
        },
        {
            "question": "Flow hoặc Process Builder có thể khởi chạy Batch Apex không?",
            "answer": "Flow hoặc Process Builder không thể trực tiếp khởi chạy Batch Apex (vì chúng synchronous, Batch là asynchronous), nhưng có thể gọi một Apex class với `@future` hoặc `Queueable` từ Flow/Process, sau đó khởi chạy Batch Apex qua `Database.executeBatch`."
        },
        {
            "question": "Có thể sử dụng Batch Apex để tích hợp với các hệ thống bên ngoài qua API không?",
            "answer": "Có, Batch Apex có thể tích hợp API bên ngoài trong `execute()` với `@future` hoặc `Database.AllowCallouts`, nhưng cần quản lý giới hạn callout (100 mỗi lô), sử dụng batching để giảm số lượng yêu cầu, và đảm bảo không làm chậm lô hiện tại."
        },
        {
            "question": "Một ví dụ về việc sử dụng Batch Apex để cập nhật trường tính toán trên các bản ghi.",
            "answer": "Ví dụ: tạo `UpdateCalculatedFieldBatch` để cập nhật trường `Total_Amount__c` trên Account: `start()` truy vấn Account, `execute()` tính toán tổng (`acc.Total_Amount__c = acc.Opportunities.size() * 100;`), `finish()` gửi email báo hoàn thành, chạy qua `Database.executeBatch(new UpdateCalculatedFieldBatch())`."
        },
        {
            "question": "Batch Apex có thể được sử dụng để tạo báo cáo hoặc phân tích dữ liệu lớn không?",
            "answer": "Có, Batch Apex có thể tạo báo cáo/phân tích dữ liệu lớn bằng cách truy vấn dữ liệu trong `start()`, tổng hợp trong `execute()` (như đếm, trung bình), lưu kết quả vào đối tượng báo cáo tùy chỉnh trong `finish()`, sau đó gửi email hoặc cập nhật dashboard."
        },
        {
            "question": "Những sai lầm phổ biến mà người phát triển thường mắc phải với Batch Apex là gì?",
            "answer": "Sai lầm phổ biến bao gồm: (1) Không tối ưu kích thước lô, dẫn đến vượt giới hạn governor; (2) Không xử lý ngoại lệ, gây thất bại job mà không log; (3) Sử dụng SOQL không hiệu quả, chậm tiến độ; (4) Không test với dữ liệu nhỏ, gây lỗi trên sản xuất."
        },
        {
            "question": "Batch Apex có thể xử lý các đối tượng con hoặc các mối quan hệ phức tạp không?",
            "answer": "Có, Batch Apex có thể xử lý đối tượng con hoặc mối quan hệ phức tạp bằng cách sử dụng SOQL relationship queries (như `SELECT Id, (SELECT Id FROM Contacts) FROM Account`), xử lý trong `execute()` qua logic DML, đảm bảo tối ưu hóa để tránh giới hạn governor."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong các đối tượng tùy chỉnh có mối quan hệ master-slave không?",
            "answer": "Có, Batch Apex có thể xử lý đối tượng tùy chỉnh với mối quan hệ master-detail, sử dụng SOQL để truy vấn cả master và detail, áp dụng logic trong `execute()` (như cập nhật hoặc xóa), tuân thủ quy tắc cascade và giới hạn governor."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu trong sandbox không?",
            "answer": "Có, Batch Apex hoạt động trong sandbox giống như production, nhưng nên test kỹ để không ảnh hưởng dữ liệu thử nghiệm, sử dụng `UserInfo.isSandbox()` để áp dụng logic khác nếu cần, đảm bảo an toàn khi phát triển."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để gửi email thông báo sau khi hoàn tất?",
            "answer": "Sử dụng `Messaging.SingleEmailMessage` trong phương thức `finish()` để gửi email thông báo, cấu hình người nhận qua `setToAddresses()`, nội dung qua `setSubject()` và `setPlainTextBody()`, đảm bảo không vượt giới hạn email hàng ngày (5,000 email)."
        },
        {
            "question": "Có thể sử dụng Batch Apex để tạo các bản ghi trong đối tượng tùy chỉnh không?",
            "answer": "Có, Batch Apex có thể tạo bản ghi trong đối tượng tùy chỉnh bằng cách sử dụng `start()` để xác định dữ liệu nguồn, `execute()` để tạo danh sách bản ghi mới qua `insert` DML, đảm bảo xử lý theo lô và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để cập nhật mass các trường trên các bản ghi liên quan?",
            "answer": "Cập nhật mass các trường trên bản ghi liên quan bằng cách sử dụng `start()` để truy vấn bản ghi liên quan (như Contact của Account), `execute()` để cập nhật qua DML, xử lý theo lô để đảm bảo hiệu suất và không vượt giới hạn governor."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu từ các nguồn bên ngoài không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu từ nguồn bên ngoài bằng cách sử dụng callout HTTP trong `execute()` với `@future`, đồng bộ dữ liệu qua API, nhưng cần quản lý giới hạn callout (100 mỗi lô) và tối ưu hóa để không làm chậm lô."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để tổng hợp dữ liệu cho báo cáo?",
            "answer": "Tổng hợp dữ liệu cho báo cáo bằng cách sử dụng `start()` để truy vấn dữ liệu, `execute()` để tính toán (như đếm, trung bình) trên mỗi lô, lưu kết quả vào đối tượng báo cáo tùy chỉnh trong `finish()`, sau đó gửi email hoặc cập nhật dashboard."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong Lightning Web Component không?",
            "answer": "Có, Batch Apex có thể được gọi từ Lightning Web Component thông qua Apex (sử dụng `@wire` hoặc imperative call), nhưng cần đảm bảo xử lý bất đồng bộ qua `Database.executeBatch` để không làm chậm giao diện người dùng, sử dụng callback để hiển thị kết quả."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Flow?",
            "answer": "Xử lý dữ liệu trong Flow bằng cách sử dụng Apex action trong Flow để gọi Batch Apex qua `@future` hoặc `Queueable`, sau đó khởi chạy `Database.executeBatch`, đảm bảo xử lý bất đồng bộ và không vượt giới hạn governor."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu trong Process Builder không?",
            "answer": "Có, Process Builder có thể gọi Batch Apex thông qua Apex action với `@future` hoặc `Queueable`, sau đó khởi chạy `Database.executeBatch`, đảm bảo xử lý bất đồng bộ và không gây xung đột với quy trình đồng bộ của Process Builder."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Analytics?",
            "answer": "Xử lý dữ liệu trong Salesforce Analytics (Tableau CRM) bằng cách sử dụng Batch Apex để truy vấn, tổng hợp dữ liệu, sau đó cập nhật vào đối tượng Dataset qua API, đảm bảo dữ liệu sẵn sàng cho phân tích và không vượt giới hạn governor."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Marketing Cloud không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Marketing Cloud bằng cách sử dụng callout HTTP trong `execute()` với `@future`, đồng bộ dữ liệu như danh sách khách hàng hoặc chiến dịch, nhưng cần quản lý giới hạn callout và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Service Cloud?",
            "answer": "Xử lý dữ liệu trong Service Cloud bằng cách sử dụng Batch Apex để tự động hóa quy trình như cập nhật Case, gửi thông báo, hoặc đồng bộ dữ liệu, đảm bảo xử lý khối lượng lớn hiệu quả và không làm chậm hệ thống."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu trong Salesforce Field Service không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Field Service bằng cách tự động gán Work Order, cập nhật lịch trình kỹ thuật viên, hoặc đồng bộ dữ liệu, đảm bảo xử lý theo lô và tối ưu hóa hiệu suất cho khối lượng lớn."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Health Cloud?",
            "answer": "Xử lý dữ liệu trong Health Cloud bằng cách sử dụng Batch Apex để xử lý hồ sơ bệnh nhân, cập nhật Care Plan, hoặc gửi thông báo, đảm bảo tuân thủ HIPAA, xử lý bất đồng bộ, và không vượt giới hạn governor."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Financial Services Cloud không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Financial Services Cloud bằng cách tự động hóa quy trình tài chính như cập nhật giao dịch, gán tài khoản, hoặc xử lý yêu cầu, đảm bảo tuân thủ quy định tài chính và hiệu suất cao."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Nonprofit Cloud?",
            "answer": "Xử lý dữ liệu trong Nonprofit Cloud bằng cách sử dụng Batch Apex để xử lý quyên góp, cập nhật danh sách thành viên, hoặc gửi thông báo, đảm bảo hiệu quả, xử lý khối lượng lớn, và không vượt giới hạn tài nguyên."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu trong Salesforce Education Cloud không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Education Cloud bằng cách tự động hóa quy trình như cập nhật điểm số, gán sinh viên, hoặc xử lý đăng ký, đảm bảo chính xác và hiệu suất cho dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Government Cloud?",
            "answer": "Xử lý dữ liệu trong Government Cloud bằng cách sử dụng Batch Apex để xử lý hồ sơ công dân, cập nhật trạng thái, hoặc gửi thông báo, đảm bảo tuân thủ quy định chính phủ, xử lý bất đồng bộ, và tối ưu hóa hiệu suất."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Industries không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Salesforce Industries (như bảo hiểm, năng lượng, viễn thông) bằng cách tự động hóa quy trình như cập nhật dữ liệu khách hàng, đồng bộ giao dịch, hoặc xử lý khối lượng lớn bản ghi liên quan đến ngành cụ thể, đảm bảo hiệu suất, tuân thủ quy định, và không vượt giới hạn governor."
        },
        {
            "question": "Làm cách nào để giám sát và phân tích hiệu suất Batch Apex qua debug logs?",
            "answer": "Giám sát hiệu suất Batch Apex qua debug logs bằng cách bật log trong Developer Console, theo dõi thời gian thực thi từng lô (`Limits.getCpuTime()`), số lượng SOQL/DML (`Limits.getQueries()`, `Limits.getDmlStatements()`), và lỗi trong `execute()` hoặc `finish()`. Phân tích logs trong Apex Jobs Dashboard để tối ưu hóa mã và tài nguyên."
        },
        {
            "question": "Có giới hạn số lượng Batch Apex job có thể chạy đồng thời không?",
            "answer": "Có, Salesforce giới hạn số lượng Batch Apex job chạy đồng thời, thường là 5 job trên mỗi tổ chức (có thể tăng qua hỗ trợ Salesforce), phụ thuộc vào giấy phép và cấu hình tổ chức. Cần quản lý lịch trình qua `System.scheduleBatch` để tránh xung đột tài nguyên."
        },
        {
            "question": "Làm cách nào để đảm bảo Batch Apex không làm ảnh hưởng đến hiệu suất của hệ thống production?",
            "answer": "Đảm bảo hiệu suất bằng cách: (1) Chạy job vào giờ thấp điểm (như ban đêm); (2) Tối ưu hóa kích thước lô và SOQL/DML; (3) Sử dụng `System.scheduleBatch` để kiểm soát thời gian; (4) Kiểm tra giới hạn governor qua `Limits`; (5) Giám sát qua Apex Jobs Dashboard để đảm bảo không làm chậm hệ thống."
        },
        {
            "question": "Có cách nào để phân chia và xử lý một Batch Apex job theo nhiều bước phụ (sub-batches)?",
            "answer": "Có, phân chia Batch Apex job thành sub-batches bằng cách sử dụng logic trong `execute()` để chia nhỏ danh sách bản ghi (`scope`) thành các nhóm nhỏ hơn (ví dụ: theo ID hoặc trường cụ thể), sau đó xử lý từng nhóm riêng biệt, sử dụng biến instance trong lớp để theo dõi tiến độ, đảm bảo hiệu suất."
        },
        {
            "question": "Làm cách nào để Batch Apex xử lý các tác vụ liên quan đến báo cáo tự động?",
            "answer": "Xử lý báo cáo tự động bằng cách sử dụng `start()` để truy vấn dữ liệu, `execute()` để tổng hợp (như đếm, trung bình) trên mỗi lô, và `finish()` để lưu kết quả vào đối tượng báo cáo tùy chỉnh (như Report_Summary__c), gửi email hoặc cập nhật dashboard, đảm bảo không vượt giới hạn governor."
        },
        {
            "question": "Có thể sử dụng Batch Apex để tự động xóa dữ liệu cũ không?",
            "answer": "Có, Batch Apex có thể xóa dữ liệu cũ bằng cách sử dụng `start()` để truy vấn bản ghi dựa trên điều kiện (như ngày tạo), `execute()` để thực hiện `delete` trên danh sách bản ghi trong lô, đảm bảo không vượt giới hạn DML (150 mỗi lô) và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để Batch Apex tích hợp với các công cụ giám sát của Salesforce?",
            "answer": "Tích hợp Batch Apex với công cụ giám sát bằng cách sử dụng debug logs, Developer Console, và Apex Jobs Dashboard để theo dõi trạng thái, tiến độ, lỗi, và hiệu suất của job, sau đó sử dụng thông tin này để tối ưu hóa hoặc báo cáo qua Apex hoặc Flow."
        },
        {
            "question": "Làm cách nào để kiểm soát mức độ sử dụng tài nguyên khi chạy Batch Apex?",
            "answer": "Kiểm soát tài nguyên bằng cách: (1) Sử dụng kích thước lô phù hợp (200-2,000); (2) Theo dõi giới hạn governor qua `Limits.getCpuTime()`, `Limits.getQueries()`, v.v.; (3) Tối ưu SOQL/DML để giảm tải; (4) Chạy job vào giờ thấp điểm để tránh ảnh hưởng hệ thống production."
        },
        {
            "question": "Làm cách nào để xử lý lỗi phức tạp khi Batch Apex không thể hoàn thành một lô do ngoại lệ?",
            "answer": "Xử lý lỗi phức tạp bằng cách sử dụng `try-catch` trong `execute()` để bắt ngoại lệ, ghi log lỗi vào đối tượng tùy chỉnh (như Error_Log__c), cấu hình retry logic (nếu cần) qua `Queueable` hoặc chạy lại lô thất bại, đảm bảo không ảnh hưởng các lô khác."
        },
        {
            "question": "Làm cách nào để Batch Apex xử lý các dữ liệu cập nhật liên tục từ hệ thống bên ngoài?",
            "answer": "Xử lý dữ liệu cập nhật liên tục bằng cách thiết kế Batch Apex chạy định kỳ qua `System.scheduleBatch`, sử dụng `start()` để truy vấn dữ liệu mới (dựa trên timestamp hoặc điều kiện), `execute()` để đồng bộ qua callout API, đảm bảo xử lý bất đồng bộ và không vượt giới hạn callout."
        },
        {
            "question": "Có thể sử dụng Batch Apex để đồng bộ hóa dữ liệu giữa các đối tượng không liên quan trực tiếp không?",
            "answer": "Có, Batch Apex có thể đồng bộ hóa dữ liệu giữa các đối tượng không liên quan bằng cách sử dụng `start()` để truy vấn dữ liệu từ đối tượng nguồn, `execute()` để tạo/cập nhật bản ghi trong đối tượng đích qua SOQL/DML, đảm bảo xử lý theo lô và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để Batch Apex làm việc với các đối tượng có lượng dữ liệu cực lớn như 1 triệu bản ghi?",
            "answer": "Xử lý 1 triệu bản ghi bằng cách sử dụng `Database.QueryLocator` trong `start()` để truy xuất dữ liệu lớn, đặt kích thước lô nhỏ (200-1,000) trong `Database.executeBatch`, tối ưu SOQL với indexing, và chạy job vào giờ thấp điểm để đảm bảo hiệu suất và không vượt giới hạn."
        },
        {
            "question": "Làm cách nào để Batch Apex kết hợp với các kỹ thuật asynchronous khác để tối ưu hóa quá trình xử lý?",
            "answer": "Kết hợp Batch Apex với `Queueable` hoặc `@future` bằng cách sử dụng `finish()` để khởi chạy các job bất đồng bộ khác, chia nhỏ tác vụ (như callout, DML phức tạp), giảm tải hệ thống, và đảm bảo không vượt giới hạn chain (50 job Queueable liên tiếp)."
        },
        {
            "question": "Làm cách nào để theo dõi và báo cáo các thông số quan trọng của Batch Apex job như thời gian chạy, số bản ghi xử lý, và lỗi?",
            "answer": "Theo dõi thông số qua debug logs, Apex Jobs Dashboard, và `AsyncApexJob` trong `finish()` (như `jobInfo.NumberOfBatches`, `jobInfo.JobItemsProcessed`), ghi log vào đối tượng tùy chỉnh (như Batch_Log__c) để báo cáo thời gian chạy, số bản ghi, và lỗi, sau đó gửi email hoặc cập nhật dashboard."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Commerce Cloud?",
            "answer": "Xử lý dữ liệu trong Commerce Cloud bằng cách sử dụng Batch Apex để đồng bộ đơn hàng, cập nhật trạng thái sản phẩm, hoặc xử lý khối lượng lớn bản ghi, đảm bảo callout API (nếu cần) qua `@future`, và tối ưu hóa hiệu suất cho dữ liệu thương mại."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Service Cloud Voice không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Service Cloud Voice bằng cách tự động hóa xử lý cuộc gọi, cập nhật bản ghi Case từ dữ liệu Voice, đảm bảo xử lý bất đồng bộ và không vượt giới hạn governor, tối ưu hóa cho dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Einstein Voice?",
            "answer": "Xử lý dữ liệu trong Einstein Voice bằng cách sử dụng Batch Apex để đồng bộ dữ liệu giọng nói, tạo dự đoán, và cập nhật bản ghi (như Case hoặc Lead), đảm bảo callout API qua `@future` và tối ưu hóa hiệu suất cho dữ liệu AI."
        },
        {
            "question": "Batch Apex có thể được sử dụng để xử lý dữ liệu trong Salesforce Platform Events không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu từ Platform Events bằng cách sử dụng `start()` để truy vấn event (như `__e`), `execute()` để xử lý logic trên từng event, đảm bảo xử lý bất đồng bộ và không vượt giới hạn governor, phù hợp cho dữ liệu thời gian thực."
        },
        {
            "question": "Làm cách nào để sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Duplicate Management?",
            "answer": "Xử lý dữ liệu trong Duplicate Management bằng cách sử dụng Batch Apex để phát hiện và gộp bản ghi trùng lặp qua SOQL, cập nhật hoặc xóa bản ghi trong `execute()`, đảm bảo xử lý theo lô và không vượt giới hạn governor."
        },
        {
            "question": "Có thể sử dụng Batch Apex để xử lý dữ liệu trong Salesforce Territory Management không?",
            "answer": "Có, Batch Apex có thể xử lý dữ liệu trong Territory Management bằng cách tự động gán lãnh thổ cho bản ghi (như Account, Opportunity), sử dụng `start()` để truy vấn, `execute()` để cập nhật `TerritoryId`, đảm bảo hiệu suất cao."
        }
    ],
    "SFDC’s TestClass": [
        {
            "question": "Mục đích của test class trong SalesForce là gì?",
            "answer": "Test class trong SalesForce là để kiểm tra và xác minh rằng các phần mềm tùy chỉnh (Apex code) hoạt động đúng theo yêu cầu và kỳ vọng."
        },
        {
            "question": "Làm cách nào để định nghĩa một test class trong Apex?",
            "answer": "Sử dụng annotation @isTest trước class hoặc phương thức để đánh dấu nó là test class hoặc test method."
        },
        {
            "question": "Vai trò của annotation @isTest là gì?",
            "answer": "Annotation @isTest cho phép class hoặc method chạy trong môi trường test, giúp phân biệt giữa code production và code test."
        },
        {
            "question": "Làm cách nào để tạo dữ liệu test trong test class?",
            "answer": "Sử dụng phương thức insert, update, delete để tạo và quản lý dữ liệu test. Cũng có thể sử dụng TestDataFactory để tạo dữ liệu mô phỏng."
        },
        {
            "question": "Sự khác biệt giữa Test.startTest() và Test.stopTest() là gì?",
            "answer": "Test.startTest() và Test.stopTest() được sử dụng để đánh dấu phần code đang được test, đặc biệt hữu ích cho việc test các tác vụ bất đồng bộ hoặc có giới hạn governor."
        },
        {
            "question": "Làm cách nào để test code bất đồng bộ trong Apex?",
            "answer": "Sử dụng Test.startTest() và Test.stopTest() để chờ cho các tác vụ bất đồng bộ hoàn tất trước khi kiểm tra kết quả."
        },
        {
            "question": "Test coverage là gì và tại sao nó quan trọng?",
            "answer": "Test coverage là phần trăm của code được test. Nó quan trọng để đảm bảo rằng code của bạn hoạt động đúng và giảm thiểu lỗi trong môi trường production."
        },
        {
            "question": "Làm cách nào để chạy một test class trong SalesForce?",
            "answer": "Sử dụng Developer Console hoặc Apex Test Execution để chạy test class."
        },
        {
            "question": "Những assertion phổ biến trong test class là gì?",
            "answer": "Assertions như System.assertEquals, System.assertNotEquals, System.assert, System.fail, v.v."
        },
        {
            "question": "Làm cách nào để xử lý ngoại lệ trong test class?",
            "answer": "Sử dụng try-catch để bắt và xử lý ngoại lệ, hoặc sử dụng System.assertException để kiểm tra xem ngoại lệ được kỳ vọng có xảy ra hay không."
        },
        {
            "question": "Làm cách nào để test một trigger trong SalesForce?",
            "answer": "Tạo dữ liệu test để kích hoạt trigger, sau đó kiểm tra kết quả bằng assertions."
        },
        {
            "question": "Vai trò của TestDataFactory trong test class là gì?",
            "answer": "TestDataFactory giúp tạo dữ liệu test một cách nhất quán và tái sử dụng, giảm thiểu code trùng lặp."
        },
        {
            "question": "Làm cách nào để đảm bảo test class không ảnh hưởng đến dữ liệu production?",
            "answer": "Sử dụng @isTest để chạy trong môi trường test, và không thực sự thay đổi dữ liệu production."
        },
        {
            "question": "Làm cách nào để test một batch Apex trong test class?",
            "answer": "Sử dụng Test.startTest() và Test.stopTest() để chạy batch, sau đó kiểm tra kết quả bằng assertions."
        },
        {
            "question": "Giới hạn governor trong test class là gì?",
            "answer": "Governor limits trong test class được reset giữa Test.startTest() và Test.stopTest(), cho phép test các tác vụ nặng hơn."
        },
        {
            "question": "Làm cách nào để kiểm tra coverage của test class?",
            "answer": "Sử dụng Developer Console hoặc Setup > Apex Test Execution để xem phần trăm coverage."
        },
        {
            "question": "Làm cách nào để test một controller trong VisualForce page?",
            "answer": "Tạo dữ liệu test, gọi phương thức controller, và kiểm tra kết quả bằng assertions."
        },
        {
            "question": "Những best practices khi viết test class là gì?",
            "answer": "Viết test độc lập, sử dụng TestDataFactory, đảm bảo coverage cao, và test cả trường hợp thành công và thất bại."
        },
        {
            "question": "Làm cách nào để test một scheduled Apex trong test class?",
            "answer": "Sử dụng System.schedule để lên lịch, sau đó kiểm tra kết quả trong Test.stopTest()."
        },
        {
            "question": "Làm cách nào để debug một test class?",
            "answer": "Sử dụng debug logs trong Developer Console để theo dõi và phân tích lỗi trong quá trình test."
        },
        {
            "question": "Tại sao việc không dựa vào dữ liệu tồn tại của org là quan trọng trong các test class?",
            "answer": "Việc không dựa vào dữ liệu tồn tại của org là quan trọng vì các test class nên tự chứa và độc lập với trạng thái hiện tại của org, đảm bảo test nhất quán và có thể phát sinh lại trên các môi trường khác nhau và theo thời gian."
        },
        {
            "question": "Test Data Factory class là gì và nó mang lại lợi ích gì cho test class?",
            "answer": "Test Data Factory class là một lớp tiện ích cung cấp phương thức để tạo dữ liệu test theo cách chuẩn hóa, giúp giảm trùng lặp mã, dễ bảo trì và đảm bảo dữ liệu test nhất quán giữa các test class."
        },
        {
            "question": "Làm thế nào để đảm bảo tất cả logic điều kiện trong mã Apex được test?",
            "answer": "Để đảm bảo tất cả logic điều kiện được test, cần viết các phương thức test bao quát mọi đường dẫn có thể, bao gồm các điều kiện if-else, switch, và các trường hợp biên, cũng như test đầu vào không hợp lệ."
        },
        {
            "question": "Vai trò của Test.startTest và Test.stopTest trong test class, đặc biệt với code bất đồng bộ, là gì?",
            "answer": "Test.startTest và Test.stopTest được dùng để định nghĩa khối code trong đó các tác vụ bất đồng bộ được thực thi. Các tác vụ bất đồng bộ bắt đầu trong khối startTest sẽ được thực thi đồng bộ khi gọi stopTest, giúp test kết quả của code bất đồng bộ dễ dàng hơn."
        },
        {
            "question": "Tại sao việc đạt độ bao phủ mã cao hơn yêu cầu tối thiểu là quan trọng?",
            "answer": "Đạt độ bao phủ mã cao hơn 75% (tối thiểu) giúp giảm rủi ro lỗi, đảm bảo chất lượng mã và dễ phát hiện các vấn đề khi mã được sửa đổi, với mục tiêu lý tưởng là 90% hoặc hơn."
        },
        {
            "question": "Một số phương thức assertion phổ biến trong test class của SalesForce là gì và cách sử dụng chúng?",
            "answer": "Các phương thức assertion phổ biến bao gồm System.assertEquals, System.assertNotEquals, System.assert, System.fail, dùng để kiểm tra kết quả mong đợi, ví dụ System.assertEquals kiểm tra hai giá trị có bằng nhau."
        },
        {
            "question": "Tại sao test với dữ liệu số lượng lớn (bulk) là quan trọng trong test class của SalesForce?",
            "answer": "Test với dữ liệu số lượng lớn giúp phát hiện vấn đề hiệu suất và giới hạn governor, đảm bảo mã xử lý được khối lượng lớn dữ liệu mà không vượt quá giới hạn."
        },
        {
            "question": "Mục đích của việc sử dụng System.runAs trong test class là gì?",
            "answer": "System.runAs được dùng để chạy khối code như một người dùng cụ thể, giúp test quy tắc chia sẻ và quyền truy cập, tránh lỗi mixed DML và đảm bảo mã tôn trọng quyền của người dùng."
        },
        {
            "question": "Tại sao nên test class riêng lẻ thay vì chạy tất cả test cùng lúc?",
            "answer": "Test riêng lẻ giúp cô lập và debug vấn đề dễ dàng hơn, tránh khó khăn trong việc xác định nguyên nhân thất bại khi chạy tất cả test, đặc biệt với nhiều test class."
        },
        {
            "question": "Cấu trúc điển hình của một test class trong SalesForce là gì?",
            "answer": "Một test class điển hình được đánh dấu bằng @isTest, chứa các phương thức test là static và void, có thể bao gồm phương thức TestSetup để tạo dữ liệu chung cho các test method."
        },
        {
            "question": "Những quy ước đặt tên được khuyến nghị cho test class và phương thức test trong SalesForce là gì?",
            "answer": "Nên đặt tên test class với hậu tố 'Test', ví dụ 'MyClassTest', và đặt tên phương thức test rõ ràng như 'testCreateAccount', 'testUpdateContact', để dễ hiểu."
        },
        {
            "question": "Những import phổ biến cần thiết trong test class là gì?",
            "answer": "Các import phổ biến bao gồm 'System.Test' để sử dụng các phương thức như startTest, stopTest, và các assertion, cùng với các loại đối tượng hoặc lớp tiện ích khác tùy theo nhu cầu test."
        },
        {
            "question": "Làm thế nào để đảm bảo cô lập dữ liệu giữa các phương thức test trong một test class?",
            "answer": "Mỗi phương thức test nên tạo dữ liệu riêng và dọn dẹp sau khi hoàn tất, hoặc dùng TestSetup để tạo dữ liệu chung nhưng quản lý cẩn thận để tránh ảnh hưởng lẫn nhau."
        },
        {
            "question": "Những best practices khi quản lý dữ liệu test trong test class là gì?",
            "answer": "Sử dụng Test Data Factory để chuẩn hóa, tạo và xóa dữ liệu trong phạm vi phương thức test, tránh dùng dữ liệu org hiện tại, và dùng giá trị duy nhất để tránh xung đột."
        },
        {
            "question": "Sự khác biệt giữa unit test và integration test trong bối cảnh SalesForce là gì?",
            "answer": "Unit test tập trung test từng thành phần riêng lẻ, đảm bảo chúng hoạt động đúng, trong khi integration test kiểm tra cách các thành phần làm việc cùng nhau trong một quy trình cụ thể."
        },
        {
            "question": "Làm thế nào để test các ngoại lệ mong đợi trong mã của bạn trong test class?",
            "answer": "Sử dụng try-catch để bắt ngoại lệ và dùng assertion để kiểm tra, hoặc dùng System.assertException để xác minh ngoại lệ mong đợi có xảy ra."
        },
        {
            "question": "Quy trình test một trigger trong SalesForce là gì?",
            "answer": "Tạo dữ liệu test để kích hoạt trigger, ví dụ insert, update, delete bản ghi, sau đó dùng assertion để kiểm tra trigger thực hiện đúng như kỳ vọng."
        },
        {
            "question": "Làm thế nào để test một batch Apex job trong test class?",
            "answer": "Dùng Test.startTest và Test.stopTest, gọi Database.executeBatch để chạy batch, sau đó dùng assertion để kiểm tra kết quả hoàn thành và đầu ra mong đợi."
        },
        {
            "question": "Làm thế nào để test một scheduled Apex job trong test class?",
            "answer": "Sử dụng System.schedule để lên lịch job, sau đó dùng Test.startTest và Test.stopTest để chạy và kiểm tra kết quả."
        },
        {
            "question": "Làm thế nào để test một controller trong VisualForce page?",
            "answer": "Khởi tạo controller trong phương thức test, mô phỏng tương tác người dùng như nhấn nút, chọn tùy chọn, sau đó kiểm tra thuộc tính và phương thức bằng assertion."
        },
        {
            "question": "Làm thế nào để chạy một test class hoặc phương thức cụ thể từ Developer Console?",
            "answer": "Trong Developer Console, vào tab 'Test', chọn test class và chạy tất cả phương thức hoặc phương thức cụ thể, thay vì dùng 'Run All Tests' cho nhiều test."
        },
        {
            "question": "Thông tin nào được cung cấp trong kết quả test, và làm thế nào để diễn giải chúng?",
            "answer": "Kết quả test cung cấp trạng thái pass/fail, thời gian thực thi, và thông báo lỗi nếu thất bại, cùng với báo cáo độ bao phủ. Diễn giải bằng cách kiểm tra lỗi, độ bao phủ để xác định vấn đề."
        },
        {
            "question": "Những công cụ hoặc kỹ thuật nào có thể dùng để debug test class thất bại?",
            "answer": "Sử dụng debug logs trong Developer Console hoặc bật logging qua Setup để theo dõi quá trình thực thi, thêm System.debug để in giá trị biến hoặc thông điệp."
        },
        {
            "question": "Sự khác biệt giữa code coverage và test coverage trong SalesForce là gì?",
            "answer": "Code coverage là phần trăm mã được thực thi trong test, trong khi test coverage là mức độ bao quát các kịch bản và yêu cầu chức năng, hai khái niệm liên quan nhưng khác nhau."
        },
        {
            "question": "Làm thế nào để tăng code coverage trong test class?",
            "answer": "Viết phương thức test bao quát mọi đường dẫn mã, bao gồm các nhánh điều kiện, ngoại lệ, và trường hợp biên, dùng báo cáo 'Code Coverage' để xác định phần chưa được test."
        },
        {
            "question": "Yêu cầu cụ thể về code coverage khi triển khai mã lên production là gì?",
            "answer": "SalesForce yêu cầu ít nhất 75% mã được test trước khi triển khai lên production, để đảm bảo mã đã được kiểm tra kỹ lưỡng."
        },
        {
            "question": "Làm thế nào để test code bất đồng bộ, như future methods hoặc queueable jobs, trong test class?",
            "answer": "Dùng Test.startTest và Test.stopTest để đảm bảo các tác vụ bất đồng bộ được thực thi đồng bộ, giúp kiểm tra kết quả dễ dàng hơn."
        },
        {
            "question": "Vai trò của mocking trong test class của SalesForce là gì, và làm thế nào để sử dụng?",
            "answer": "Mocking mô phỏng hành vi của các phụ thuộc bên ngoài, như callout, giúp cô lập mã test. SalesForce cung cấp @Mock và TestMock để tạo phản hồi giả lập."
        },
        {
            "question": "Làm thế nào để xử lý các cân nhắc hiệu suất trong test class để tránh vượt giới hạn governor?",
            "answer": "Test với dữ liệu số lượng lớn, dùng Test.startTest và Test.stopTest để quản lý giới hạn, tối ưu hóa mã để giảm số lượng thao tác cơ sở dữ liệu."
        },
        {
            "question": "Tại sao việc không dựa vào dữ liệu org hiện tại trong test class là quan trọng?",
            "answer": "Việc này đảm bảo test độc lập, nhất quán, và có thể phát sinh lại, tránh thất bại do dữ liệu org thay đổi hoặc bị xóa."
        },
        {
            "question": "Làm thế nào để đảm bảo cô lập dữ liệu giữa các phương thức test?",
            "answer": "Mỗi phương thức test nên tạo dữ liệu riêng và dọn dẹp sau khi hoàn tất, dùng TestSetup cho dữ liệu chung nhưng quản lý cẩn thận."
        },
        {
            "question": "Làm thế nào để test các phương thức có tham số tùy chọn hoặc giá trị mặc định?",
            "answer": "Gọi phương thức với và không có tham số tùy chọn, dùng các phương thức test hoặc assertion riêng để kiểm tra xử lý giá trị mặc định."
        },
        {
            "question": "Mục đích của Test.isRunningTest() là gì?",
            "answer": "Test.isRunningTest() cho phép mã hành xử khác trong môi trường test, ví dụ bỏ qua thao tác tốn kém hoặc dùng dữ liệu giả lập, nhưng cần dùng cẩn thận."
        },
        {
            "question": "Làm thế nào để test một Lightning Web Component (LWC) trong test class?",
            "answer": "Test các phương thức controller server-side của LWC, vì mã client-side không test trực tiếp từ Apex, tập trung vào logic server-side."
        },
        {
            "question": "Quy trình test một custom Apex REST service là gì?",
            "answer": "Mô phỏng yêu cầu HTTP bằng System.Http hoặc công cụ bên ngoài, tạo phản hồi giả lập trong test class để kiểm tra đầu ra mong đợi."
        },
        {
            "question": "Làm thế nào để xử lý test timeout trong SalesForce?",
            "answer": "Tối ưu hóa phương thức test, tránh vòng lặp không cần thiết, có thể tăng thời gian timeout nhưng không khuyến khích để tránh làm chậm quá trình test."
        },
        {
            "question": "Sự khác biệt giữa 'Passed' và 'Completed' trong kết quả test là gì?",
            "answer": "'Passed' nghĩa là test thành công không có assertion thất bại, 'Completed' nghĩa là test hoàn tất nhưng có thể thất bại, test pass thì cả hai đều đúng."
        },
        {
            "question": "Làm thế nào để test callouts đến dịch vụ bên ngoài trong test class?",
            "answer": "Dùng mocking để mô phỏng phản hồi từ dịch vụ bên ngoài, SalesForce cung cấp @Mock và TestMock để test mà không thực sự gọi ra ngoài."
        },
        {
            "question": "Những giới hạn governor phổ biến mà test class cần lưu ý là gì?",
            "answer": "Bao gồm số lượng SOQL, DML, số bản ghi xử lý, và thời gian CPU, test class có giới hạn riêng, dùng Test.startTest và Test.stopTest để quản lý."
        },
        {
            "question": "Làm thế nào để test cho hành vi transactional trong mã Apex?",
            "answer": "Viết test với nhiều thao tác cơ sở dữ liệu trong một giao dịch, kiểm tra commit hoặc rollback, và test các kịch bản ngoại lệ gây rollback."
        },
        {
            "question": "Vai trò của Test.getEventBus trong test class là gì?",
            "answer": "Test.getEventBus cho phép truy cập event bus trong môi trường test, dùng để test mã dựa trên sự kiện, như platform events, mô phỏng sự kiện."
        },
        {
            "question": "Làm thế nào để test cho các lỗ hổng bảo mật trong mã Apex?",
            "answer": "Kiểm tra các vấn đề như SQL injection, XSS, đảm bảo đầu vào người dùng được làm sạch, mã không lộ thông tin nhạy cảm."
        },
        {
            "question": "Quy trình test mã Apex dùng Chatter API là gì?",
            "answer": "Tạo dữ liệu test bao gồm bài đăng, bình luận Chatter, gọi phương thức liên quan và kiểm tra kết quả như đăng bài hoặc lấy tin nhắn."
        },
        {
            "question": "Làm thế nào để test cho các vấn đề localization trong mã Apex?",
            "answer": "Đặt locale của người dùng trong test method, kiểm tra mã xử lý đúng ngôn ngữ, định dạng ngày, số cho locale đó."
        },
        {
            "question": "Mục đích của phương thức TestSetup trong test class là gì?",
            "answer": "TestSetup là phương thức được thực thi trước mỗi test method, dùng để tạo dữ liệu chung, giảm trùng lặp mã và tăng tính bảo trì."
        },
        {
            "question": "Làm thế nào để xử lý dữ liệu test cần chia sẻ giữa nhiều test class?",
            "answer": "Tạo một lớp tiện ích riêng để quản lý dữ liệu test, dùng chung cho các test class, đảm bảo nhất quán và giảm trùng lặp."
        },
        {
            "question": "Cách tốt nhất để xử lý các trường auto-number trong dữ liệu test là gì?",
            "answer": "Trường auto-number được gán tự động khi insert, không cần đặt trong test data, có thể query sau khi insert để lấy giá trị nếu cần."
        },
        {
            "question": "Làm thế nào để tạo dữ liệu test cho các đối tượng có ràng buộc duy nhất, như email?",
            "answer": "Đảm bảo giá trị duy nhất cho các trường như email bằng cách thêm timestamp hoặc số ngẫu nhiên, tránh xung đột trong test."
        },
        {
            "question": "Làm thế nào để test các phương thức thực hiện bulk operations?",
            "answer": "Tạo tập dữ liệu lớn, gọi phương thức với dữ liệu đó, kiểm tra xử lý đúng và không vượt giới hạn governor, test cả trường hợp biên."
        },
        {
            "question": "Vai trò của Test.isRunningTest() trong mã production là gì?",
            "answer": "Dùng để điều kiện thực thi mã khác trong môi trường test, như bỏ qua thao tác tốn kém, nhưng cần dùng cẩn thận để không ảnh hưởng production."
        },
        {
            "question": "Làm thế nào để test một custom Apex class dùng Batchable interface?",
            "answer": "Dùng Database.executeBatch trong test method, sau đó kiểm tra kết quả bằng assertion, dùng Test.startTest và Test.stopTest để quản lý."
        },
        {
            "question": "Quy trình test một class dùng Schedulable interface là gì?",
            "answer": "Dùng System.schedule để lên lịch, sau đó dùng Test.startTest và Test.stopTest để chạy và kiểm tra kết quả."
        },
        {
            "question": "Làm thế nào để xử lý thất bại test do tác vụ bất đồng bộ?",
            "answer": "Dùng Test.startTest và Test.stopTest để đảm bảo tác vụ bất đồng bộ hoàn tất trước khi kết thúc test, giúp kiểm tra kết quả."
        },
        {
            "question": "Sự khác biệt giữa 'Test Level' và 'Test Coverage' trong SalesForce là gì?",
            "answer": "'Test Level' là mức độ test như unit test, integration test, còn 'Test Coverage' là phần trăm mã được thực thi, hai khái niệm liên quan nhưng khác nhau."
        },
        {
            "question": "SalesForce xử lý code coverage cho các dòng có comment hoặc dòng trống như thế nào?",
            "answer": "Code coverage chỉ tính các dòng mã thực thi, không tính comment hoặc dòng trống, nên không cần test chúng."
        },
        {
            "question": "Tác động của việc dùng 'without sharing' trong phương thức test là gì?",
            "answer": "Cho phép chạy test không xét quy tắc chia sẻ, hữu ích để tạo dữ liệu test, nhưng cần đảm bảo phản ánh đúng hành vi production."
        },
        {
            "question": "Làm thế nào để test cho ngoại lệ giới hạn governor trong mã?",
            "answer": "Viết test cố tình vượt giới hạn, bắt ngoại lệ và kiểm tra, nhưng cần thiết kế test phù hợp với giới hạn của test class."
        },
        {
            "question": "Vai trò của Test.setMock trong test class là gì?",
            "answer": "Test.setMock dùng để thiết lập triển khai giả lập cho interface hoặc class, mô phỏng hành vi phụ thuộc, hữu ích cho test callout hoặc thành phần khó kiểm soát."
        },
        {
            "question": "Làm thế nào để test cho vấn đề concurrency trong SalesForce?",
            "answer": "Mô phỏng nhiều người dùng hoặc tiến trình truy cập đồng thời, dùng Test.startTest và Test.stopTest để kiểm tra race condition hoặc khóa."
        },
        {
            "question": "Làm thế nào để test một custom Apex class dùng dynamic SOQL hoặc DML?",
            "answer": "Tạo dữ liệu test phù hợp với truy vấn dynamic, đảm bảo mã xây dựng đúng và xử lý các kịch bản khác nhau như loại đối tượng hoặc tên trường."
        },
        {
            "question": "Quy trình test một class dùng Streaming API hoặc CometD là gì?",
            "answer": "Mô phỏng sự kiện streaming hoặc dùng mocking để test logic xử lý sự kiện, vì kết nối thực tế với API có thể phức tạp."
        },
        {
            "question": "Làm thế nào để schedule và chạy test tự động trong SalesForce?",
            "answer": "Dùng tính năng 'Schedule Apex' để lên lịch chạy test class hoặc tất cả test, hữu ích cho tích hợp liên tục và đảm bảo mã ổn định."
        },
        {
            "question": "Làm cách nào để test future methods trong test class?",
            "answer": "Sử dụng Test.startTest() và Test.stopTest() để đảm bảo các tác vụ future được thực thi, sau đó sử dụng assertions để kiểm tra kết quả."
        },
        {
            "question": "Làm cách nào để test callouts từ Apex?",
            "answer": "Sử dụng Test.setMock() để thiết lập dữ liệu giả lập cho các callout, đảm bảo rằng test không thực sự gọi ra ngoài."
        },
        {
            "question": "Làm cách nào để kiểm tra debug logs khi chạy test class?",
            "answer": "Sử dụng Developer Console để xem debug logs khi chạy test, giúp xác định các thông báo và lỗi trong quá trình thực thi."
        },
        {
            "question": "Làm cách nào để đo hiệu suất mã Apex qua test class?",
            "answer": "Sử dụng Test.getTotalTestTime() để đo thời gian chạy của test và đánh giá hiệu suất của mã Apex."
        },
        {
            "question": "Làm cách nào để test dữ liệu nhập bất hợp lệ?",
            "answer": "Tạo dữ liệu test bất hợp lệ và sử dụng System.assertException hoặc assertions để kiểm tra rằng ngoại lệ mong đợi được ném ra."
        },
        {
            "question": "Làm cách nào để test các logic phụ thuộc vào dữ liệu?",
            "answer": "Tạo dữ liệu test đầy đủ các trường hợp, sau đó kiểm tra kết quả của các phương thức xử lý dựa trên dữ liệu đó bằng assertions."
        },
        {
            "question": "Làm cách nào để test custom exception trong Apex?",
            "answer": "Viết test method gọi code gây ra ngoại lệ và sử dụng System.assertException để xác nhận rằng ngoại lệ được ném ra đúng cách."
        },
        {
            "question": "Làm cách nào để sử dụng Test.setCreatedDate() trong test class?",
            "answer": "Sử dụng Test.setCreatedDate() để đặt thời gian tạo của bản ghi test, hữu ích cho các test liên quan đến ngày tháng."
        },
        {
            "question": "Làm cách nào để kiểm tra logic phân quyền trong Apex test?",
            "answer": "Sử dụng System.runAs() để chạy code dưới vai trò người dùng khác nhau và kiểm tra xem quyền truy cập được thực thi đúng không."
        },
        {
            "question": "Làm cách nào để test code sử dụng dynamic SOQL?",
            "answer": "Tạo dữ liệu test phù hợp và chạy dynamic SOQL, sau đó sử dụng assertions để xác nhận kết quả trả về đúng như mong đợi."
        },
        {
            "question": "Làm cách nào để test vòng lặp xử lý danh sách bản ghi?",
            "answer": "Tạo danh sách test với nhiều bản ghi, chạy vòng lặp và sử dụng assertions để xác nhận rằng logic xử lý đúng trên tất cả các bản ghi."
        },
        {
            "question": "Làm cách nào để test các tác vụ callout bất đồng bộ?",
            "answer": "Sử dụng Test.startTest() và Test.stopTest() cùng với Test.setMock() để đảm bảo các tác vụ callout được thực hiện và kiểm tra kết quả."
        },
        {
            "question": "Làm cách nào để đảm bảo test class không phụ thuộc vào dữ liệu org hiện tại?",
            "answer": "Luôn tạo dữ liệu test mới trong test class và không sử dụng dữ liệu có sẵn, đảm bảo tính độc lập và nhất quán của test."
        },
        {
            "question": "Làm cách nào để kiểm tra rollback khi gặp lỗi trong giao dịch?",
            "answer": "Tạo tình huống test gây lỗi, sau đó kiểm tra rằng dữ liệu không bị thay đổi, xác nhận rằng rollback đã được thực hiện."
        },
        {
            "question": "Làm cách nào để test logic trong trigger thông qua test class?",
            "answer": "Tạo dữ liệu test kích hoạt trigger, sau đó dùng assertions để kiểm tra các thay đổi trên bản ghi được thực hiện bởi trigger."
        },
        {
            "question": "Làm cách nào để test một Apex class sử dụng Batchable interface?",
            "answer": "Sử dụng Database.executeBatch trong test method, kết hợp với Test.startTest() và Test.stopTest(), sau đó kiểm tra kết quả xử lý qua assertions."
        },
        {
            "question": "Làm cách nào để test một Apex class sử dụng Schedulable interface?",
            "answer": "Sử dụng System.schedule để lên lịch job trong test method, kết hợp với Test.startTest() và Test.stopTest() để đảm bảo job được chạy và kiểm tra kết quả."
        },
        {
            "question": "Làm cách nào để test các tác vụ bất đồng bộ trong Apex?",
            "answer": "Sử dụng Test.startTest() và Test.stopTest() để đảm bảo các tác vụ bất đồng bộ hoàn tất trước khi kết thúc test, giúp kiểm tra kết quả đúng như mong đợi."
        }
    ],
    "SFDC’s .Net": [
        {
            "question": "Các cách tích hợp SalesForce với ứng dụng .Net là gì?",
            "answer": "Sử dụng SalesForce APIs như REST API hoặc SOAP API để tích hợp với ứng dụng .Net."
        },
        {
            "question": "API của SalesForce nào thường được sử dụng cho tích hợp .Net?",
            "answer": "REST API là phổ biến nhất do nó đơn giản và dễ sử dụng hơn so với SOAP API."
        },
        {
            "question": "Làm cách nào để thiết lập xác thực cho các cuộc gọi API từ .Net đến SalesForce?",
            "answer": "Sử dụng Oauth 2.0 để lấy access token thông qua SalesForce Connected App."
        },
        {
            "question": "Vai trò của SalesForce Connected App trong tích hợp .Net là gì?",
            "answer": "SalesForce Connected App cung cấp client ID và client secret để xác thực và lấy access token cho các API calls."
        },
        {
            "question": "Làm cách nào để thực hiện một cuộc gọi REST API đến SalesForce từ .Net?",
            "answer": "Sử dụng các thư viện HTTP của .Net như HttpClient để gửi yêu cầu HTTP đến SalesForce API endpoint."
        },
        {
            "question": "Làm cách nào để xử lý phân trang khi lấy dữ liệu từ SalesForce?",
            "answer": "SalesForce API hỗ trợ phân trang thông qua các tham số như limit và nextRecordsUrl. Bạn cần xử lý các cuộc gọi tiếp theo để lấy toàn bộ dữ liệu."
        },
        {
            "question": "Những lỗi phổ biến có thể gặp phải trong các cuộc gọi API và cách xử lý chúng?",
            "answer": "Lỗi như 401 (không được xác thực), 404 (không tìm thấy), 500 (lỗi server). Xử lý bằng cách kiểm tra mã trạng thái HTTP và xử lý phù hợp."
        },
        {
            "question": "Làm cách nào để cập nhật một bản ghi trong SalesForce sử dụng API từ .Net?",
            "answer": "Gửi yêu cầu HTTP PUT hoặc PATCH đến endpoint của bản ghi với dữ liệu mới."
        },
        {
            "question": "Sự khác biệt giữa SOAP API và REST API của SalesForce là gì?",
            "answer": "SOAP API sử dụng XML và có giao thức phức tạp hơn, trong khi REST API sử dụng JSON và có giao thức đơn giản hơn, phù hợp cho các ứng dụng web hiện đại."
        },
        {
            "question": "Làm cách nào để quản lý sessions và tokens trong .Net cho các cuộc gọi API SalesForce?",
            "answer": "Lưu access token sau khi lấy được từ quá trình xác thực và sử dụng nó trong các header của các cuộc gọi API. Khi token hết hạn, cần lấy token mới."
        },
        {
            "question": "Làm cách nào để lấy danh sách các đối tượng từ SalesForce bằng .Net?",
            "answer": "Sử dụng REST API với endpoint /services/data/vXX.X/sobjects/ để lấy danh sách các đối tượng."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu lớn khi tích hợp với SalesForce từ .Net?",
            "answer": "Sử dụng Bulk API để xử lý dữ liệu lớn, hỗ trợ tải lên và tải xuống dữ liệu theo lô."
        },
        {
            "question": "Làm cách nào để xử lý lỗi xác thực trong các cuộc gọi API?",
            "answer": "Kiểm tra mã lỗi 401, sau đó làm mới access token hoặc yêu cầu người dùng xác thực lại."
        },
        {
            "question": "Làm cách nào để đồng bộ dữ liệu giữa .Net và SalesForce?",
            "answer": "Sử dụng các công cụ như Data Loader hoặc viết logic tùy chỉnh để đồng bộ dữ liệu qua API."
        },
        {
            "question": "Làm cách nào để debug các cuộc gọi API từ .Net đến SalesForce?",
            "answer": "Sử dụng công cụ như Fiddler hoặc Postman để theo dõi và phân tích các yêu cầu và phản hồi."
        },
        {
            "question": "Làm cách nào để xử lý các cuộc gọi API bất đồng bộ trong .Net?",
            "answer": "Sử dụng async/await trong .Net để thực hiện các cuộc gọi API bất đồng bộ, cải thiện hiệu suất."
        },
        {
            "question": "Làm cách nào để bảo mật các cuộc gọi API từ .Net đến SalesForce?",
            "answer": "Sử dụng HTTPS, quản lý token an toàn, và tuân thủ các chính sách bảo mật của SalesForce."
        },
        {
            "question": "Làm cách nào để lấy metadata của SalesForce từ .Net?",
            "answer": "Sử dụng REST API với endpoint /services/data/vXX.X/sobjects/ để lấy metadata của các đối tượng."
        },
        {
            "question": "Làm cách nào để xử lý các cuộc gọi API với nhiều tổ chức SalesForce?",
            "answer": "Quản lý nhiều access token, mỗi token cho một tổ chức, và chuyển đổi giữa các tổ chức khi cần."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của các cuộc gọi API từ .Net?",
            "answer": "Sử dụng caching cho dữ liệu tĩnh, giảm số lượng cuộc gọi, và sử dụng Bulk API cho dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để xử lý việc làm mới token khi access token hết hạn trong ứng dụng .Net?",
            "answer": "Sử dụng refresh token để lấy access token mới khi access token hiện tại hết hạn, kiểm tra lỗi 401 và thực hiện lại cuộc gọi API."
        },
        {
            "question": "Sự khác biệt giữa password flow và JWT flow trong xác thực SalesForce là gì?",
            "answer": "Password flow yêu cầu tên đăng nhập và mật khẩu, có thể không an toàn; JWT flow sử dụng private key, an toàn hơn cho ứng dụng server-side."
        },
        {
            "question": "Làm thế nào để quản lý nhiều phiên người dùng trong ứng dụng .Net cho các người dùng SalesForce khác nhau?",
            "answer": "Lưu access token và refresh token cho mỗi người dùng trong session hoặc database, đảm bảo giữ riêng biệt và an toàn."
        },
        {
            "question": "Làm cách nào để hủy bỏ một access token trong SalesForce từ ứng dụng .Net?",
            "answer": "Gửi yêu cầu POST đến endpoint /services/Oauth2/revoke với access token và token_type_hint là 'access_token'."
        },
        {
            "question": "Những thực hành tốt nhất để lưu trữ và bảo mật thông tin xác thực SalesForce trong ứng dụng .Net là gì?",
            "answer": "Không lưu mật khẩu người dùng, sử dụng JWT flow, lưu client ID/secret an toàn trong biến môi trường, và sử dụng HTTPS."
        },
        {
            "question": "Làm thế nào để tạo một bản ghi mới trong SalesForce bằng yêu cầu POST từ .Net?",
            "answer": "Sử dụng HttpClient gửi yêu cầu POST đến endpoint /sobjects/ObjectName với dữ liệu JSON, thêm header Authorization với access token."
        },
        {
            "question": "Làm cách nào để xử lý tham số truy vấn trong yêu cầu GET để lọc bản ghi?",
            "answer": "Sử dụng SOQL trong URL, ví dụ /query/?q=SELECT+Id,Name+FROM+Account, và encode truy vấn trước khi gửi."
        },
        {
            "question": "Làm thế nào để cập nhật nhiều trường của một bản ghi trong SalesForce bằng một cuộc gọi API từ .Net?",
            "answer": "Gửi yêu cầu PATCH hoặc PUT đến endpoint của bản ghi với dữ liệu JSON chứa các trường cần cập nhật."
        },
        {
            "question": "Làm cách nào để xóa một bản ghi trong SalesForce sử dụng .Net?",
            "answer": "Sử dụng HttpClient gửi yêu cầu DELETE đến endpoint /sobjects/ObjectName/Id với header Authorization."
        },
        {
            "question": "Số lượng bản ghi tối đa có thể lấy trong một cuộc gọi API là bao nhiêu, và làm thế nào để xử lý dữ liệu lớn hơn?",
            "answer": "Giới hạn mặc định là 2000, tối đa 20000 với tham số limit; sử dụng phân trang với nextRecordsUrl hoặc LIMIT/OFFSET."
        },
        {
            "question": "Làm thế nào để xử lý trường picklist trong SalesForce khi lấy hoặc cập nhật bản ghi từ .Net?",
            "answer": "Lấy giá trị văn bản từ picklist, sử dụng metadata để lấy danh sách giá trị hợp lệ, và đảm bảo giá trị gửi đi hợp lệ."
        },
        {
            "question": "Làm cách nào để định dạng trường ngày giờ đúng khi gửi dữ liệu đến SalesForce?",
            "answer": "Sử dụng định dạng ISO 8601 (YYYY-MM-DDTHH:MM:SS.SSSZ), ví dụ '2023-04-01T12:00:00.000Z'."
        },
        {
            "question": "Làm thế nào để xử lý trường tiền tệ, xem xét các mã tiền tệ và định dạng khác nhau?",
            "answer": "Lưu giá trị số, lấy currencyCode để hiển thị, và định dạng theo yêu cầu, ví dụ sử dụng ToString('C2')."
        },
        {
            "question": "Làm cách nào để làm việc với trường lookup để tham chiếu đến các bản ghi khác?",
            "answer": "Lưu và sử dụng Id của bản ghi liên kết, có thể lấy thông tin bổ sung qua API nếu cần, và sử dụng caching."
        },
        {
            "question": "Làm thế nào để xử lý các trường công thức hoặc chỉ đọc trong ứng dụng .Net?",
            "answer": "Không gửi giá trị cho trường chỉ đọc, và lấy giá trị công thức từ API để hiển thị, không cập nhật."
        },
        {
            "question": "Làm thế nào để sử dụng Bulk API để chèn một số lượng lớn bản ghi vào SalesForce từ .Net?",
            "answer": "Gửi yêu cầu POST đến /services/async/XX.X/job với dữ liệu JSON theo lô, theo dõi trạng thái công việc."
        },
        {
            "question": "Làm cách nào để theo dõi trạng thái của một công việc Bulk API từ ứng dụng .Net?",
            "answer": "Sử dụng endpoint /services/async/XX.X/job/JobId để kiểm tra trạng thái, xử lý khi hoàn thành hoặc lỗi."
        },
        {
            "question": "Làm thế nào để xử lý lỗi trong các hoạt động Bulk API?",
            "answer": "Kiểm tra phản hồi từ API, xử lý các lỗi cụ thể như định dạng không đúng, và lặp lại nếu cần."
        },
        {
            "question": "Sự khác biệt giữa Bulk API và REST API tiêu chuẩn cho các hoạt động dữ liệu là gì?",
            "answer": "Bulk API xử lý dữ liệu lớn theo lô, phù hợp cho hàng nghìn bản ghi; REST API phù hợp cho các yêu cầu nhỏ, từng bản ghi."
        },
        {
            "question": "Làm thế nào để sử dụng Bulk API để cập nhật hoặc xóa bản ghi?",
            "answer": "Gửi dữ liệu theo lô với operation là 'update' hoặc 'delete', theo dõi trạng thái công việc như chèn."
        },
        {
            "question": "Làm thế nào để lấy schema của một đối tượng SalesForce cụ thể sử dụng .Net?",
            "answer": "Sử dụng endpoint /services/data/vXX.X/sobjects/ObjectName/describe/ để lấy thông tin schema."
        },
        {
            "question": "Làm cách nào để lấy danh sách tất cả các trường cho một đối tượng cụ thể?",
            "answer": "Từ phản hồi describe, truy cập mảng 'fields' để lấy danh sách tên và thuộc tính của trường."
        },
        {
            "question": "Làm thế nào để kiểm tra xem một trường có bắt buộc hoặc chỉ đọc không?",
            "answer": "Kiểm tra thuộc tính 'nillable' (false là bắt buộc) và 'updateable' (false là chỉ đọc) trong metadata."
        },
        {
            "question": "Làm thế nào để xử lý các trường tùy chỉnh trong ứng dụng .Net?",
            "answer": "Xử lý như các trường tiêu chuẩn, nhưng cần lấy metadata để biết tên và thuộc tính, ví dụ '__c' cho trường tùy chỉnh."
        },
        {
            "question": "Làm cách nào để lấy nhãn của một trường hoặc đối tượng để hiển thị thân thiện với người dùng?",
            "answer": "Từ metadata, lấy thuộc tính 'label' cho trường hoặc 'label' cho đối tượng."
        },
        {
            "question": "Làm thế nào để đảm bảo tất cả các cuộc gọi API được thực hiện qua HTTPS để ngăn chặn nghe lén?",
            "answer": "Sử dụng HttpClient với URL bắt đầu bằng 'https://', và kiểm tra chứng chỉ SSL trong ứng dụng."
        },
        {
            "question": "Những biện pháp nào có thể thực hiện để ngăn chặn rò rỉ token hoặc lạm dụng trong ứng dụng .Net?",
            "answer": "Lưu token an toàn trong session hoặc database mã hóa, giới hạn quyền của Ứng dụng Kết nối, và giám sát hoạt động."
        },
        {
            "question": "Làm thế nào để triển khai kiểm soát truy cập dựa trên vai trò trong ứng dụng .Net tích hợp với SalesForce?",
            "answer": "Sử dụng thông tin vai trò từ SalesForce, kiểm tra quyền trong ứng dụng, và giới hạn truy cập dựa trên vai trò người dùng."
        },
        {
            "question": "Làm thế nào để xử lý dữ liệu nhạy cảm lấy từ SalesForce trong ứng dụng .Net?",
            "answer": "Mã hóa dữ liệu khi lưu trữ, hạn chế truy cập, và tuân thủ chính sách bảo mật như GDPR hoặc CCPA."
        },
        {
            "question": "Những thực hành tốt nhất để ghi log và kiểm toán các cuộc gọi API trong ứng dụng .Net là gì?",
            "answer": "Ghi log các cuộc gọi API với timestamp, mã trạng thái, và dữ liệu đầu vào/đầu ra, lưu trữ an toàn và định kỳ kiểm tra."
        },
        {
            "question": "Làm thế nào để sử dụng bộ nhớ cache để cải thiện hiệu suất của ứng dụng .Net tích hợp với SalesForce?",
            "answer": "Lưu trữ dữ liệu tĩnh như metadata hoặc danh sách picklist trong bộ nhớ cache, sử dụng thư viện như MemoryCache."
        },
        {
            "question": "Những chiến lược nào có thể sử dụng để giảm số lượng cuộc gọi API?",
            "answer": "Kết hợp nhiều truy vấn trong một SOQL, sử dụng caching, và giảm tần suất gọi không cần thiết."
        },
        {
            "question": "Làm thế nào để xử lý phân trang hiệu quả để lấy dữ liệu lớn?",
            "answer": "Sử dụng nextRecordsUrl hoặc LIMIT/OFFSET, và xử lý bất đồng bộ để không chặn luồng chính."
        },
        {
            "question": "Làm thế nào để sử dụng lập trình bất đồng bộ trong .Net để gọi API mà không chặn luồng chính?",
            "answer": "Sử dụng async/await với HttpClient, ví dụ await client.GetAsync(url), để thực hiện gọi API không chặn."
        },
        {
            "question": "Những công cụ hoặc kỹ thuật nào có thể sử dụng để đo lường và tối ưu hóa hiệu suất của các cuộc gọi API?",
            "answer": "Sử dụng Fiddler, Postman để phân tích, và đo thời gian phản hồi, tối ưu bằng caching và giảm số lượng gọi."
        },
        {
            "question": "Làm thế nào để tích hợp SalesForce với một ứng dụng ASP.NET MVC?",
            "answer": "Sử dụng HttpClient trong controller, gọi API SalesForce, và hiển thị dữ liệu trong view, quản lý token trong session."
        },
        {
            "question": "Làm thế nào để sử dụng dữ liệu SalesForce trong một ứng dụng Blazor?",
            "answer": "Gọi API SalesForce từ service, sử dụng HttpClientFactory, và hiển thị dữ liệu trong component Blazor."
        },
        {
            "question": "Làm thế nào để hiển thị dữ liệu SalesForce trong một ứng dụng desktop WPF?",
            "answer": "Sử dụng HttpClient để gọi API, bind dữ liệu vào UI với DataGrid hoặc ListView, và quản lý token trong ứng dụng."
        },
        {
            "question": "Sự khác biệt giữa sử dụng .Net Framework và .Net Core cho tích hợp SalesForce là gì?",
            "answer": ".Net Core hiện đại hơn, hỗ trợ cross-platform, trong khi .Net Framework phù hợp cho ứng dụng legacy, cả hai đều hỗ trợ HttpClient."
        },
        {
            "question": "Làm thế nào để xử lý ngoại lệ và lỗi trong ứng dụng .Net khi gọi API SalesForce?",
            "answer": "Sử dụng try-catch để bắt ngoại lệ HttpRequestException, kiểm tra mã trạng thái, và xử lý lỗi như 401, 404."
        },
        {
            "question": "Làm thế nào để sử dụng API Streaming để nhận thông báo thời gian thực từ SalesForce trong ứng dụng .Net?",
            "answer": "Sử dụng Bayeux protocol với thư viện như SignalR, kết nối đến endpoint streaming, và xử lý sự kiện thời gian thực."
        },
        {
            "question": "Làm thế nào để gọi API Apex REST từ ứng dụng .Net?",
            "answer": "Gửi yêu cầu HTTP đến endpoint Apex, ví dụ /services/apexrest/YourEndpoint, với dữ liệu JSON và header Authorization."
        },
        {
            "question": "Những thư viện bên thứ ba nào có sẵn cho tích hợp SalesForce trong .Net, và làm thế nào để sử dụng chúng?",
            "answer": "Sử dụng NetCoreForce hoặc Force.com Toolkit, cài đặt qua NuGet, và theo hướng dẫn trên [GitHub NetCoreForce](https://github.com/developerforce/Force.com-Toolkit-for-NET)."
        },
        {
            "question": "Làm thế nào để xử lý tệp đính kèm trong SalesForce sử dụng .Net?",
            "answer": "Sử dụng endpoint /sobjects/Attachment để tải lên/tải xuống, gửi yêu cầu POST với tệp nhị phân và header Content-Type."
        },
        {
            "question": "Làm thế nào để sử dụng CDN của SalesForce để phục vụ tệp từ ứng dụng .Net?",
            "answer": "Lấy URL từ trường Body của Attachment, và sử dụng HttpClient để tải tệp, đảm bảo quyền truy cập."
        },
        {
            "question": "Làm thế nào để làm việc với đối tượng Account trong SalesForce sử dụng .Net?",
            "answer": "Sử dụng endpoint /sobjects/Account để CRUD, ví dụ GET để lấy, POST để tạo, với dữ liệu JSON."
        },
        {
            "question": "Làm thế nào để lấy và cập nhật bản ghi Contact?",
            "answer": "Gửi yêu cầu GET đến /sobjects/Contact/Id để lấy, PATCH để cập nhật, với dữ liệu JSON."
        },
        {
            "question": "Làm thế nào để quản lý Opportunities, bao gồm các giai đoạn và xác suất?",
            "answer": "Sử dụng endpoint /sobjects/Opportunity, cập nhật trường StageName và Probability, theo dõi trạng thái qua API."
        },
        {
            "question": "Làm thế nào để xử lý Leads và chuyển đổi chúng sang các đối tượng khác?",
            "answer": "Sử dụng endpoint /sobjects/Lead, gọi phương thức convert để chuyển đổi, cần quyền phù hợp."
        },
        {
            "question": "Làm thế nào để tạo và quản lý đối tượng tùy chỉnh trong SalesForce từ ứng dụng .Net?",
            "answer": "Tạo endpoint /sobjects/CustomObject__c, gửi yêu cầu POST với dữ liệu JSON, và lấy metadata để biết trường."
        },
        {
            "question": "Làm thế nào để tải lên một tệp đến bản ghi SalesForce sử dụng .Net?",
            "answer": "Sử dụng endpoint /sobjects/Attachment, gửi yêu cầu POST với tệp nhị phân, và liên kết với bản ghi cha."
        },
        {
            "question": "Làm thế nào để tải xuống một tệp đính kèm với bản ghi SalesForce?",
            "answer": "Gửi yêu cầu GET đến URL của Attachment, với header Authorization, và lưu tệp vào ổ đĩa."
        },
        {
            "question": "Làm thế nào để xóa một tệp đính kèm từ bản ghi SalesForce?",
            "answer": "Sử dụng yêu cầu DELETE đến endpoint /sobjects/Attachment/Id, với header Authorization."
        },
        {
            "question": "Làm thế nào để xử lý tệp lớn hoặc nhiều tệp trong ứng dụng .Net?",
            "answer": "Sử dụng Bulk API cho nhiều tệp, hoặc xử lý từng tệp với HttpClient, đảm bảo không vượt giới hạn API."
        },
        {
            "question": "Làm thế nào để sử dụng CDN của SalesForce để tối ưu hóa việc phân phối tệp?",
            "answer": "Lấy URL từ trường Body của Attachment, và sử dụng CDN để phục vụ, giảm tải server."
        },
        {
            "question": "Làm thế nào để xử lý trường tiền tệ trong SalesForce, xem xét các mã tiền tệ khác nhau?",
            "answer": "Lấy giá trị số và currencyCode, định dạng theo yêu cầu, ví dụ USD 100.50."
        },
        {
            "question": "Làm thế nào để chuyển đổi số tiền giữa các loại tiền tệ trong ứng dụng .Net?",
            "answer": "Sử dụng thư viện như CurrencyConverter, lấy tỷ giá từ API bên thứ ba, và tính toán."
        },
        {
            "question": "Làm thế nào để định dạng giá trị tiền tệ đúng để hiển thị trong ứng dụng?",
            "answer": "Sử dụng ToString('C2') trong .Net, và thêm currencyCode, ví dụ '100.50 USD'."
        },
        {
            "question": "Làm thế nào để xử lý tùy chọn hiển thị tiền tệ của người dùng?",
            "answer": "Lấy cài đặt từ người dùng, áp dụng định dạng tiền tệ tương ứng, ví dụ EUR hoặc JPY."
        },
        {
            "question": "Những thực hành tốt nhất để xử lý giá trị tiền tệ nhằm tránh vấn đề chính xác là gì?",
            "answer": "Sử dụng kiểu decimal thay vì float, làm tròn đúng, và kiểm tra tỷ giá thường xuyên."
        },
        {
            "question": "Làm thế nào để viết bài kiểm tra tích hợp cho ứng dụng .Net tương tác với SalesForce?",
            "answer": "Sử dụng framework như xUnit, mock API với Moq, và kiểm tra các kịch bản như lỗi 401, 404."
        },
        {
            "question": "Làm thế nào để mô phỏng phản hồi API SalesForce trong bài kiểm tra đơn vị?",
            "answer": "Sử dụng HttpClientFactory với mock handler, trả về JSON giả lập, và kiểm tra logic ứng dụng."
        },
        {
            "question": "Làm thế nào để sử dụng Developer Console của SalesForce để kiểm tra các cuộc gọi API?",
            "answer": "Chuyển đến Setup > Developer Console, chạy truy vấn SOQL, và kiểm tra log API."
        },
        {
            "question": "Những công cụ nào có thể sử dụng để debug các cuộc gọi API trong ứng dụng .Net?",
            "answer": "Sử dụng Fiddler, Postman, hoặc Visual Studio Debugger để theo dõi và phân tích yêu cầu."
        },
        {
            "question": "Làm thế nào để xử lý các môi trường khác nhau (sandbox vs. production) trong chiến lược kiểm tra?",
            "answer": "Sử dụng cấu hình khác nhau cho URL và token, kiểm tra sandbox trước, sau đó triển khai production."
        },
        {
            "question": "Làm thế nào để tổ chức mã nguồn cho tích hợp SalesForce trong ứng dụng .Net?",
            "answer": "Tách logic API vào service layer, sử dụng dependency injection, và tổ chức theo mô hình MVC."
        },
        {
            "question": "Làm thế nào để sử dụng tiêm phụ thuộc để quản lý dịch vụ SalesForce trong ứng dụng?",
            "answer": "Đăng ký HttpClient trong DI container, inject vào service, ví dụ IServiceCollection.AddHttpClient."
        },
        {
            "question": "Làm thế nào để xử lý phiên bản hóa các cuộc gọi API SalesForce trong mã .Net?",
            "answer": "Sử dụng endpoint với phiên bản cụ thể, ví dụ /vXX.X/, và cập nhật khi cần, kiểm tra tài liệu API."
        },
        {
            "question": "Những thực hành tốt nhất để xử lý lỗi và ghi log trong mã tích hợp SalesForce là gì?",
            "answer": "Sử dụng try-catch, ghi log với Serilog hoặc NLog, và theo dõi lỗi 401, 404 trong log."
        },
        {
            "question": "Làm thế nào để đảm bảo ứng dụng có khả năng phục hồi trước các thay đổi hoặc downtime của API?",
            "answer": "Thực hiện retry logic, sử dụng circuit breaker pattern, và giám sát trạng thái API với health check."
        },
        {
            "question": "Làm cách nào để tích hợp SalesForce với .NET Core so với .NET Framework?",
            "answer": "Sử dụng HttpClient trong .NET Core với cấu hình DI hiện đại, khác biệt với .NET Framework; đảm bảo endpoint và phiên bản API được cấu hình chính xác cho từng nền tảng."
        },
        {
            "question": "Làm cách nào để tối ưu hóa việc sử dụng HttpClient trong ứng dụng .NET tích hợp với SalesForce?",
            "answer": "Sử dụng HttpClientFactory để quản lý vòng đời của HttpClient, tránh tạo nhiều instance và giảm thiểu rò rỉ tài nguyên."
        },
        {
            "question": "Làm cách nào để xử lý các cuộc gọi API đồng thời (concurrent) trong ứng dụng .NET?",
            "answer": "Sử dụng async/await cùng với các kỹ thuật Task Parallel Library (TPL) để thực hiện các cuộc gọi API đồng thời mà không gây chặn luồng chính."
        },
        {
            "question": "Làm cách nào để xây dựng một microservice .NET để đồng bộ hóa dữ liệu với SalesForce?",
            "answer": "Thiết kế microservice sử dụng kiến trúc RESTful, dùng HttpClient để gọi SalesForce API, tích hợp với message queue để xử lý bất đồng bộ và đồng bộ hóa dữ liệu."
        },
        {
            "question": "Làm cách nào để xử lý vấn đề rate limiting khi gọi API SalesForce từ .NET?",
            "answer": "Áp dụng cơ chế retry logic, sử dụng circuit breaker pattern và caching để giảm số lượng cuộc gọi API khi gặp giới hạn tốc độ từ SalesForce."
        },
        {
            "question": "Làm cách nào để tích hợp SalesForce với ứng dụng .NET sử dụng kiến trúc RESTful?",
            "answer": "Xây dựng các controller trong ứng dụng .NET gọi đến SalesForce REST API, đảm bảo quản lý token và xử lý dữ liệu trả về bằng JSON."
        },
        {
            "question": "Làm cách nào để sử dụng logging và monitoring trong ứng dụng .NET để giám sát tích hợp với SalesForce?",
            "answer": "Sử dụng các thư viện logging như Serilog hoặc NLog, kết hợp với Application Insights để theo dõi các cuộc gọi API và ghi nhận lỗi, thời gian phản hồi."
        },
        {
            "question": "Làm cách nào để thiết lập CI/CD cho dự án .NET tích hợp với SalesForce?",
            "answer": "Sử dụng các công cụ như Azure DevOps hoặc GitHub Actions để tự động build, test và deploy ứng dụng .NET, tích hợp bước chạy kiểm thử API SalesForce trong pipeline."
        },
        {
            "question": "Làm cách nào để xử lý tình huống mất kết nối với SalesForce trong ứng dụng .NET?",
            "answer": "Áp dụng cơ chế fallback, lưu trữ dữ liệu tạm thời (offline caching) và tự động retry khi kết nối được khôi phục, đảm bảo trải nghiệm liên tục cho người dùng."
        },
        {
            "question": "Làm cách nào để đảm bảo tính nhất quán của dữ liệu khi đồng bộ giữa ứng dụng .NET và SalesForce?",
            "answer": "Sử dụng giao thức giao dịch (transactional) hoặc kiểm tra checksum, kết hợp với retry logic và kiểm tra phản hồi từ API để đảm bảo dữ liệu được đồng bộ chính xác."
        }
    ],
    "SFDC’s PDF": [
        {
            "question": "Làm cách nào để tạo một PDF từ một VisualForce page?",
            "answer": "Sử dụng thuộc tính renderAs='pdf' trong thẻ <apex:page> của VisualForce page."
        },
        {
            "question": "Thuộc tính renderAs attribute trong VisualForce page dùng cho mục đích gì?",
            "answer": "Thuộc tính renderAs cho phép chỉ định định dạng của trang, như 'pdf' để tạo PDF."
        },
        {
            "question": "Làm cách nào để gửi một PDF như là attachment qua email từ SalesForce?",
            "answer": "Sử dụng Apex để tạo PDF từ VisualForce page, sau đó sử dụng lớp Messaging để gửi email với attachment là PDF."
        },
        {
            "question": "PDF templates trong SalesForce là gì và cách sử dụng chúng?",
            "answer": "PDF templates là các mẫu tiên định để tạo các tài liệu PDF từ dữ liệu của SalesForce. Chúng có thể được sử dụng để tạo các hóa đơn, báo giá, v.v."
        },
        {
            "question": "Làm cách nào để tùy chỉnh layout của một PDF tạo từ VisualForce page?",
            "answer": "Sử dụng CSS để tùy chỉnh giao diện của VisualForce page, và đảm bảo rằng các phần tử được đặt theo cách phù hợp cho định dạng PDF."
        },
        {
            "question": "Có thể embed images trong PDF tạo từ SalesForce hay không?",
            "answer": "Có, bạn có thể sử dụng thẻ <img> trong VisualForce page để hiển thị hình ảnh, và chúng sẽ được bao gồm trong PDF."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu động trong PDF template?",
            "answer": "Sử dụng merge fields hoặc các biến trong VisualForce page để hiển thị dữ liệu động từ SalesForce."
        },
        {
            "question": "Những best practices cho việc tạo báo cáo PDF trong SalesForce là gì?",
            "answer": "Giữ cho VisualForce page đơn giản, sử dụng CSS để tùy chỉnh, kiểm tra trang trước khi render thành PDF, và sử dụng các thư viện như jsPDF nếu cần tùy chỉnh hơn."
        },
        {
            "question": "Làm cách nào để bảo mật PDF files trong SalesForce?",
            "answer": "Sử dụng các quy tắc sharing và security của SalesForce để kiểm soát quyền truy cập đến các bản ghi có attachments là PDF."
        },
        {
            "question": "Có cách nào để tạo PDF sử dụng Apex code mà không cần VisualForce pages hay không?",
            "answer": "Có, bạn có thể sử dụng lớp PDF của SalesForce hoặc các thư viện bên thứ ba để tạo PDF trực tiếp từ Apex code."
        },
        {
            "question": "Làm cách nào để thêm header và footer vào PDF tạo từ VisualForce?",
            "answer": "Sử dụng các thẻ như <apex:pageBlock> hoặc CSS để định nghĩa header và footer trong VisualForce page."
        },
        {
            "question": "Làm cách nào để kiểm tra lỗi khi tạo PDF từ VisualForce?",
            "answer": "Sử dụng debug logs để theo dõi lỗi, kiểm tra xem các merge fields có đúng không, và đảm bảo dữ liệu đầu vào hợp lệ."
        },
        {
            "question": "Làm cách nào để tạo PDF từ dữ liệu lớn trong SalesForce?",
            "answer": "Sử dụng Batch Apex để xử lý dữ liệu lớn, sau đó tạo PDF từng phần hoặc sử dụng VisualForce với pagination."
        },
        {
            "question": "Làm cách nào để gửi PDF tự động qua email dựa trên một trigger?",
            "answer": "Viết trigger để gọi Apex code, tạo PDF từ VisualForce, sau đó sử dụng Messaging.SingleEmailMessage để gửi email."
        },
        {
            "question": "Làm cách nào để tùy chỉnh font trong PDF tạo từ SalesForce?",
            "answer": "Sử dụng CSS để định nghĩa font, nhưng cần đảm bảo font được hỗ trợ trong môi trường PDF rendering của SalesForce."
        },
        {
            "question": "Làm cách nào để tạo PDF với nhiều trang từ VisualForce?",
            "answer": "Sử dụng pagination hoặc lặp qua dữ liệu trong VisualForce page để tạo nhiều trang PDF."
        },
        {
            "question": "Làm cách nào để lưu PDF vào một bản ghi trong SalesForce?",
            "answer": "Tạo PDF, sau đó lưu nó như một attachment hoặc file trong ContentDocument liên kết với bản ghi."
        },
        {
            "question": "Làm cách nào để kiểm tra định dạng PDF trước khi gửi?",
            "answer": "Xem trước PDF trong VisualForce page bằng cách renderAs='pdf' và kiểm tra giao diện."
        },
        {
            "question": "Làm cách nào để tạo PDF với chữ ký điện tử?",
            "answer": "Sử dụng các thư viện bên thứ ba như DocuSign hoặc thêm hình ảnh chữ ký vào VisualForce page."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất khi tạo PDF từ SalesForce?",
            "answer": "Giảm số lượng dữ liệu xử lý, sử dụng caching, và tránh các truy vấn phức tạp trong VisualForce page."
        },
        {
            "question": "Sự khác biệt giữa renderAs='pdf' và renderAs='html' trong các trang VisualForce là gì?",
            "answer": "renderAs='pdf' cho phép trang VisualForce được render thành tài liệu PDF, trong khi renderAs='html' render nó thành một trang HTML thông thường. Khi sử dụng renderAs='pdf', trang sẽ được tạo thành định dạng PDF, có thể được tải xuống hoặc hiển thị trực tiếp tùy thuộc vào cài đặt trình duyệt."
        },
        {
            "question": "SalesForce xử lý việc render PDF từ trang VisualForce như thế nào?",
            "answer": "SalesForce sử dụng một engine render để chuyển đổi trang VisualForce thành PDF. Engine này sẽ chuyển đổi HTML và CSS của trang thành định dạng PDF. Tuy vậy, SalesForce có những giới hạn về CSS và JavaScript hỗ trợ cho việc render PDF, vì vậy bạn cần đảm bảo rằng trang của bạn tuân thủ các quy tắc và hạn chế này."
        },
        {
            "question": "Những hạn chế và best practices nào cần lưu ý khi sử dụng renderAs='pdf'?",
            "answer": "Một số hạn chế bao gồm: JavaScript thường bị vô hiệu hóa, CSS có những thuộc tính không được hỗ trợ, và có thể có vấn đề với việc hiển thị hình ảnh hoặc font chữ đặc biệt. Best practices bao gồm việc sử dụng CSS đơn giản, tránh sử dụng JavaScript, và kiểm tra trang trước khi render thành PDF để đảm bảo định dạng đúng."
        },
        {
            "question": "Làm thế nào để đính kèm một PDF tạo từ trang VisualForce vào email sử dụng Apex?",
            "answer": "Bạn có thể sử dụng Apex để tạo PDF từ trang VisualForce bằng cách sử dụng lớp PageReference và Blob để lấy nội dung PDF, sau đó sử dụng lớp Messaging.SingleEmailMessage để gửi email với PDF là attachment. Ví dụ: PageReference pdfPage = new PageReference('/apex/YourVisualForcePage'); pdfPage.setParameters(new Map<String, String>{ 'id' => recordId }); Blob pdfBlob = pdfPage.getContentAsPDF(); Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage(); mail.setSubject('Tiêu đề'); mail.setBody('Nội dung email', 'text/plain; charset UTF-8'); mail.setToAddresses(new String[] { 'người nhận@example.com' }); mail.setFileAttachments(new Messaging.EmailFileAttachment[] { new Messaging.EmailFileAttachment(pdfBlob, 'tên_tệp.pdf', 'application/pdf') }); Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });"
        },
        {
            "question": "Có thể gửi PDF trực tiếp từ trang VisualForce mà không sử dụng Apex hay không?",
            "answer": "Không, để gửi PDF qua email, bạn cần sử dụng Apex để tạo PDF và sau đó gửi email với attachment là PDF. Trang VisualForce chỉ có thể hiển thị hoặc tải xuống PDF, nhưng không thể gửi email trực tiếp."
        },
        {
            "question": "Những bước để tạo và gửi PDF qua email sử dụng một button trên trang chi tiết của bản ghi?",
            "answer": "Để tạo và gửi PDF qua email sử dụng một button trên trang chi tiết của bản ghi, bạn có thể làm theo các bước sau: 1. Tạo một trang VisualForce với renderAs='pdf' để tạo PDF từ dữ liệu của bản ghi. 2. Tạo một lớp Apex với phương thức để tạo PDF từ trang VisualForce và gửi email. 3. Trên trang chi tiết của bản ghi, thêm một button tùy chỉnh gọi phương thức Apex với ID của bản ghi làm tham số."
        },
        {
            "question": "Làm thế nào để tạo một mẫu PDF tùy chỉnh trong SalesForce?",
            "answer": "Để tạo một mẫu PDF tùy chỉnh trong SalesForce, bạn có hai tùy chọn chính: 1. Sử dụng trang VisualForce: Tạo một trang VisualForce với renderAs='pdf' và thiết kế layout theo yêu cầu của mình sử dụng HTML và CSS. 2. Sử dụng Document Templates: Tạo một mẫu tài liệu trong SalesForce, chọn định dạng là PDF, và thiết kế mẫu sử dụng các merge fields để hiển thị dữ liệu từ bản ghi."
        },
        {
            "question": "Làm thế nào để liên kết một mẫu PDF với một đối tượng hoặc loại bản ghi cụ thể?",
            "answer": "Nếu bạn sử dụng Document Templates, bạn có thể liên kết mẫu với một đối tượng cụ thể bằng cách chọn đối tượng đó trong phần cài đặt của mẫu. Ví dụ, bạn có thể tạo một mẫu PDF cho đối tượng Opportunity. Nếu bạn sử dụng trang VisualForce, bạn có thể thiết kế trang để hoạt động với một đối tượng cụ thể bằng cách sử dụng Apex controller hoặc extension liên kết với đối tượng đó."
        },
        {
            "question": "Có thể sử dụng merge fields trong mẫu PDF, và nếu có, làm thế nào?",
            "answer": "Trong Document Templates, bạn có thể sử dụng merge fields để hiển thị dữ liệu từ bản ghi. Merge fields có dạng {Field_Name}, và chúng sẽ được thay thế bằng giá trị của trường từ bản ghi tương ứng. Trong trang VisualForce, bạn có thể sử dụng biến Apex để hiển thị dữ liệu từ bản ghi. Ví dụ, nếu bạn có một controller liên kết với một bản ghi Opportunity, bạn có thể sử dụng {!opportunity.Name} để hiển thị tên của opportunity."
        },
        {
            "question": "Làm thế nào để kiểm soát kích thước và hướng của trang trong PDF tạo từ VisualForce page?",
            "answer": "Để kiểm soát kích thước và hướng của trang trong PDF tạo từ VisualForce page, bạn có thể sử dụng các thuộc tính CSS để định nghĩa chiều rộng, chiều cao và hướng của trang. Ví dụ, bạn có thể sử dụng @page rule trong CSS để định nghĩa kích thước trang. Tuy vậy, SalesForce có những giới hạn về CSS hỗ trợ cho render PDF, vì vậy bạn cần kiểm tra tài liệu chính thức để biết những thuộc tính nào được hỗ trợ."
        },
        {
            "question": "Làm thế nào để thiết lập margin và padding trong PDF?",
            "answer": "Bạn có thể sử dụng các thuộc tính CSS như margin và padding để thiết lập khoảng cách và đệm cho các phần tử trên trang VisualForce. Tuy vậy, do những giới hạn của render PDF, bạn cần đảm bảo rằng các thuộc tính CSS bạn sử dụng được hỗ trợ."
        },
        {
            "question": "Có thể sử dụng CSS để style PDF, và có những xem xét đặc biệt nào cho việc render PDF?",
            "answer": "Vâng, bạn có thể sử dụng CSS để style PDF. Tuy vậy, SalesForce có những giới hạn về CSS hỗ trợ cho render PDF. Ví dụ, JavaScript thường bị vô hiệu hóa, và một số thuộc tính CSS có thể không được hỗ trợ hoặc hoạt động khác biệt. Bạn cần kiểm tra tài liệu chính thức của SalesForce để biết những thuộc tính CSS nào được hỗ trợ và cách chúng hoạt động trong render PDF."
        },
        {
            "question": "Làm thế nào để truyền parameters đến trang VisualForce để tạo PDF động?",
            "answer": "Bạn có thể truyền parameters đến trang VisualForce bằng cách sử dụng query string parameters hoặc thông qua Apex controller. Ví dụ, nếu bạn có một button trên trang chi tiết của bản ghi, bạn có thể thiết lập URL của button để truyền ID của bản ghi đến trang VisualForce. Sau đó, trong controller, bạn có thể lấy parameter này và sử dụng để lấy dữ liệu từ bản ghi."
        },
        {
            "question": "Làm thế nào để truy vấn và hiển thị dữ liệu từ các đối tượng liên quan trong PDF?",
            "answer": "Trong Apex controller của trang VisualForce, bạn có thể sử dụng SOQL để truy vấn dữ liệu từ các đối tượng liên quan. Sau đó, bạn có thể hiển thị dữ liệu này trên trang VisualForce sử dụng biến Apex. Ví dụ, nếu bạn đang tạo PDF cho một Opportunity, bạn có thể truy vấn các bản ghi Contact liên quan và hiển thị thông tin của chúng trong PDF."
        },
        {
            "question": "Những cách tốt nhất để xử lý lượng dữ liệu lớn trong PDF mà không gây ra vấn đề về hiệu suất?",
            "answer": "Để xử lý lượng dữ liệu lớn trong PDF, bạn có thể sử dụng phân trang hoặc lọc dữ liệu để chỉ hiển thị những phần quan trọng nhất. Ngoài ra, bạn có thể sử dụng caching để lưu trữ dữ liệu đã truy vấn và tránh truy vấn lặp lại. Trong trang VisualForce, bạn có thể sử dụng các thẻ như <apex:repeat> để hiển thị danh sách dữ liệu, nhưng cần đảm bảo rằng danh sách không quá lớn để tránh vấn đề về hiệu suất."
        },
        {
            "question": "Những sai lầm phổ biến cần tránh khi tạo PDF từ trang VisualForce?",
            "answer": "Một số sai lầm phổ biến bao gồm: Sử dụng JavaScript, vì nó thường bị vô hiệu hóa trong render PDF. Sử dụng các thuộc tính CSS không được hỗ trợ, dẫn đến định dạng sai. Không kiểm tra trang trước khi render thành PDF, dẫn đến kết quả không như mong đợi. Tải quá nhiều hình ảnh hoặc dữ liệu lớn, gây ra vấn đề về hiệu suất. Không đảm bảo rằng font chữ được sử dụng là font hỗ trợ."
        },
        {
            "question": "Làm thế nào để đảm bảo rằng PDF có thể đọc và định dạng đúng trên các thiết bị và trình duyệt khác nhau?",
            "answer": "Để đảm bảo rằng PDF có thể đọc và định dạng đúng trên các thiết bị và trình duyệt khác nhau, bạn nên: Sử dụng các font chữ phổ biến và chuẩn. Đảm bảo rằng kích thước và định dạng văn bản là phù hợp. Kiểm tra PDF trên các trình duyệt và thiết bị khác nhau để đảm bảo tính tương thích. Sử dụng các thuộc tính CSS chuẩn để định dạng."
        },
        {
            "question": "Những xem xét về hiệu suất nào cần có cho việc tạo PDF trong SalesForce?",
            "answer": "Một số xem xét về hiệu suất bao gồm: Giảm số lượng truy vấn database bằng cách sử dụng caching hoặc lấy dữ liệu hiệu quả. Tránh sử dụng các thành phần nặng hoặc phức tạp trên trang VisualForce. Tối ưu hóa hình ảnh để giảm kích thước file. Sử dụng các kỹ thuật để giảm thời gian render, như sử dụng layout đơn giản."
        },
        {
            "question": "Làm thế nào để hạn chế quyền truy cập đến những PDF cụ thể dựa trên quy tắc của SalesForce?",
            "answer": "SalesForce cung cấp các quy tắc sharing và security để kiểm soát quyền truy cập đến các bản ghi. Nếu bạn lưu PDF như là attachment của một bản ghi, quy tắc sharing của bản ghi đó sẽ áp dụng để quy định ai có thể xem attachment. Ngoài ra, nếu bạn tạo PDF và gửi qua email, bạn cần đảm bảo rằng người nhận có quy tắc truy cập phù hợp để xem nội dung của PDF."
        },
        {
            "question": "Có thể bảo mật PDF bằng mật khẩu hoặc các biện pháp khác hay không?",
            "answer": "SalesForce không cung cấp tính năng bảo mật PDF bằng mật khẩu trực tiếp. Nếu bạn muốn bảo mật PDF, bạn có thể sử dụng các thư viện bên thứ ba hoặc Apex code để thêm mật khẩu cho PDF. Tuy vậy, việc sử dụng thư viện bên thứ ba trong SalesForce có những hạn chế, và bạn cần đảm bảo rằng thư viện đó được hỗ trợ và có thể được sử dụng trong môi trường của bạn."
        },
        {
            "question": "Những biện pháp nào có thể thực hiện để ngừa truy cập không ủy quyền hoặc phân phối sai của PDF nhạy cảm?",
            "answer": "Để ngừa truy cập không ủy quyền hoặc phân phối sai của PDF nhạy cảm, bạn có thể: Lưu PDF như là attachment của bản ghi và sử dụng quy tắc sharing và security của SalesForce để hạn chế quyền truy cập. Sử dụng các quy tắc validation và authorization trong Apex để đảm bảo rằng chỉ những người có quyền thích hợp mới có thể tạo hoặc xem PDF. Sử dụng các biện pháp bảo mật bổ sung như encryption hoặc watermarking để bảo vệ nội dung của PDF."
        },
        {
            "question": "Sự khác biệt giữa việc tạo PDF sử dụng Apex và sử dụng trang VisualForce là gì?",
            "answer": "Khi sử dụng trang VisualForce, bạn tạo một trang web và sử dụng renderAs='pdf' để chuyển đổi nó thành PDF. Điều này phù hợp cho các trường hợp bạn muốn có một giao diện đẹp và dễ tùy chỉnh. Khi sử dụng Apex, bạn có thể sử dụng các lớp của SalesForce hoặc thư viện bên thứ ba để tạo PDF trực tiếp từ code. Điều này có thể cho bạn sự kiểm soát tốt hơn về định dạng và hiệu suất, nhưng có thể phức tạp hơn."
        },
        {
            "question": "Làm thế nào để sử dụng lớp PDF của SalesForce trong Apex để tạo PDF?",
            "answer": "SalesForce không cung cấp một lớp PDF built-in để tạo PDF trực tiếp từ Apex. Tuy vậy, bạn có thể sử dụng lớp PageReference để lấy nội dung PDF từ một trang VisualForce. Nếu bạn muốn tạo PDF mà không sử dụng trang VisualForce, bạn có thể cần sử dụng các thư viện bên thứ ba hoặc viết code tùy chỉnh để tạo PDF."
        },
        {
            "question": "Có những ứng dụng bên thứ ba nào có thể được tích hợp với SalesForce để tạo PDF?",
            "answer": "Có rất nhiều ứng dụng bên thứ ba trên AppExchange của SalesForce chuyên về việc tạo và quản lý tài liệu, bao gồm tạo PDF. Ví dụ, DocuSign, PandaDoc, và Adobe Sign là những ứng dụng phổ biến cho việc tạo và ký kết tài liệu, bao gồm PDF."
        },
        {
            "question": "Làm thế nào để thêm một mục lục hoặc chỉ mục vào PDF?",
            "answer": "Để thêm một mục lục hoặc chỉ mục vào PDF tạo từ VisualForce, bạn có thể sử dụng các thẻ HTML và CSS để tạo mục lục trên trang. Tuy vậy, việc tạo mục lục tự động có thể phức tạp, và bạn có thể cần sử dụng JavaScript để tạo mục lục dựa trên tiêu đề của trang. Vì JavaScript thường bị vô hiệu hóa trong render PDF, bạn có thể cần tạo mục lục thủ công hoặc sử dụng các kỹ thuật khác."
        },
        {
            "question": "Làm thế nào để tạo PDF có bookmark với các phần có thể navigable?",
            "answer": "Để tạo PDF có bookmark, bạn có thể sử dụng các thư viện bên thứ ba để thêm bookmark vào PDF sau khi tạo. Trong VisualForce, việc này có thể khó khăn vì không có sự hỗ trợ trực tiếp."
        },
        {
            "question": "Có thể thêm các phần tử tương tác như link hoặc form fields vào PDF hay không?",
            "answer": "Trong PDF tạo từ VisualForce, các link HTML có thể được hiển thị như link trong PDF, nhưng chức năng của chúng có thể khác tùy thuộc vào trình xem PDF. Tuy nhiên, form fields và các phần tử tương tác khác có thể không hoạt động đúng do giới hạn của render PDF."
        },
        {
            "question": "Làm thế nào để debug các vấn đề khi tạo PDF từ trang VisualForce?",
            "answer": "Để debug các vấn đề khi tạo PDF từ trang VisualForce, bạn có thể: Xem trang VisualForce trong trình duyệt để kiểm tra xem nó hiển thị đúng trước khi render thành PDF, kiểm tra log của SalesForce và sử dụng các công cụ phát triển web như Chrome DevTools để xem cấu trúc HTML/CSS."
        },
        {
            "question": "Những thông báo lỗi phổ biến và cách giải quyết chúng?",
            "answer": "Một số thông báo lỗi phổ biến bao gồm: 'Failed to load PDF', 'CSS not applied', 'Image not displayed'. Để giải quyết, bạn cần kiểm tra lại VisualForce page, xác định các lỗi trong debug logs, đảm bảo các merge fields và thuộc tính CSS được hỗ trợ và hiển thị đúng."
        },
        {
            "question": "Làm thế nào để xử lý các trường hợp mà việc tạo PDF thất bại do thiếu dữ liệu hoặc các vấn đề khác?",
            "answer": "Để xử lý trường hợp PDF thất bại, bạn có thể sử dụng try-catch trong Apex để bắt lỗi, kiểm tra dữ liệu đầu vào, hiển thị thông báo lỗi cho người dùng hoặc tạo PDF với nội dung mặc định nếu dữ liệu không đầy đủ."
        },
        {
            "question": "Làm thế nào để phân trang các dữ liệu lớn trong PDF để tránh vấn đề về hiệu suất?",
            "answer": "Để phân trang dữ liệu lớn, bạn có thể sử dụng các thẻ HTML như <div> hoặc <table> để chia dữ liệu thành các phần riêng biệt, kết hợp với CSS (ví dụ: sử dụng page-break-before hoặc page-break-after) để xác định điểm phân trang."
        },
        {
            "question": "Kích thước tối đa của PDF có thể tạo từ trang VisualForce là bao nhiêu?",
            "answer": "SalesForce không quy định rõ kích thước tối đa của PDF, nhưng bạn cần lưu ý giới hạn về hiệu suất và bộ nhớ. Do đó, nên tối ưu nội dung và hình ảnh để giữ kích thước file ở mức hợp lý."
        },
        {
            "question": "Những cách tối ưu hóa nào có thể sử dụng để tăng tốc độ tạo PDF từ SalesForce?",
            "answer": "Để tối ưu hóa tốc độ tạo PDF, bạn có thể: giảm số lượng dữ liệu truy vấn, sử dụng caching, tối giản CSS/HTML, phân trang dữ liệu và tối ưu hóa hình ảnh để giảm kích thước file."
        },
        {
            "question": "Làm thế nào để thiết lập một trigger để tự động tạo và gửi PDF khi có những điều kiện nhất định?",
            "answer": "Để thiết lập trigger tự động tạo và gửi PDF, bạn có thể viết Apex trigger trên đối tượng cần thiết và gọi một phương thức Apex tạo PDF từ VisualForce page, sau đó sử dụng Messaging để gửi email kèm file PDF."
        },
        {
            "question": "Có thể lên lịch tạo PDF sử dụng các tính năng scheduling của SalesForce hay không?",
            "answer": "Vâng, bạn có thể sử dụng Batch Apex hoặc Scheduled Apex để lên lịch tạo PDF tại một thời gian cụ thể hoặc định kỳ, tùy thuộc vào yêu cầu nghiệp vụ."
        },
        {
            "question": "Làm thế nào để xử lý việc tạo nhiều PDF một lúc?",
            "answer": "Để tạo nhiều PDF cùng lúc, bạn có thể sử dụng Batch Apex để xử lý các bản ghi theo lô và tạo PDF cho mỗi bản ghi, giúp giảm tải và tối ưu hiệu suất."
        },
        {
            "question": "Làm thế nào để sử dụng font tùy chỉnh trong PDF tạo từ SalesForce?",
            "answer": "Để sử dụng font tùy chỉnh, bạn có thể upload font đó dưới dạng static resource và tham chiếu nó trong CSS của VisualForce page, đảm bảo font được hỗ trợ trong môi trường render PDF."
        },
        {
            "question": "Những loại font nào được hỗ trợ và làm thế nào để upload chúng?",
            "answer": "SalesForce hỗ trợ các font chuẩn như Arial, Helvetica, Times New Roman, v.v. Nếu cần font tùy chỉnh, bạn có thể upload chúng như là static resource và tham chiếu trong CSS."
        },
        {
            "question": "Làm thế nào để đảm bảo rằng font rendering là nhất quán trên các trình xem PDF khác nhau?",
            "answer": "Để đảm bảo font rendering nhất quán, bạn nên sử dụng các font phổ biến, nhúng font vào PDF nếu cần và kiểm tra kỹ trên các trình xem PDF khác nhau."
        },
        {
            "question": "Làm thế nào để tạo PDF có nhiều phần hoặc chương?",
            "answer": "Để tạo PDF có nhiều phần hoặc chương, bạn có thể sử dụng các thẻ HTML để tổ chức nội dung thành các phần riêng biệt, sử dụng tiêu đề và CSS để định dạng, tạo sự phân chia rõ ràng giữa các chương."
        },
        {
            "question": "Làm thế nào để xử lý page breaks dựa trên nội dung?",
            "answer": "Bạn có thể sử dụng thuộc tính CSS như page-break-before hoặc page-break-after để xác định vị trí ngắt trang dựa trên nội dung, đảm bảo rằng các phần không bị cắt xén không đúng cách."
        },
        {
            "question": "Có thể có header hoặc footer khác nhau trên các trang hoặc phần khác nhau hay không?",
            "answer": "Vâng, bạn có thể sử dụng CSS và cấu trúc HTML để định nghĩa header và footer riêng cho từng phần hoặc trang trong PDF."
        },
        {
            "question": "Làm thế nào để lưu PDF vào một bản ghi trong SalesForce?",
            "answer": "Để lưu PDF vào một bản ghi, bạn có thể sử dụng Apex để tạo PDF và sau đó lưu file PDF như một attachment hoặc dưới dạng ContentDocument liên kết với bản ghi đó."
        },
        {
            "question": "Có thể làm cho PDF có thể truy cập cho một số người dùng hoặc nhóm cụ thể hay không?",
            "answer": "Vâng, bạn có thể sử dụng các quy tắc sharing và security của SalesForce để kiểm soát quyền truy cập, đảm bảo rằng chỉ những người dùng hoặc nhóm cụ thể mới có thể xem PDF."
        },
        {
            "question": "Làm thế nào để tạo PDF từ VisualForce page khi dữ liệu thay đổi theo thời gian?",
            "answer": "Sử dụng các merge fields và Apex controller để truy vấn dữ liệu thời gian thực, kết hợp với thuộc tính renderAs='pdf' nhằm tạo PDF với nội dung cập nhật liên tục."
        },
        {
            "question": "Làm thế nào để đảm bảo PDF tương thích với các thiết bị di động?",
            "answer": "Sử dụng thiết kế responsive với CSS, kiểm tra hiển thị trên nhiều thiết bị và tối ưu layout cho màn hình nhỏ để đảm bảo PDF hiển thị tốt trên di động."
        },
        {
            "question": "Cách xử lý lỗi khi PDF chứa nhiều bảng và biểu đồ?",
            "answer": "Kiểm tra lại cấu trúc HTML/CSS, sử dụng các thẻ hợp lệ cho bảng và biểu đồ, đảm bảo dữ liệu được tối ưu và kiểm tra trước khi render PDF để tránh lỗi."
        },
        {
            "question": "Làm thế nào để tối ưu hóa kích thước file PDF tạo từ VisualForce?",
            "answer": "Giảm kích thước hình ảnh, sử dụng CSS tối giản, loại bỏ nội dung không cần thiết và tối ưu hóa truy vấn dữ liệu để tạo file PDF có kích thước hợp lý."
        },
        {
            "question": "Có thể chuyển đổi PDF đã tạo thành định dạng hình ảnh như PNG hay JPEG không?",
            "answer": "SalesForce không hỗ trợ trực tiếp chuyển PDF thành hình ảnh. Bạn cần sử dụng thư viện hoặc dịch vụ bên ngoài để chuyển đổi sau khi tạo PDF."
        },
        {
            "question": "Làm thế nào để tích hợp PDF vào Lightning Components trong SalesForce?",
            "answer": "Tạo VisualForce page với renderAs='pdf' và nhúng nó vào Lightning Component thông qua iframe hoặc sử dụng Lightning Web Component hỗ trợ hiển thị PDF."
        },
        {
            "question": "Cách hiển thị PDF trực tiếp trong giao diện Lightning Experience?",
            "answer": "Sử dụng component Visualforce hoặc Lightning Web Component để hiển thị PDF trong iframe, đảm bảo tương thích với giao diện Lightning Experience."
        },
        {
            "question": "Làm thế nào để tạo các mẫu PDF đa ngôn ngữ trong SalesForce?",
            "answer": "Sử dụng merge fields và Apex controller để thay đổi nội dung dựa trên ngôn ngữ người dùng, kết hợp với tài nguyên dịch thuật để tạo PDF đa ngôn ngữ."
        },
        {
            "question": "Có cách nào để kiểm soát chất lượng hiển thị của PDF theo DPI?",
            "answer": "SalesForce không cung cấp tùy chọn DPI trực tiếp, do đó bạn cần kiểm tra kết quả PDF và sử dụng các công cụ bên ngoài nếu cần điều chỉnh chất lượng hiển thị cao hơn."
        },
        {
            "question": "Làm thế nào để thực hiện watermark động trên PDF tạo từ VisualForce?",
            "answer": "Sử dụng CSS để thêm watermark dạng background hoặc overlay trong VisualForce page, hoặc tích hợp thư viện bên ngoài để xử lý watermark sau khi PDF được tạo."
        },
        {
            "question": "Làm thế nào để gộp nhiều trang PDF thành một tài liệu duy nhất?",
            "answer": "SalesForce không hỗ trợ gộp PDF trực tiếp. Bạn cần sử dụng các công cụ hoặc thư viện bên thứ ba sau khi tạo PDF để hợp nhất nhiều file thành một tài liệu."
        },
        {
            "question": "Làm thế nào để tách các trang riêng lẻ từ một file PDF đã tạo?",
            "answer": "Sử dụng công cụ xử lý PDF bên ngoài hoặc dịch vụ API để tách các trang từ file PDF sau khi PDF được tạo."
        },
        {
            "question": "Cách xử lý lỗi bộ nhớ khi tạo PDF với dữ liệu quá lớn?",
            "answer": "Phân trang dữ liệu, sử dụng Batch Apex để xử lý theo lô và tối ưu hóa truy vấn dữ liệu nhằm giảm tải bộ nhớ khi render PDF."
        },
        {
            "question": "Có thể sử dụng biểu đồ và đồ thị trong PDF tạo từ VisualForce không?",
            "answer": "Có, bạn có thể hiển thị biểu đồ và đồ thị bằng cách render chúng dưới dạng hình ảnh hoặc sử dụng thư viện hỗ trợ tạo đồ thị có khả năng render PDF."
        },
        {
            "question": "Làm thế nào để cập nhật phiên bản PDF khi có thay đổi dữ liệu?",
            "answer": "Sử dụng Apex trigger hoặc Scheduled Apex để tự động kiểm tra thay đổi dữ liệu và tạo lại PDF mới, đảm bảo phiên bản PDF luôn cập nhật."
        },
        {
            "question": "Làm thế nào để đảm bảo rằng PDF được render đúng định dạng với nhiều ngôn ngữ khác nhau?",
            "answer": "Sử dụng merge fields và tài nguyên ngôn ngữ trong Apex controller, đồng thời đảm bảo font chữ hỗ trợ đa ngôn ngữ để PDF hiển thị đúng định dạng."
        },
        {
            "question": "Cách xử lý lỗi khi sử dụng merge fields trong PDF?",
            "answer": "Đảm bảo cú pháp merge fields chính xác, kiểm tra dữ liệu tồn tại và theo dõi debug logs để xác định lỗi khi render PDF."
        },
        {
            "question": "Làm thế nào để thêm chữ ký số vào PDF được tạo từ SalesForce?",
            "answer": "Tích hợp các dịch vụ chữ ký số như DocuSign hoặc thêm hình ảnh chữ ký vào VisualForce page để nhúng vào PDF."
        },
        {
            "question": "Làm thế nào để kiểm tra hiệu suất tạo PDF trên môi trường sandbox?",
            "answer": "Thực hiện kiểm tra trên sandbox, theo dõi debug logs và sử dụng công cụ profiling của SalesForce để đo thời gian render PDF và tối ưu hóa code."
        },
        {
            "question": "Có thể sử dụng các framework JavaScript bên ngoài để hỗ trợ tạo PDF hay không?",
            "answer": "Do JavaScript thường bị vô hiệu hóa trong quá trình render PDF của SalesForce, bạn nên sử dụng CSS và Apex để tạo PDF hoặc tích hợp dịch vụ bên ngoài nếu cần."
        },
        {
            "question": "Làm thế nào để chuyển đổi HTML phức tạp thành PDF mà vẫn giữ nguyên định dạng?",
            "answer": "Đơn giản hóa HTML, sử dụng CSS chuẩn và kiểm tra trước khi render. Nếu cần, tích hợp các công cụ bên ngoài chuyên chuyển đổi HTML phức tạp thành PDF."
        },
        {
            "question": "Có thể tùy chỉnh chế độ in (print mode) cho PDF khi hiển thị trên trình duyệt không?",
            "answer": "Bạn có thể sử dụng CSS media queries để định nghĩa kiểu in riêng cho PDF, tuy nhiên cần kiểm tra khả năng hỗ trợ của trình duyệt khi in từ PDF."
        },
        {
            "question": "Làm thế nào để thêm trường tùy chỉnh vào PDF dựa trên quyền truy cập của người dùng?",
            "answer": "Sử dụng Apex controller để kiểm tra quyền của người dùng và render các trường tùy chỉnh trên VisualForce page dựa trên quyền truy cập đó."
        },
        {
            "question": "Cách kết hợp dữ liệu từ nhiều đối tượng vào một PDF duy nhất?",
            "answer": "Sử dụng SOQL kết hợp và Apex controller để truy xuất dữ liệu từ nhiều đối tượng, sau đó hiển thị chúng trên một VisualForce page để tạo PDF tổng hợp."
        },
        {
            "question": "Làm thế nào để xử lý lỗi khi vượt quá giới hạn kích thước file PDF?",
            "answer": "Tối ưu hóa nội dung, hình ảnh và truy vấn dữ liệu, đồng thời sử dụng phân trang nếu cần để đảm bảo file PDF không vượt quá giới hạn bộ nhớ của SalesForce."
        },
        {
            "question": "Có thể tự động phân loại các PDF tạo ra theo loại bản ghi trong SalesForce không?",
            "answer": "Có, sử dụng Apex để gán metadata hoặc phân loại PDF dựa trên loại bản ghi, sau đó lưu trữ dưới dạng ContentDocument hoặc attachment phù hợp."
        },
        {
            "question": "Làm thế nào để xử lý trường hợp PDF không hiển thị hình ảnh do lỗi URL?",
            "answer": "Kiểm tra URL hình ảnh, đảm bảo quyền truy cập đúng và nếu cần, sử dụng static resources để đảm bảo hình ảnh được tải chính xác trong PDF."
        },
        {
            "question": "Làm thế nào để tạo PDF có tính năng tìm kiếm nội dung bên trong?",
            "answer": "Nếu text trong PDF được render dưới dạng text (không chuyển thành hình ảnh), PDF sẽ có khả năng tìm kiếm nội dung. Kiểm tra cấu hình của VisualForce page để đảm bảo điều này."
        },
        {
            "question": "Có cách nào để tạo PDF với định dạng tương tự như bảng tính Excel không?",
            "answer": "Bạn có thể thiết kế layout PDF theo dạng bảng biểu với CSS và HTML để bắt chước giao diện bảng tính Excel, tuy nhiên một số tính năng động của Excel có thể không được hỗ trợ."
        },
        {
            "question": "Làm thế nào để kiểm soát màu sắc và định dạng màu trong PDF tạo từ VisualForce?",
            "answer": "Sử dụng CSS để định nghĩa màu sắc và kiểu dáng, đồng thời kiểm tra các thuộc tính CSS được hỗ trợ trong quá trình render PDF của SalesForce."
        },
        {
            "question": "Làm thế nào để xử lý việc render các bảng dữ liệu phức tạp có nhiều dòng trong PDF?",
            "answer": "Phân trang dữ liệu, sử dụng các thẻ HTML như <table>, <tr>, <td> và áp dụng CSS phù hợp cho từng dòng để đảm bảo bảng hiển thị rõ ràng và không bị cắt xén."
        },
        {
            "question": "Có cách nào để tích hợp API bên ngoài để xử lý và tối ưu PDF sau khi tạo không?",
            "answer": "Có, bạn có thể sử dụng API của bên thứ ba để xử lý, nén file, hoặc thêm watermark vào PDF sau khi nó được tạo từ SalesForce."
        },
        {
            "question": "Làm thế nào để triển khai các thay đổi về giao diện PDF mà không ảnh hưởng đến các chức năng khác?",
            "answer": "Tách riêng logic tạo PDF và giao diện hiển thị. Sử dụng versioning cho VisualForce page và kiểm tra kỹ trên môi trường sandbox trước khi triển khai trên production."
        },
        {
            "question": "Làm thế nào để tạo PDF có tính năng tự động lưu trữ và backup định kỳ?",
            "answer": "Sử dụng Scheduled Apex để tự động tạo và lưu trữ PDF vào ContentDocument hoặc hệ thống lưu trữ bên ngoài, kết hợp với các quy trình backup định kỳ."
        },
        {
            "question": "Làm thế nào để cấu hình và sử dụng các static resources cho việc tạo PDF chất lượng cao?",
            "answer": "Upload các static resources như CSS, hình ảnh và font chữ lên SalesForce, sau đó tham chiếu chúng trong VisualForce page để đảm bảo PDF được render với giao diện và chất lượng cao."
        },
        {
            "question": "Làm thế nào để theo dõi và log quá trình tạo PDF nhằm dễ dàng debug các lỗi phát sinh?",
            "answer": "Sử dụng debug logs của SalesForce, tích hợp logging trong Apex và theo dõi các log file để nắm bắt quá trình render PDF, từ đó xác định và sửa lỗi phát sinh."
        }
    ],
    "Dynamics: Dynamics365 Environment Preparation": [
        {
            "question": "Những bước để tạo một tổ chức mới trong Dynamics 365 là gì?",
            "answer": "Đăng nhập vào Dynamics 365, chọn 'Create New Organization', nhập thông tin tổ chức, chọn khu vực, ngôn ngữ, và các tùy chọn khác."
        },
        {
            "question": "Làm cách nào để cấu hình bảo mật trong Dynamics 365?",
            "answer": "Cấu hình bảo mật bao gồm tạo các vai trò, phân quyền cho các vai trò, và gán các vai trò cho các người dùng."
        },
        {
            "question": "Sự khác biệt giữa deployment cloud và on-premises của Dynamics 365 là gì?",
            "answer": "Cloud deployment là dịch vụ trên web, quản lý bởi Microsoft, trong khi on-premises deployment là cài đặt trên máy chủ của khách hàng, cho phép kiểm soát đầy đủ hơn nhưng yêu cầu quản lý IT phức tạp hơn."
        },
        {
            "question": "Làm cách nào để thiết lập vai trò và quyền cho người dùng trong Dynamics 365?",
            "answer": "Tạo các vai trò, định nghĩa quyền cho mỗi vai trò, sau đó gán các vai trò cho người dùng tương ứng."
        },
        {
            "question": "Vai trò của Azure trong việc thiết lập môi trường Dynamics 365 là gì?",
            "answer": "Azure cung cấp các dịch vụ đám mây như lưu trữ, tính toán và database, hỗ trợ Dynamics 365, đặc biệt trong các deployment on-premises hoặc hybrid."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với các dịch vụ khác của Microsoft?",
            "answer": "Sử dụng các APIs và connectors có sẵn để tích hợp với các dịch vụ như Office 365, Power BI, Azure, v.v."
        },
        {
            "question": "Những xem xét quan trọng cho việc di chuyển dữ liệu trong Dynamics 365 là gì?",
            "answer": "Kế hoạch di chuyển dữ liệu từ hệ thống cũ, đảm bảo tính toàn vẹn dữ liệu và kiểm tra dữ liệu sau khi di chuyển."
        },
        {
            "question": "Làm cách nào để quản lý licenses và subscriptions cho Dynamics 365?",
            "answer": "Qua trang quản lý của Microsoft, đăng ký và quản lý licenses cho người dùng, đảm bảo mọi người dùng có license phù hợp."
        },
        {
            "question": "Những edition khác nhau của Dynamics 365 và sự khác biệt giữa chúng là gì?",
            "answer": "Dynamics 365 có các edition như Enterprise, Premium và Team, mỗi edition có tính năng và mức giá khác nhau. Enterprise cung cấp đầy đủ tính năng nhất, còn Team phù hợp với doanh nghiệp nhỏ."
        },
        {
            "question": "Làm cách nào để giám sát và tối ưu hóa hiệu suất của môi trường Dynamics 365?",
            "answer": "Sử dụng các công cụ giám sát của Microsoft để theo dõi các chỉ số như thời gian phản hồi và tài nguyên sử dụng, từ đó xử lý các vấn đề hiệu suất kịp thời."
        },
        {
            "question": "Làm cách nào để tạo một backup cho môi trường Dynamics 365?",
            "answer": "Sử dụng các công cụ backup của Microsoft hoặc Azure để sao lưu dữ liệu và cấu hình hệ thống."
        },
        {
            "question": "Làm cách nào để cấu hình multi-factor authentication (MFA) trong Dynamics 365?",
            "answer": "Kích hoạt MFA qua Azure AD, yêu cầu người dùng cung cấp thêm một phương thức xác thực như ứng dụng xác thực hoặc SMS."
        },
        {
            "question": "Làm cách nào để thiết lập một sandbox environment trong Dynamics 365?",
            "answer": "Tạo một tổ chức sandbox qua Admin Center, sao chép dữ liệu từ production để phục vụ cho mục đích test và phát triển."
        },
        {
            "question": "Làm cách nào để quản lý các bản cập nhật trong Dynamics 365?",
            "answer": "Sử dụng Admin Center để lên lịch và áp dụng các bản cập nhật, đồng thời kiểm tra trên sandbox trước khi triển khai trên production."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với hệ thống ERP bên ngoài?",
            "answer": "Sử dụng APIs hoặc connectors như Common Data Service để tích hợp Dynamics 365 với các hệ thống ERP như SAP hoặc Oracle."
        },
        {
            "question": "Làm cách nào để cấu hình email trong Dynamics 365?",
            "answer": "Cấu hình server email qua Exchange hoặc Office 365, thiết lập các quy tắc email cho các bản ghi như lead hoặc opportunity."
        },
        {
            "question": "Làm cách nào để đảm bảo tuân thủ GDPR trong Dynamics 365?",
            "answer": "Sử dụng các tính năng như Data Subject Request (DSR) và Data Export Service để quản lý dữ liệu cá nhân theo yêu cầu GDPR."
        },
        {
            "question": "Làm cách nào để giám sát các lỗi trong môi trường Dynamics 365?",
            "answer": "Sử dụng Health Center hoặc các công cụ logging của Microsoft để theo dõi và phân tích lỗi phát sinh."
        },
        {
            "question": "Làm cách nào để tối ưu hóa chi phí cho môi trường Dynamics 365?",
            "answer": "Quản lý licenses hiệu quả, sử dụng sandbox cho mục đích test thay vì production và tối ưu hóa tài nguyên Azure."
        },
        {
            "question": "Làm cách nào để đào tạo người dùng mới cho môi trường Dynamics 365?",
            "answer": "Sử dụng tài liệu hướng dẫn của Microsoft, tổ chức các buổi training và cung cấp quyền truy cập vào sandbox để thực hành."
        },
        {
            "question": "Làm cách nào để cấu hình backup tự động trong Dynamics 365?",
            "answer": "Thiết lập lịch backup thông qua công cụ của Microsoft hoặc Azure, đảm bảo backup diễn ra định kỳ và có thể phục hồi khi cần."
        },
        {
            "question": "Những công cụ nào được sử dụng để phân tích log trong Dynamics 365?",
            "answer": "Các công cụ như Azure Monitor, Application Insights và Power Platform Admin Center có thể giúp phân tích log và theo dõi sự kiện hệ thống."
        },
        {
            "question": "Làm thế nào để thiết lập quy trình phục hồi sau thảm họa trong Dynamics 365?",
            "answer": "Xây dựng kế hoạch phục hồi bao gồm backup định kỳ, replication dữ liệu và thiết lập môi trường dự phòng trên Azure."
        },
        {
            "question": "Cách quản lý bản vá (patch management) trong Dynamics 365 như thế nào?",
            "answer": "Sử dụng Admin Center để theo dõi và triển khai các bản vá phần mềm, đảm bảo hệ thống luôn được cập nhật các bản sửa lỗi bảo mật và hiệu suất."
        },
        {
            "question": "Làm thế nào để đảm bảo tính sẵn sàng cao (high availability) cho Dynamics 365?",
            "answer": "Triển khai trên nền tảng đám mây với khả năng mở rộng, sử dụng replication, load balancing và thiết lập các môi trường dự phòng."
        },
        {
            "question": "Các yếu tố cần xem xét khi triển khai Dynamics 365 trên hạ tầng on-premises là gì?",
            "answer": "Cần chú trọng đến phần cứng, mạng, bảo mật nội bộ, khả năng mở rộng và các yêu cầu về bảo trì so với triển khai trên đám mây."
        },
        {
            "question": "Làm thế nào để tối ưu hóa hiệu suất truy xuất dữ liệu trong Dynamics 365?",
            "answer": "Sử dụng indexing, tối ưu hóa truy vấn, phân mảnh dữ liệu và áp dụng caching để cải thiện tốc độ truy xuất dữ liệu."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với Power BI để báo cáo dữ liệu?",
            "answer": "Kết nối Dynamics 365 với Power BI thông qua connector tích hợp sẵn, sau đó tạo báo cáo và dashboard dựa trên dữ liệu từ Dynamics 365."
        },
        {
            "question": "Các bước để cấu hình và đồng bộ hóa dữ liệu giữa Dynamics 365 và hệ thống CRM khác?",
            "answer": "Sử dụng các công cụ tích hợp như Data Export Service, Power Automate hoặc APIs để đồng bộ hóa và chuyển đổi dữ liệu giữa các hệ thống."
        },
        {
            "question": "Làm cách nào để quản lý người dùng và nhóm trong Dynamics 365 thông qua Active Directory?",
            "answer": "Tích hợp Dynamics 365 với Azure Active Directory để quản lý người dùng, gán vai trò và phân quyền truy cập dựa trên nhóm."
        },
        {
            "question": "Những lưu ý khi triển khai Dynamics 365 trong môi trường hybrid là gì?",
            "answer": "Cần cân nhắc việc đồng bộ hóa dữ liệu giữa on-premises và cloud, đảm bảo bảo mật và tính nhất quán của dữ liệu."
        },
        {
            "question": "Làm thế nào để thực hiện cập nhật phiên bản Dynamics 365 mà không gián đoạn dịch vụ?",
            "answer": "Triển khai trên sandbox trước, kiểm tra kỹ lưỡng và sau đó áp dụng bản cập nhật trên production trong thời gian ít người dùng truy cập."
        },
        {
            "question": "Cách xác định và xử lý các vấn đề về hiệu suất hệ thống trong Dynamics 365?",
            "answer": "Sử dụng công cụ giám sát như Azure Monitor để theo dõi các chỉ số hiệu suất, sau đó tối ưu hóa cấu hình và truy vấn dữ liệu khi cần."
        },
        {
            "question": "Làm cách nào để kiểm tra và xác nhận tính toàn vẹn dữ liệu sau khi di chuyển?",
            "answer": "So sánh dữ liệu trước và sau khi di chuyển, sử dụng các công cụ kiểm tra tự động và thực hiện kiểm tra thủ công để đảm bảo không mất mát dữ liệu."
        },
        {
            "question": "Những tiêu chuẩn bảo mật nào cần áp dụng cho môi trường Dynamics 365?",
            "answer": "Áp dụng các tiêu chuẩn bảo mật như mã hóa dữ liệu, xác thực đa yếu tố, quản lý truy cập theo vai trò và theo dõi log an ninh."
        },
        {
            "question": "Làm thế nào để thiết lập hệ thống giám sát thời gian thực cho Dynamics 365?",
            "answer": "Sử dụng các công cụ như Azure Monitor, Application Insights và Power Platform Admin Center để giám sát các sự kiện và cảnh báo ngay lập tức."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với PowerApps để phát triển ứng dụng tùy chỉnh?",
            "answer": "Sử dụng Common Data Service và connector tích hợp sẵn giữa Dynamics 365 và PowerApps để xây dựng ứng dụng dựa trên dữ liệu Dynamics 365."
        },
        {
            "question": "Những công cụ nào hỗ trợ việc tự động hóa quy trình trong Dynamics 365?",
            "answer": "Sử dụng Power Automate, Workflow Designer và các API tích hợp để tự động hóa các quy trình nghiệp vụ trong Dynamics 365."
        },
        {
            "question": "Làm thế nào để tạo báo cáo tùy chỉnh trong Dynamics 365 để theo dõi hoạt động hệ thống?",
            "answer": "Sử dụng công cụ báo cáo tích hợp của Dynamics 365 hoặc kết nối với Power BI để tạo các báo cáo tùy chỉnh dựa trên dữ liệu hệ thống."
        },
        {
            "question": "Làm cách nào để triển khai các quy trình tự động hóa (workflow) trong Dynamics 365?",
            "answer": "Sử dụng Workflow Designer hoặc Power Automate để thiết lập các luồng công việc tự động, từ đó giảm thiểu thao tác thủ công."
        },
        {
            "question": "Cách cấu hình và quản lý dữ liệu khách hàng (customer data) trong Dynamics 365 như thế nào?",
            "answer": "Sử dụng các module CRM tích hợp, định nghĩa các trường dữ liệu cần thiết và thiết lập các quy trình xác thực dữ liệu để đảm bảo chất lượng thông tin khách hàng."
        },
        {
            "question": "Những bước cần thực hiện để kiểm tra bảo mật của môi trường Dynamics 365?",
            "answer": "Thực hiện kiểm tra bảo mật định kỳ, sử dụng công cụ đánh giá bảo mật của Microsoft và kiểm tra cấu hình truy cập của người dùng."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với Microsoft Flow để tự động hóa quy trình?",
            "answer": "Sử dụng Microsoft Flow (Power Automate) để kết nối Dynamics 365 với các dịch vụ khác, tạo luồng công việc tự động dựa trên các trigger sự kiện."
        },
        {
            "question": "Làm thế nào để tối ưu hóa trải nghiệm người dùng trong Dynamics 365?",
            "answer": "Tùy chỉnh giao diện, sử dụng dashboard trực quan, thiết lập các báo cáo thời gian thực và tối ưu hóa hiệu năng truy xuất dữ liệu."
        },
        {
            "question": "Các bước để thiết lập các kết nối dữ liệu bên ngoài với Dynamics 365 là gì?",
            "answer": "Xác định nguồn dữ liệu, sử dụng các connector hoặc API tích hợp và cấu hình đồng bộ hóa để đảm bảo dữ liệu được cập nhật liên tục."
        },
        {
            "question": "Làm cách nào để đảm bảo dữ liệu được đồng bộ hóa chính xác giữa Dynamics 365 và các hệ thống khác?",
            "answer": "Thực hiện kiểm tra định kỳ, sử dụng các công cụ đồng bộ dữ liệu và thiết lập các cảnh báo khi xảy ra lỗi đồng bộ."
        },
        {
            "question": "Làm thế nào để triển khai các giải pháp AI và machine learning trong Dynamics 365?",
            "answer": "Tích hợp với Azure AI, sử dụng Power BI và các giải pháp tùy chỉnh để phân tích dữ liệu và dự đoán xu hướng kinh doanh."
        },
        {
            "question": "Những phương pháp nào được khuyến cáo để bảo trì định kỳ môi trường Dynamics 365?",
            "answer": "Lên lịch bảo trì định kỳ, kiểm tra log, thực hiện backup và cập nhật các bản vá bảo mật cũng như tối ưu hóa hệ thống."
        },
        {
            "question": "Làm cách nào để quản lý quyền truy cập dữ liệu nhạy cảm trong Dynamics 365?",
            "answer": "Thiết lập phân quyền chi tiết theo vai trò, sử dụng Azure AD để quản lý truy cập và theo dõi các hoạt động liên quan đến dữ liệu nhạy cảm."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với hệ thống ERP của bên thứ ba qua API?",
            "answer": "Sử dụng API của Dynamics 365 kết hợp với các connector của bên thứ ba, đảm bảo quy trình xác thực và chuyển đổi dữ liệu phù hợp."
        },
        {
            "question": "Làm thế nào để kiểm tra và đảm bảo tính tương thích của Dynamics 365 với các trình duyệt web hiện đại?",
            "answer": "Thực hiện kiểm tra đa trình duyệt, cập nhật giao diện responsive và sử dụng các công cụ test của Microsoft để xác nhận tính tương thích."
        },
        {
            "question": "Các bước để thiết lập một môi trường thử nghiệm (testing environment) cho Dynamics 365 là gì?",
            "answer": "Tạo một bản sao sandbox từ production, cấu hình các tham số giống môi trường chính và tiến hành test các tính năng mới trên sandbox."
        },
        {
            "question": "Làm cách nào để triển khai cấu hình bảo mật theo vai trò trong Dynamics 365?",
            "answer": "Xác định các vai trò cần thiết, cấu hình quyền truy cập tương ứng và áp dụng chính sách bảo mật qua Azure AD hoặc trong Dynamics 365."
        },
        {
            "question": "Làm thế nào để thiết lập hệ thống giám sát và cảnh báo (alert system) trong Dynamics 365?",
            "answer": "Sử dụng Azure Monitor, thiết lập các chỉ số theo dõi và cấu hình cảnh báo tự động khi hệ thống vượt ngưỡng cho phép."
        },
        {
            "question": "Những công cụ nào giúp theo dõi hiệu suất và phân tích log của Dynamics 365?",
            "answer": "Azure Monitor, Application Insights và Power Platform Admin Center là các công cụ hỗ trợ theo dõi hiệu suất và phân tích log hiệu quả."
        },
        {
            "question": "Làm cách nào để cấu hình tự động cập nhật hệ thống cho Dynamics 365?",
            "answer": "Sử dụng tính năng cập nhật tự động của Microsoft thông qua Admin Center, lên lịch kiểm tra và triển khai cập nhật khi có bản vá mới."
        },
        {
            "question": "Các yêu cầu về phần cứng và phần mềm tối ưu cho triển khai Dynamics 365 là gì?",
            "answer": "Yêu cầu phần cứng và phần mềm phụ thuộc vào quy mô triển khai, nhưng cần đảm bảo tài nguyên đủ mạnh để xử lý dữ liệu và hỗ trợ các ứng dụng liên quan."
        },
        {
            "question": "Làm thế nào để cấu hình kết nối giữa Dynamics 365 và Azure Active Directory?",
            "answer": "Tích hợp Dynamics 365 với Azure AD qua cài đặt quản trị, xác thực người dùng và cấu hình các chính sách bảo mật đồng bộ."
        },
        {
            "question": "Các bước để đảm bảo an toàn cho dữ liệu trong Dynamics 365 khi tích hợp với các ứng dụng bên ngoài?",
            "answer": "Thực hiện mã hóa dữ liệu, kiểm tra bảo mật API và thiết lập các quy tắc firewall để bảo vệ dữ liệu khi truyền tải qua các ứng dụng bên ngoài."
        },
        {
            "question": "Làm cách nào để triển khai các giải pháp tùy chỉnh (custom solutions) trên Dynamics 365 mà không ảnh hưởng đến hệ thống cốt lõi?",
            "answer": "Sử dụng môi trường sandbox để phát triển và test, sau đó triển khai giải pháp tùy chỉnh trên production một cách cẩn trọng và có kế hoạch rollback nếu cần."
        },
        {
            "question": "Làm thế nào để quản lý và phân loại dữ liệu lớn trong Dynamics 365?",
            "answer": "Sử dụng các module quản lý dữ liệu, định nghĩa các chỉ mục (index) và phân chia dữ liệu theo vùng để tối ưu hóa việc lưu trữ và truy xuất."
        },
        {
            "question": "Các chiến lược sao lưu dữ liệu hiệu quả cho Dynamics 365 là gì?",
            "answer": "Sử dụng backup định kỳ, lưu trữ dữ liệu trên đám mây và thiết lập quy trình phục hồi dữ liệu nhanh khi xảy ra sự cố."
        },
        {
            "question": "Làm cách nào để thiết lập hệ thống log audit để theo dõi các thay đổi trong Dynamics 365?",
            "answer": "Kích hoạt tính năng audit trong Dynamics 365, cấu hình theo dõi các thay đổi quan trọng và lưu trữ log để kiểm tra khi cần."
        },
        {
            "question": "Làm thế nào để cấu hình cảnh báo khi có sự cố hoặc lỗi trong hệ thống Dynamics 365?",
            "answer": "Sử dụng Azure Monitor hoặc các công cụ giám sát tích hợp để thiết lập cảnh báo tự động dựa trên các chỉ số lỗi và sự cố hệ thống."
        },
        {
            "question": "Các bước để thực hiện kiểm tra bảo mật định kỳ cho môi trường Dynamics 365 là gì?",
            "answer": "Thực hiện kiểm tra bảo mật nội bộ, sử dụng các công cụ đánh giá từ Microsoft và tiến hành audit các thiết lập bảo mật định kỳ."
        },
        {
            "question": "Làm cách nào để tối ưu hóa tốc độ truy xuất dữ liệu qua API trong Dynamics 365?",
            "answer": "Tối ưu hóa các truy vấn API, giảm thiểu dữ liệu truyền tải và sử dụng caching để cải thiện tốc độ phản hồi."
        },
        {
            "question": "Những lưu ý khi thiết lập tích hợp Dynamics 365 với dịch vụ lưu trữ đám mây Azure là gì?",
            "answer": "Đảm bảo cấu hình kết nối bảo mật, đồng bộ hóa dữ liệu chính xác và theo dõi hiệu suất của dịch vụ Azure liên quan."
        },
        {
            "question": "Làm cách nào để cấu hình các kết nối dữ liệu đa nguồn trong Dynamics 365?",
            "answer": "Sử dụng các connector và API tích hợp để liên kết dữ liệu từ nhiều nguồn, đồng thời cấu hình các tham số đồng bộ hóa hợp lý."
        },
        {
            "question": "Những bước cần thực hiện để đảm bảo tính sẵn sàng của dịch vụ Dynamics 365 trong trường hợp khẩn cấp?",
            "answer": "Thiết lập hệ thống backup, replication, phân vùng tài nguyên và xây dựng kế hoạch phục hồi sau thảm họa chi tiết."
        },
        {
            "question": "Làm thế nào để kiểm tra và quản lý các bản ghi log hệ thống trong Dynamics 365?",
            "answer": "Sử dụng các công cụ giám sát như Azure Monitor và Power Platform Admin Center để thu thập, phân tích và lưu trữ log hệ thống."
        },
        {
            "question": "Làm cách nào để thiết lập hệ thống backup tự động và phục hồi nhanh cho Dynamics 365?",
            "answer": "Thiết lập backup định kỳ qua Azure hoặc công cụ của Dynamics 365, đồng thời cấu hình quy trình phục hồi tự động khi có sự cố."
        },
        {
            "question": "Các yêu cầu bảo mật cần tuân theo khi triển khai Dynamics 365 trên nền tảng Azure là gì?",
            "answer": "Áp dụng các chính sách bảo mật của Azure, sử dụng mã hóa, quản lý truy cập qua Azure AD và tuân thủ các tiêu chuẩn an ninh của Microsoft."
        },
        {
            "question": "Làm cách nào để kiểm tra tính tương thích của Dynamics 365 với các dịch vụ Microsoft khác?",
            "answer": "Thực hiện test tích hợp trên sandbox, sử dụng các công cụ đánh giá và kiểm tra tương thích của Microsoft để xác nhận tích hợp thành công."
        },
        {
            "question": "Những công cụ nào hỗ trợ giám sát trạng thái hoạt động của Dynamics 365 theo thời gian thực?",
            "answer": "Azure Monitor, Application Insights và Power Platform Admin Center giúp theo dõi trạng thái hoạt động và cảnh báo khi có sự cố."
        },
        {
            "question": "Làm thế nào để đảm bảo hiệu suất và ổn định của hệ thống Dynamics 365 khi có lượng truy cập tăng cao?",
            "answer": "Tối ưu hóa cấu hình hệ thống, sử dụng load balancing, mở rộng tài nguyên trên đám mây và giám sát sát sao hiệu suất."
        },
        {
            "question": "Làm cách nào để thiết lập các báo cáo tự động trong Dynamics 365 để theo dõi hiệu suất hệ thống?",
            "answer": "Sử dụng công cụ báo cáo tích hợp hoặc Power BI để tạo báo cáo tự động, lập lịch gửi báo cáo định kỳ cho người quản trị."
        },
        {
            "question": "Các bước để triển khai quy trình xác thực người dùng qua Multi-Factor Authentication trong Dynamics 365 là gì?",
            "answer": "Kích hoạt MFA qua Azure AD, cấu hình chính sách xác thực và đảm bảo người dùng thiết lập các phương thức xác thực bổ sung."
        },
        {
            "question": "Làm thế nào để tối ưu hóa quá trình di chuyển dữ liệu từ hệ thống cũ sang Dynamics 365?",
            "answer": "Lập kế hoạch di chuyển chi tiết, sử dụng các công cụ ETL và kiểm tra tính toàn vẹn dữ liệu trước và sau khi di chuyển."
        },
        {
            "question": "Làm cách nào để tích hợp Dynamics 365 với các công cụ quản lý dự án của Microsoft như Microsoft Project?",
            "answer": "Sử dụng API và connector tích hợp sẵn giữa Dynamics 365 và Microsoft Project để đồng bộ hóa dữ liệu dự án và tiến độ công việc."
        },
        {
            "question": "Các chiến lược kiểm soát truy cập và bảo mật dữ liệu trong Dynamics 365 là gì?",
            "answer": "Thiết lập quản lý vai trò, phân quyền truy cập, mã hóa dữ liệu và giám sát log để đảm bảo bảo mật toàn diện."
        },
        {
            "question": "Làm thế nào để triển khai và quản lý các plugins tùy chỉnh trong Dynamics 365?",
            "answer": "Phát triển, test trên sandbox và triển khai thông qua các gói giải pháp (solution packages) đảm bảo không làm ảnh hưởng đến hệ thống cốt lõi."
        },
        {
            "question": "Những lợi ích của việc sử dụng Power Platform kết hợp với Dynamics 365 là gì?",
            "answer": "Power Platform giúp tạo ứng dụng tùy chỉnh, tự động hóa quy trình và tạo báo cáo nâng cao dựa trên dữ liệu Dynamics 365."
        },
        {
            "question": "Làm cách nào để cấu hình và sử dụng Common Data Service trong Dynamics 365?",
            "answer": "Kết nối Dynamics 365 với Common Data Service, định nghĩa các entity và thiết lập quy trình đồng bộ hóa để chia sẻ dữ liệu giữa các ứng dụng."
        },
        {
            "question": "Các bước để thực hiện tích hợp Dynamics 365 với hệ thống IoT để thu thập dữ liệu là gì?",
            "answer": "Kết nối thiết bị IoT qua Azure IoT Hub, sau đó tích hợp dữ liệu với Dynamics 365 thông qua API và connector của Microsoft."
        },
        {
            "question": "Làm cách nào để quản lý các phiên bản tùy chỉnh (customizations) trong Dynamics 365?",
            "answer": "Sử dụng các solution để đóng gói, quản lý và triển khai các tùy chỉnh; đồng thời duy trì version control và test trên sandbox trước khi triển khai."
        },
        {
            "question": "Những cách nào để tối ưu hóa quy trình báo cáo và phân tích dữ liệu trong Dynamics 365?",
            "answer": "Sử dụng Power BI và các công cụ báo cáo tích hợp, tối ưu hóa truy vấn và cấu trúc dữ liệu để tạo báo cáo chi tiết và chính xác."
        },
        {
            "question": "Làm thế nào để kiểm soát việc truy cập và sửa đổi dữ liệu nhạy cảm trong Dynamics 365?",
            "answer": "Áp dụng phân quyền chặt chẽ theo vai trò, sử dụng các chính sách bảo mật và theo dõi log audit để giám sát mọi thay đổi dữ liệu nhạy cảm."
        },
        {
            "question": "Các bước để đảm bảo tính an toàn khi tích hợp Dynamics 365 với các ứng dụng bên ngoài là gì?",
            "answer": "Xác thực kết nối, mã hóa dữ liệu truyền tải và thực hiện kiểm tra bảo mật định kỳ cho các API tích hợp."
        },
        {
            "question": "Làm cách nào để thực hiện cập nhật định kỳ cho hệ thống Dynamics 365 mà không gây gián đoạn dịch vụ?",
            "answer": "Triển khai cập nhật trên môi trường sandbox trước, sau đó lên kế hoạch cập nhật trên production trong giờ thấp điểm và có kế hoạch dự phòng."
        },
        {
            "question": "Những biện pháp nào giúp tăng cường bảo mật cho Dynamics 365 khi triển khai trên nền tảng đám mây Azure?",
            "answer": "Sử dụng các chính sách bảo mật của Azure, mã hóa dữ liệu, triển khai MFA và theo dõi log hệ thống để phát hiện sớm các nguy cơ."
        },
        {
            "question": "Làm cách nào để thiết lập môi trường Dynamics 365 với khả năng mở rộng (scalability) cao?",
            "answer": "Triển khai trên nền tảng đám mây, sử dụng các dịch vụ tự động mở rộng và cấu hình cân bằng tải để đáp ứng lượng truy cập tăng cao."
        },
        {
            "question": "Các bước để thiết lập và cấu hình môi trường Dynamics 365 cho doanh nghiệp nhỏ là gì?",
            "answer": "Chọn edition phù hợp, cấu hình đơn giản hóa, sử dụng sandbox cho test và đảm bảo tối ưu hóa chi phí vận hành."
        },
        {
            "question": "Làm cách nào để triển khai quy trình tự động kiểm tra dữ liệu trong Dynamics 365?",
            "answer": "Sử dụng các công cụ ETL và Power Automate để kiểm tra tự động các bản ghi dữ liệu, đảm bảo tính nhất quán và toàn vẹn dữ liệu."
        },
        {
            "question": "Những công cụ nào hỗ trợ kiểm tra và tối ưu hóa tốc độ tải trang trong Dynamics 365?",
            "answer": "Sử dụng các công cụ như Browser Developer Tools, Application Insights và Azure Monitor để phân tích và tối ưu hóa tốc độ tải trang."
        },
        {
            "question": "Làm cách nào để cấu hình hệ thống Dynamics 365 để hỗ trợ hoạt động đa ngôn ngữ?",
            "answer": "Cấu hình các thiết lập ngôn ngữ, sử dụng tài nguyên dịch thuật và đảm bảo font chữ hỗ trợ đa ngôn ngữ trong giao diện người dùng."
        },
        {
            "question": "Các bước để triển khai và tích hợp Dynamics 365 với các hệ thống CRM khác là gì?",
            "answer": "Sử dụng các connector, API tích hợp và quy trình đồng bộ hóa để chia sẻ dữ liệu giữa Dynamics 365 và các hệ thống CRM khác."
        },
        {
            "question": "Làm cách nào để đảm bảo rằng dữ liệu được bảo mật và mã hóa khi truyền tải trong Dynamics 365?",
            "answer": "Áp dụng mã hóa SSL/TLS, sử dụng các giao thức bảo mật và thiết lập chính sách mã hóa nội bộ cho dữ liệu truyền tải."
        },
        {
            "question": "Những biện pháp nào có thể thực hiện để giảm thiểu rủi ro khi triển khai Dynamics 365?",
            "answer": "Thực hiện kiểm tra bảo mật, sử dụng môi trường sandbox để test, backup định kỳ và thiết lập quy trình phục hồi sau thảm họa."
        },
        {
            "question": "Làm cách nào để thiết lập hệ thống cảnh báo tự động khi có sự cố bảo mật trong Dynamics 365?",
            "answer": "Cấu hình các cảnh báo qua Azure Monitor, thiết lập trigger trong Power Automate và theo dõi log audit để phát hiện sớm các sự cố bảo mật."
        },
        {
            "question": "Những xu hướng công nghệ mới nào đang ảnh hưởng đến việc triển khai Dynamics 365 và cách chuẩn bị cho chúng?",
            "answer": "Xu hướng tích hợp AI, IoT, và Power Platform đang dần phổ biến. Do đó, cần theo dõi các bản cập nhật của Microsoft, đào tạo nhân sự và chuẩn bị cơ sở hạ tầng linh hoạt để tích hợp các công nghệ mới."
        }
    ],
    "Dynamics: Power Apps (model driven app and canvas app)": [
        {
            "question": "Sự khác biệt giữa model-driven app và canvas app trong Power Apps là gì?",
            "answer": "Model-driven app là các ứng dụng dựa trên mô hình dữ liệu, có cấu trúc định sẵn, trong khi canvas app là các ứng dụng tùy chỉnh, cho phép thiết kế giao diện từ đầu với drag-and-drop."
        },
        {
            "question": "Làm cách nào để tạo một model-driven app trong Power Apps?",
            "answer": "Sử dụng Power Apps Maker, chọn 'Create from scratch' hoặc 'Create from template', sau đó định nghĩa các entity, form, view và các tính năng khác."
        },
        {
            "question": "Những component của một model-driven app là gì?",
            "answer": "Bao gồm các entity, form, view, dashboard và các tính năng như workflow, business rules, v.v."
        },
        {
            "question": "Làm cách nào để kết nối một model-driven app với nguồn dữ liệu?",
            "answer": "Model-driven app thường kết nối trực tiếp với Dynamics 365 database hoặc các nguồn dữ liệu khác thông qua connectors."
        },
        {
            "question": "Làm cách nào để tùy chỉnh giao diện của một model-driven app?",
            "answer": "Sử dụng các tính năng customization của Power Apps, như thiết kế form, tạo các view tùy chỉnh và sử dụng các widget."
        },
        {
            "question": "Canvas app trong Power Apps là gì?",
            "answer": "Canvas app là các ứng dụng tùy chỉnh, cho phép người dùng thiết kế giao diện từ đầu với drag-and-drop, kết nối với các nguồn dữ liệu khác nhau."
        },
        {
            "question": "Làm cách nào để tạo một canvas app từ đầu?",
            "answer": "Sử dụng Power Apps Studio, chọn 'Blank app', sau đó thiết kế giao diện bằng cách kéo thả các control và kết nối với dữ liệu."
        },
        {
            "question": "Những nguồn dữ liệu mà canvas app có thể kết nối là gì?",
            "answer": "Canvas app có thể kết nối với các nguồn dữ liệu như Dynamics 365, SharePoint, Excel, SQL Server và nhiều nguồn khác thông qua connectors."
        },
        {
            "question": "Làm cách nào để triển khai một Power App?",
            "answer": "Sau khi hoàn thành thiết kế, bạn có thể xuất bản app để chia sẻ với người dùng khác hoặc triển khai trên các thiết bị di động và web."
        },
        {
            "question": "Những best practices cho việc phát triển Power Apps là gì?",
            "answer": "Giữ cho app đơn giản, tập trung vào trải nghiệm người dùng, sử dụng các mẫu và thành phần có sẵn, và kiểm tra kỹ trước khi triển khai."
        },
        {
            "question": "Làm cách nào để thêm logic vào một canvas app?",
            "answer": "Sử dụng Power Fx – một ngôn ngữ lập trình giống Excel – để thêm logic cho các control và hành động trong app."
        },
        {
            "question": "Làm cách nào để bảo mật một Power App?",
            "answer": "Sử dụng các quy tắc bảo mật của Power Apps như phân quyền người dùng và tích hợp với Azure AD để xác thực truy cập."
        },
        {
            "question": "Làm cách nào để kết nối canvas app với Dynamics 365?",
            "answer": "Sử dụng connector Dynamics 365 trong Power Apps Studio để kết nối và truy cập dữ liệu từ Dynamics 365."
        },
        {
            "question": "Làm cách nào để tạo một form tùy chỉnh trong model-driven app?",
            "answer": "Sử dụng App Designer để thêm hoặc chỉnh sửa form, thêm các field, section và business rules theo yêu cầu."
        },
        {
            "question": "Làm cách nào để test một Power App trước khi triển khai?",
            "answer": "Sử dụng chế độ preview trong Power Apps Studio hoặc tạo environment test để kiểm tra toàn bộ chức năng của app."
        },
        {
            "question": "Làm cách nào để tích hợp Power App với Power Automate?",
            "answer": "Sử dụng các trigger và action có sẵn trong Power Automate để tự động hóa quy trình từ Power App."
        },
        {
            "question": "Làm cách nào để tùy chỉnh dashboard trong model-driven app?",
            "answer": "Sử dụng Dashboard Designer để thêm các chart, grid và các thành phần hiển thị dữ liệu, sau đó lưu và áp dụng cho app."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu ngoại tuyến trong canvas app?",
            "answer": "Sử dụng tính năng offline của Power Apps để lưu trữ dữ liệu cục bộ và đồng bộ hóa lại khi có kết nối."
        },
        {
            "question": "Làm cách nào để chia sẻ một Power App với người dùng khác?",
            "answer": "Xuất bản app và chia sẻ qua Power Apps portal hoặc gán quyền truy cập cho người dùng thông qua Azure AD."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của một Power App?",
            "answer": "Giảm số lượng control, tối ưu hóa truy vấn dữ liệu, sử dụng caching cho dữ liệu tĩnh và kiểm tra performance thường xuyên."
        },
        {
            "question": "Làm cách nào để tạo custom component trong Power Apps?",
            "answer": "Sử dụng Power Apps Component Framework (PCF) để phát triển và triển khai các thành phần tùy chỉnh có thể tái sử dụng."
        },
        {
            "question": "Các kỹ thuật debug nào hỗ trợ trong Power Apps?",
            "answer": "Sử dụng tính năng Monitor trong Power Apps Studio, theo dõi error messages và sử dụng Power Fx formula checker để phát hiện lỗi."
        },
        {
            "question": "Làm cách nào để triển khai version control cho Power Apps?",
            "answer": "Xuất file app ra dưới dạng package, sử dụng Git hoặc các công cụ quản lý source code để theo dõi phiên bản và cập nhật thay đổi."
        },
        {
            "question": "Những lợi ích của việc sử dụng Common Data Service (Dataverse) trong Power Apps là gì?",
            "answer": "Dataverse cung cấp một nền tảng dữ liệu tập trung, giúp dễ dàng chia sẻ, quản lý và bảo mật dữ liệu giữa các ứng dụng Power Platform."
        },
        {
            "question": "Làm cách nào để tạo mối liên hệ giữa các entity trong model-driven app?",
            "answer": "Sử dụng tính năng relationship trong Dataverse để định nghĩa các mối liên hệ 1-1, 1-n hoặc n-n giữa các entity."
        },
        {
            "question": "Làm thế nào để thêm business rules trong model-driven app?",
            "answer": "Sử dụng Business Rules Designer trong Power Apps để tạo các quy tắc tự động điều chỉnh dữ liệu và hiển thị form."
        },
        {
            "question": "Làm cách nào để sử dụng Power Fx cho các tính năng nâng cao trong canvas app?",
            "answer": "Viết công thức Power Fx để xử lý logic, tính toán, xử lý lỗi và điều khiển giao diện người dùng động trong canvas app."
        },
        {
            "question": "Làm thế nào để tích hợp AI Builder vào Power Apps?",
            "answer": "Sử dụng AI Builder để tạo các model dự đoán, nhận dạng hình ảnh hoặc phân tích văn bản và tích hợp trực tiếp vào Power Apps qua connector."
        },
        {
            "question": "Các bước để tạo một app responsive trên Power Apps là gì?",
            "answer": "Sử dụng các thuộc tính Responsive Layout, thiết kế giao diện dựa trên relative positioning và test trên nhiều kích thước màn hình khác nhau."
        },
        {
            "question": "Làm cách nào để thiết lập custom themes cho Power Apps?",
            "answer": "Sử dụng Power Apps Theme Designer hoặc chỉnh sửa file JSON để định nghĩa màu sắc, font chữ và style phù hợp với thương hiệu."
        },
        {
            "question": "Làm cách nào để quản lý permissions cho người dùng trong Power Apps?",
            "answer": "Thiết lập phân quyền trong Power Apps thông qua Azure AD, gán roles và sử dụng các security roles trong Dataverse."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với Microsoft Teams?",
            "answer": "Sử dụng connector Microsoft Teams để nhúng app vào Teams hoặc tạo tab trong Teams chứa Power App."
        },
        {
            "question": "Làm cách nào để tạo các báo cáo tùy chỉnh từ dữ liệu trong Power Apps?",
            "answer": "Kết nối Power Apps với Power BI, sau đó xây dựng báo cáo và dashboard dựa trên dữ liệu được thu thập từ app."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong Power Fx?",
            "answer": "Sử dụng hàm IfError, Try hoặc kiểm tra điều kiện trước khi thực thi công thức để xử lý lỗi trong Power Fx."
        },
        {
            "question": "Làm thế nào để tạo các screens và navigation logic trong canvas app?",
            "answer": "Sử dụng hàm Navigate trong Power Fx để chuyển đổi giữa các màn hình, thiết lập biến context để lưu trạng thái chuyển trang."
        },
        {
            "question": "Làm cách nào để triển khai các custom connector trong Power Apps?",
            "answer": "Đăng ký custom connector qua Power Apps portal, cấu hình endpoint và xác thực, sau đó sử dụng connector đó trong app."
        },
        {
            "question": "Làm cách nào để tích hợp dữ liệu từ Excel vào canvas app?",
            "answer": "Sử dụng connector Excel, upload file Excel lên OneDrive hoặc SharePoint và kết nối để lấy dữ liệu cho canvas app."
        },
        {
            "question": "Làm cách nào để cấu hình tính năng auto-save trong Power Apps?",
            "answer": "Sử dụng Power Fx để thiết lập timer tự động lưu dữ liệu vào nguồn dữ liệu sau mỗi khoảng thời gian nhất định."
        },
        {
            "question": "Làm cách nào để tạo các biểu mẫu (forms) động trong canvas app?",
            "answer": "Sử dụng các control như Edit Form và Display Form, kết hợp với Power Fx để hiển thị hoặc ẩn các trường dựa trên điều kiện."
        },
        {
            "question": "Làm cách nào để tạo các custom validation cho dữ liệu nhập trong Power Apps?",
            "answer": "Sử dụng Power Fx để kiểm tra điều kiện dữ liệu nhập, hiển thị thông báo lỗi nếu không thỏa mãn và ngăn lưu dữ liệu không hợp lệ."
        },
        {
            "question": "Làm cách nào để sử dụng các mẫu (templates) có sẵn trong Power Apps?",
            "answer": "Chọn mẫu có sẵn từ Power Apps Studio, sau đó chỉnh sửa giao diện và logic để phù hợp với yêu cầu của doanh nghiệp."
        },
        {
            "question": "Làm thế nào để tích hợp Power Apps với các dịch vụ đám mây khác của Microsoft?",
            "answer": "Sử dụng các connector có sẵn để tích hợp với SharePoint, OneDrive, Outlook và các dịch vụ khác, đảm bảo đồng bộ hóa dữ liệu giữa các nền tảng."
        },
        {
            "question": "Làm cách nào để triển khai Power Apps trên thiết bị di động?",
            "answer": "Sau khi xuất bản, người dùng có thể tải ứng dụng Power Apps từ cửa hàng ứng dụng (App Store/Google Play) và đăng nhập bằng tài khoản của mình để sử dụng."
        },
        {
            "question": "Làm cách nào để quản lý môi trường (environment) trong Power Apps?",
            "answer": "Sử dụng Power Platform Admin Center để tạo, xóa, chuyển đổi và cấu hình các environment (production, sandbox, trial) theo nhu cầu."
        },
        {
            "question": "Làm cách nào để triển khai quy trình làm việc (workflow) trong Power Apps?",
            "answer": "Sử dụng Power Automate kết hợp với Power Apps để tạo các workflow tự động dựa trên các trigger từ app."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với Dynamics 365 Customer Engagement?",
            "answer": "Sử dụng connector Dynamics 365 để kết nối và truy xuất dữ liệu từ Customer Engagement, tích hợp trực tiếp vào app."
        },
        {
            "question": "Làm cách nào để thiết lập các tùy chỉnh giao diện cho canvas app theo thiết bị sử dụng?",
            "answer": "Sử dụng các công cụ responsive layout và Power Fx để điều chỉnh kích thước, vị trí control dựa trên kích thước màn hình của thiết bị."
        },
        {
            "question": "Làm cách nào để lưu trữ và quản lý các file media trong Power Apps?",
            "answer": "Kết nối với SharePoint hoặc OneDrive để lưu trữ file media và sử dụng connector tương ứng để truy xuất và hiển thị trong app."
        },
        {
            "question": "Làm cách nào để tạo các alert hoặc thông báo trong Power Apps?",
            "answer": "Sử dụng control Notification hoặc hàm Notify trong Power Fx để hiển thị thông báo cho người dùng khi có sự kiện xảy ra."
        },
        {
            "question": "Làm cách nào để quản lý các phiên bản của app khi có cập nhật?",
            "answer": "Xuất bản các phiên bản mới và sử dụng Power Platform Admin Center để theo dõi lịch sử thay đổi, cũng như khôi phục phiên bản cũ nếu cần."
        },
        {
            "question": "Làm cách nào để sử dụng Power Apps để tạo các ứng dụng theo quy trình nghiệp vụ phức tạp?",
            "answer": "Kết hợp các tính năng của model-driven app và canvas app, sử dụng Power Automate, AI Builder và Dataverse để xây dựng quy trình nghiệp vụ tự động và linh hoạt."
        },
        {
            "question": "Làm cách nào để triển khai các giải pháp tùy chỉnh mà không làm gián đoạn hoạt động của hệ thống?",
            "answer": "Phát triển và test trên sandbox, sau đó sử dụng solution packaging để triển khai dần trên môi trường production có kế hoạch backup và rollback."
        },
        {
            "question": "Làm cách nào để giám sát hiệu suất của Power Apps sau khi triển khai?",
            "answer": "Sử dụng Monitor, Application Insights và Power Platform Admin Center để theo dõi các chỉ số hiệu suất và log lỗi trong quá trình hoạt động."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với dữ liệu thời gian thực?",
            "answer": "Kết nối với các dịch vụ dữ liệu thời gian thực thông qua API, sử dụng connector phù hợp và thiết lập các luồng làm mới dữ liệu tự động."
        },
        {
            "question": "Làm cách nào để xử lý các tình huống mất kết nối Internet trong canvas app?",
            "answer": "Khai báo các trạng thái offline, lưu dữ liệu tạm thời cục bộ và đồng bộ lại khi có kết nối bằng cách sử dụng hàm SaveData và LoadData."
        },
        {
            "question": "Làm cách nào để tạo giao diện người dùng thân thiện và trực quan trong Power Apps?",
            "answer": "Sử dụng thiết kế hiện đại, bố cục rõ ràng, các control nhất quán và tuân theo các guideline về UX của Microsoft."
        },
        {
            "question": "Làm cách nào để tích hợp chức năng tìm kiếm nâng cao trong Power Apps?",
            "answer": "Sử dụng các hàm tìm kiếm của Power Fx, kết hợp với bộ lọc dữ liệu trong Dataverse để xây dựng chức năng tìm kiếm mạnh mẽ."
        },
        {
            "question": "Làm cách nào để cấu hình các quyền truy cập dựa trên vai trò trong Power Apps?",
            "answer": "Sử dụng quản lý người dùng qua Azure AD và thiết lập các security role trong Dataverse để phân quyền truy cập dữ liệu cho từng người dùng."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với các hệ thống bên ngoài thông qua API REST?",
            "answer": "Tạo custom connector để kết nối với API REST của hệ thống bên ngoài, sau đó sử dụng connector này trong app để gọi dữ liệu."
        },
        {
            "question": "Làm cách nào để xây dựng các ứng dụng Power Apps có khả năng mở rộng cao?",
            "answer": "Thiết kế app theo kiến trúc modular, sử dụng Dataverse làm nền tảng dữ liệu và tối ưu hóa logic với Power Fx để hỗ trợ lượng người dùng lớn."
        },
        {
            "question": "Làm cách nào để xử lý các tác vụ tính toán phức tạp trong Power Apps?",
            "answer": "Sử dụng Power Fx để thực hiện các tính toán, kết hợp với việc lưu trữ tạm thời dữ liệu trong các biến và collection để tối ưu hiệu suất."
        },
        {
            "question": "Làm cách nào để tạo các biểu đồ và đồ thị trong Power Apps?",
            "answer": "Sử dụng các control chart có sẵn hoặc tích hợp Power BI để hiển thị dữ liệu dưới dạng biểu đồ, đồ thị trực quan trong app."
        },
        {
            "question": "Làm cách nào để quản lý dữ liệu nhập từ người dùng một cách an toàn trong Power Apps?",
            "answer": "Thiết lập validation rules, sử dụng các hàm kiểm tra trong Power Fx và mã hóa dữ liệu nhạy cảm khi lưu trữ."
        },
        {
            "question": "Làm cách nào để tích hợp chức năng định vị (geolocation) vào canvas app?",
            "answer": "Sử dụng control Location và các hàm Power Fx để truy xuất vị trí của thiết bị, sau đó hiển thị trên bản đồ hoặc xử lý dữ liệu theo vị trí."
        },
        {
            "question": "Làm cách nào để triển khai ứng dụng Power Apps qua các môi trường (Dev, Test, Production)?",
            "answer": "Sử dụng Power Platform Admin Center để tạo nhiều environment, xuất bản solution từ môi trường Dev lên Test và cuối cùng triển khai trên Production."
        },
        {
            "question": "Làm cách nào để cấu hình tích hợp Power Apps với Dynamics 365 Marketing?",
            "answer": "Sử dụng connector Dynamics 365 Marketing và tích hợp dữ liệu từ Marketing vào app để theo dõi chiến dịch và tương tác khách hàng."
        },
        {
            "question": "Làm cách nào để tối ưu hóa thời gian load của Power Apps?",
            "answer": "Giảm số lượng control, tối ưu hóa các truy vấn dữ liệu, sử dụng các collection để lưu trữ tạm thời và kiểm tra performance thường xuyên."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu phức tạp từ nhiều nguồn trong một Power App?",
            "answer": "Sử dụng các hàm Power Fx để hợp nhất dữ liệu từ nhiều nguồn, kết hợp với Dataverse để lưu trữ và xử lý tập trung."
        },
        {
            "question": "Làm cách nào để tạo và sử dụng reusable components trong Power Apps?",
            "answer": "Phát triển các component tùy chỉnh bằng Power Apps Component Framework (PCF) và lưu trữ chúng để sử dụng lại trong nhiều app khác nhau."
        },
        {
            "question": "Làm cách nào để tích hợp chức năng chat hoặc hỗ trợ trực tuyến trong Power Apps?",
            "answer": "Sử dụng các connector của dịch vụ chat như Microsoft Bot Framework hoặc tích hợp qua Web API để cung cấp tính năng chat trong app."
        },
        {
            "question": "Làm cách nào để theo dõi và báo cáo các hoạt động của người dùng trong Power Apps?",
            "answer": "Sử dụng tính năng logging tích hợp và kết nối với Power BI để thu thập dữ liệu hoạt động của người dùng và tạo báo cáo phân tích."
        },
        {
            "question": "Làm cách nào để cấu hình chuyển hướng (redirect) trong Power Apps sau khi thực hiện một hành động?",
            "answer": "Sử dụng hàm Navigate trong Power Fx để chuyển hướng người dùng sang màn hình khác sau khi hoàn thành tác vụ."
        },
        {
            "question": "Làm cách nào để tích hợp chức năng quét mã vạch (barcode) vào canvas app?",
            "answer": "Sử dụng camera control và tích hợp API quét mã vạch để đọc dữ liệu từ mã QR hoặc mã vạch trong app."
        },
        {
            "question": "Làm cách nào để tạo một ứng dụng Power Apps cho quản lý dự án?",
            "answer": "Kết hợp các control danh sách, form và dashboard để theo dõi tiến độ dự án, phân công công việc và báo cáo tình hình dự án."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với hệ thống ERP hiện có?",
            "answer": "Sử dụng custom connector hoặc các connector có sẵn để kết nối Power Apps với hệ thống ERP, đảm bảo chuyển đổi dữ liệu hợp lý."
        },
        {
            "question": "Làm cách nào để xử lý các tình huống xung đột dữ liệu trong Power Apps?",
            "answer": "Sử dụng cơ chế lock hoặc kiểm tra dữ liệu trước khi ghi, đồng thời áp dụng quy trình xử lý lỗi để đảm bảo tính nhất quán của dữ liệu."
        },
        {
            "question": "Làm cách nào để triển khai các cập nhật thường xuyên cho Power Apps mà không ảnh hưởng đến người dùng?",
            "answer": "Triển khai trên môi trường sandbox trước, sau đó lên lịch cập nhật trên production vào thời điểm ít người dùng truy cập và thông báo trước."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với Microsoft Dataverse?",
            "answer": "Sử dụng connector Dataverse để quản lý, đồng bộ và truy xuất dữ liệu tập trung giữa các ứng dụng Power Platform."
        },
        {
            "question": "Làm cách nào để bảo mật dữ liệu trong Power Apps khi truy cập từ thiết bị di động?",
            "answer": "Sử dụng Azure AD, Multi-Factor Authentication và cấu hình chính sách bảo mật cho ứng dụng mobile để bảo vệ dữ liệu."
        },
        {
            "question": "Làm cách nào để tạo ứng dụng Power Apps có khả năng mở rộng toàn cầu?",
            "answer": "Thiết kế ứng dụng với localization, responsive design và tối ưu hiệu suất để phục vụ người dùng trên toàn thế giới."
        },
        {
            "question": "Làm cách nào để tích hợp các báo cáo từ Power BI vào Power Apps?",
            "answer": "Sử dụng control Power BI tile để nhúng báo cáo trực tiếp vào ứng dụng Power Apps, cung cấp dữ liệu tương tác cho người dùng."
        },
        {
            "question": "Làm cách nào để xử lý sự khác biệt về múi giờ trong Power Apps?",
            "answer": "Sử dụng hàm DateTimeValue và TimeZoneOffset trong Power Fx để chuyển đổi và định dạng thời gian theo múi giờ của người dùng."
        },
        {
            "question": "Làm cách nào để đồng bộ dữ liệu giữa Power Apps và các hệ thống bên ngoài?",
            "answer": "Sử dụng Power Automate và custom connectors để tự động đồng bộ hóa dữ liệu giữa các hệ thống, đảm bảo tính nhất quán."
        },
        {
            "question": "Làm cách nào để tích hợp các biểu mẫu tùy chỉnh từ Power Apps vào Dynamics 365?",
            "answer": "Sử dụng model-driven app để nhúng các form tùy chỉnh được tạo từ Power Apps vào Dynamics 365, giúp tích hợp liền mạch giữa các hệ thống."
        },
        {
            "question": "Làm cách nào để tối ưu hóa tốc độ tải dữ liệu trong Power Apps?",
            "answer": "Tối ưu hóa truy vấn, sử dụng delegation và caching để giảm thiểu thời gian tải và xử lý dữ liệu."
        },
        {
            "question": "Làm cách nào để sử dụng Power Fx cho các phép tính toán phức tạp trong Power Apps?",
            "answer": "Sử dụng các hàm toán học và logic của Power Fx để thực hiện các phép tính phức tạp, kết hợp với biến và collection để lưu trữ kết quả tạm thời."
        },
        {
            "question": "Làm cách nào để kiểm soát quyền truy cập dữ liệu trong Power Apps?",
            "answer": "Sử dụng các security role trong Dataverse và thiết lập quyền truy cập qua Azure AD để đảm bảo chỉ người dùng được ủy quyền mới có thể truy cập dữ liệu."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với Dynamics 365 Finance?",
            "answer": "Sử dụng connector Dynamics 365 Finance để kết nối và truy xuất dữ liệu tài chính, giúp đồng bộ hóa thông tin giữa các hệ thống."
        },
        {
            "question": "Làm cách nào để tạo trải nghiệm người dùng cá nhân hóa trong Power Apps?",
            "answer": "Sử dụng context, user settings và custom themes để hiển thị giao diện tùy chỉnh phù hợp với từng người dùng."
        },
        {
            "question": "Làm cách nào để triển khai kiểm thử tự động cho Power Apps?",
            "answer": "Sử dụng Power Apps Test Studio và các công cụ kiểm thử tự động để tạo kịch bản test và đảm bảo tính ổn định của ứng dụng."
        },
        {
            "question": "Làm cách nào để xử lý lỗi và exception trong Power Apps?",
            "answer": "Sử dụng hàm IfError và kiểm tra điều kiện trong Power Fx để xử lý lỗi một cách mượt mà, hiển thị thông báo lỗi cho người dùng."
        },
        {
            "question": "Làm cách nào để sử dụng các biến toàn cục trong Power Apps?",
            "answer": "Sử dụng hàm Set để tạo biến toàn cục và UpdateContext cho biến cục bộ nhằm chia sẻ dữ liệu giữa các màn hình trong ứng dụng."
        },
        {
            "question": "Làm cách nào để tích hợp Power Apps với Microsoft Flow (Power Automate) để tự động hóa quy trình?",
            "answer": "Kết nối Power Apps với Power Automate qua các trigger và action, tự động hóa các tác vụ như gửi email, cập nhật dữ liệu và báo cáo."
        },
        {
            "question": "Làm cách nào để sử dụng custom connectors trong Power Apps?",
            "answer": "Tạo custom connector qua Power Platform Admin Center để kết nối với API bên ngoài, sau đó sử dụng nó trong ứng dụng của bạn."
        },
        {
            "question": "Làm cách nào để quản lý các phiên bản của app khi có thay đổi thường xuyên?",
            "answer": "Sử dụng hệ thống versioning của Power Platform để lưu lại các phiên bản khác nhau và triển khai cập nhật một cách có kiểm soát."
        },
        {
            "question": "Làm cách nào để sử dụng control Collection trong Power Apps?",
            "answer": "Sử dụng hàm Collect và ClearCollect để tạo và quản lý collection, lưu trữ tạm thời dữ liệu trong ứng dụng."
        },
        {
            "question": "Làm cách nào để tích hợp các dịch vụ AI Builder vào Power Apps?",
            "answer": "Sử dụng AI Builder để tạo các model dự đoán, nhận dạng hình ảnh hoặc xử lý ngôn ngữ, sau đó tích hợp qua connector vào Power Apps."
        },
        {
            "question": "Làm cách nào để tạo ứng dụng Power Apps với giao diện dark mode?",
            "answer": "Sử dụng custom themes và CSS để tạo giao diện dark mode, cho phép người dùng chuyển đổi giữa dark và light mode."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu liên quan đến ngày tháng trong Power Apps?",
            "answer": "Sử dụng các hàm DateValue, TimeValue và DateDiff trong Power Fx để xử lý và định dạng ngày tháng theo yêu cầu."
        },
        {
            "question": "Làm cách nào để tích hợp các thành phần tùy chỉnh từ PCF vào Power Apps?",
            "answer": "Sử dụng Power Apps Component Framework (PCF) để phát triển các control tùy chỉnh và tích hợp chúng vào ứng dụng model-driven hoặc canvas."
        }
    ],
    "Dynamics: Power Automate": [
        {
            "question": "Power Automate là gì?",
            "answer": "Power Automate là dịch vụ tự động hóa quy trình của Microsoft, trước đây gọi là Microsoft Flow."
        },
        {
            "question": "Power Automate tích hợp với Dynamics 365 như thế nào?",
            "answer": "Sử dụng connector Dynamics 365 để tạo flow tương tác với dữ liệu và quy trình trong Dynamics 365."
        },
        {
            "question": "Các loại flow trong Power Automate là gì?",
            "answer": "Power Automate hỗ trợ các loại flow như flow tự động, flow tức thì và flow theo lịch."
        },
        {
            "question": "Làm cách nào để tạo flow kích hoạt khi tạo bản ghi mới trong Dynamics 365?",
            "answer": "Dùng trigger 'When a record is created' từ connector Dynamics 365 để kích hoạt flow."
        },
        {
            "question": "Làm cách nào để xử lý xác thực cho Dynamics 365 trong Power Automate?",
            "answer": "Cung cấp thông tin đăng nhập Dynamics 365 khi thiết lập connector để xác thực kết nối."
        },
        {
            "question": "Sự khác biệt giữa flow và workflow cổ điển trong Dynamics 365 là gì?",
            "answer": "Flow có khả năng tích hợp nhiều hệ thống khác nhau trong khi workflow cổ điển chỉ hoạt động trong Dynamics 365."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu giữa các bước trong flow?",
            "answer": "Sử dụng biến (variables) để lưu trữ và truyền dữ liệu giữa các bước trong flow."
        },
        {
            "question": "Expressions trong Power Automate là gì và dùng như thế nào?",
            "answer": "Expressions là các công thức tính toán và xử lý dữ liệu dùng cú pháp đặc trưng (ví dụ: bắt đầu bằng @) để chuyển đổi hoặc định dạng dữ liệu."
        },
        {
            "question": "Làm cách nào để debug flow trong Power Automate?",
            "answer": "Sử dụng chế độ 'Test' để chạy thử và xem chi tiết 'Run history' nhằm xác định lỗi trong flow."
        },
        {
            "question": "Giới hạn governor trong Power Automate ảnh hưởng thiết kế flow như thế nào?",
            "answer": "Giới hạn governor quy định số lượng hành động, thời gian chạy và tài nguyên, do đó cần tối ưu flow tránh vượt quá giới hạn này."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong flow?",
            "answer": "Sử dụng các nhánh điều kiện (Condition), 'Configure run after' hoặc block Scope với hành động Catch để xử lý lỗi."
        },
        {
            "question": "Scope trong Power Automate là gì và khi nào dùng?",
            "answer": "Scope là nhóm hành động được gom lại nhằm tổ chức flow phức tạp hoặc để xử lý lỗi theo nhóm."
        },
        {
            "question": "Làm cách nào để kết nối với API bên ngoài trong Power Automate?",
            "answer": "Sử dụng connector 'HTTP' để gửi yêu cầu và nhận dữ liệu từ API bên ngoài."
        },
        {
            "question": "Vai trò của connectors trong Power Automate là gì?",
            "answer": "Connectors cho phép flow kết nối với các ứng dụng, dịch vụ và hệ thống khác nhau, cung cấp trigger và hành động tương ứng."
        },
        {
            "question": "Làm cách nào để tạo connector tùy chỉnh trong Power Automate?",
            "answer": "Sử dụng công cụ tạo custom connector trên Power Automate portal, định nghĩa endpoint, xác thực và các hành động API."
        },
        {
            "question": "Sự khác biệt giữa flow và Logic App trong Azure là gì?",
            "answer": "Flow là một phần của Power Platform hướng đến người dùng doanh nghiệp, trong khi Logic App của Azure có khả năng mở rộng và tích hợp sâu vào hạ tầng đám mây Azure."
        },
        {
            "question": "Làm cách nào để version control flow trong Power Automate?",
            "answer": "Bằng cách tạo phiên bản mới cho flow, lưu trữ và ghi chú các thay đổi để có thể quay lại phiên bản trước nếu cần."
        },
        {
            "question": "Best practices cho đặt tên trong Power Automate là gì?",
            "answer": "Sử dụng tên miêu tả, nhất quán cho flow, trigger, hành động và biến để dễ dàng quản lý và tìm kiếm."
        },
        {
            "question": "Làm cách nào để tối ưu hiệu suất flow?",
            "answer": "Giảm số lượng hành động không cần thiết, sử dụng các hành động dữ liệu hiệu quả và tối ưu hóa truy vấn để cải thiện tốc độ chạy."
        },
        {
            "question": "Những ứng dụng phổ biến của Power Automate trong Dynamics 365 là gì?",
            "answer": "Power Automate được sử dụng để tự động hóa quy trình như đánh giá lead, cập nhật khách hàng, gửi thông báo và tích hợp email."
        },
        {
            "question": "Làm cách nào để thêm trigger theo lịch (recurrence) trong flow?",
            "answer": "Chọn trigger 'Recurrence' và thiết lập tần suất chạy theo giờ, ngày hoặc tuần."
        },
        {
            "question": "Làm cách nào để tạo flow yêu cầu phê duyệt (approval) trong Power Automate?",
            "answer": "Sử dụng action 'Start and wait for an approval' để gửi yêu cầu phê duyệt và xử lý phản hồi của người dùng."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với Office 365 Outlook?",
            "answer": "Sử dụng connector Office 365 Outlook để gửi email, đọc thư hoặc quản lý lịch từ bên trong flow."
        },
        {
            "question": "Làm cách nào để sử dụng điều kiện (condition) trong flow?",
            "answer": "Thêm hành động Condition để so sánh giá trị và xác định nhánh xử lý tiếp theo dựa trên kết quả so sánh."
        },
        {
            "question": "Làm cách nào để tạo vòng lặp (loop) trong Power Automate?",
            "answer": "Sử dụng hành động 'Apply to each' để lặp qua các phần tử trong một mảng hoặc danh sách dữ liệu."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu theo nhóm trong flow?",
            "answer": "Sử dụng hành động 'Group by' hoặc kết hợp các bước xử lý trong 'Apply to each' để nhóm và tổng hợp dữ liệu."
        },
        {
            "question": "Làm cách nào để lưu trữ tạm thời dữ liệu trong flow?",
            "answer": "Sử dụng các biến (variables) như 'Initialize variable' và 'Set variable' để lưu trữ tạm dữ liệu trong quá trình chạy."
        },
        {
            "question": "Làm cách nào để gọi một flow khác từ trong flow hiện tại?",
            "answer": "Sử dụng hành động 'Run a Child Flow' để gọi và chạy một flow khác, giúp tái sử dụng quy trình đã xây dựng."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu JSON trong Power Automate?",
            "answer": "Sử dụng hành động 'Parse JSON' để chuyển đổi dữ liệu JSON thành định dạng có thể xử lý trong flow."
        },
        {
            "question": "Làm cách nào để chuyển đổi dữ liệu với hành động Compose?",
            "answer": "Sử dụng action Compose để định dạng lại hoặc tính toán giá trị dựa trên các expressions và dữ liệu đầu vào."
        },
        {
            "question": "Làm cách nào để lọc mảng dữ liệu trong flow?",
            "answer": "Sử dụng hành động 'Filter array' để lọc các phần tử dựa trên điều kiện xác định."
        },
        {
            "question": "Làm cách nào để xử lý phân trang (pagination) trong các connector?",
            "answer": "Cấu hình các thông số phân trang trong connector hoặc sử dụng các tham số như 'skip' và 'top' trong expressions để xử lý dữ liệu phân trang."
        },
        {
            "question": "Làm cách nào để thiết lập kiểm soát song song (concurrency control) trong vòng lặp?",
            "answer": "Cấu hình tùy chọn Concurrency Control trong hành động 'Apply to each' để giới hạn số lượng phiên bản chạy đồng thời."
        },
        {
            "question": "Làm cách nào để sử dụng action 'Delay' trong flow?",
            "answer": "Thêm hành động Delay và cấu hình thời gian chờ trước khi chuyển sang bước tiếp theo trong flow."
        },
        {
            "question": "Làm cách nào để thiết lập thông báo khi flow hoàn thành hoặc gặp lỗi?",
            "answer": "Sử dụng hành động gửi email, thông báo trên Teams hoặc các hệ thống cảnh báo khác dựa trên kết quả chạy của flow."
        },
        {
            "question": "Làm cách nào để chia sẻ flow với các thành viên trong tổ chức?",
            "answer": "Sử dụng tính năng chia sẻ trên Power Automate để cấp quyền truy cập và chỉnh sửa flow cho các thành viên hoặc nhóm cụ thể."
        },
        {
            "question": "Làm cách nào để xuất và nhập (export/import) flow?",
            "answer": "Sử dụng tính năng export dưới dạng package trên Power Automate và sau đó import vào environment khác để triển khai flow."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với SharePoint?",
            "answer": "Sử dụng connector SharePoint để tạo, cập nhật hoặc lấy dữ liệu từ các danh sách và thư mục SharePoint trong flow."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với Microsoft Teams?",
            "answer": "Sử dụng connector Microsoft Teams để gửi tin nhắn, tạo cuộc họp hoặc cập nhật thông báo trong Teams từ flow."
        },
        {
            "question": "Làm cách nào để sử dụng các template có sẵn trong Power Automate?",
            "answer": "Chọn từ thư viện mẫu của Power Automate, sau đó tùy chỉnh flow theo yêu cầu cụ thể của doanh nghiệp."
        },
        {
            "question": "Làm cách nào để tạo flow tự động theo lịch (Scheduled Flow)?",
            "answer": "Chọn trigger 'Recurrence' và cấu hình thời gian chạy định kỳ cho flow, ví dụ như hàng ngày hoặc hàng tuần."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với OneDrive?",
            "answer": "Sử dụng connector OneDrive để tải lên, tải xuống hoặc quản lý tệp tin trong OneDrive qua flow."
        },
        {
            "question": "Làm cách nào để gọi API REST từ Power Automate?",
            "answer": "Sử dụng hành động HTTP để gửi yêu cầu GET, POST, PUT hoặc DELETE đến API REST và xử lý kết quả trả về."
        },
        {
            "question": "Làm cách nào để chạy flow theo yêu cầu (on-demand)?",
            "answer": "Sử dụng trigger 'Manually trigger a flow' cho phép người dùng khởi chạy flow theo yêu cầu từ giao diện Power Automate hoặc ứng dụng di động."
        },
        {
            "question": "Làm cách nào để tạo flow tự động khi có email mới?",
            "answer": "Sử dụng trigger của connector Outlook như 'When a new email arrives' để khởi chạy flow xử lý email."
        },
        {
            "question": "Làm cách nào để sử dụng điều kiện switch-case trong flow?",
            "answer": "Thêm hành động Switch để kiểm tra giá trị của biến và xác định nhánh xử lý phù hợp dựa trên từng trường hợp."
        },
        {
            "question": "Làm cách nào để lưu trữ log của flow trong Power Automate?",
            "answer": "Sử dụng hành động ghi log (ví dụ: ghi vào SharePoint, Excel hoặc một hệ thống logging bên ngoài) để lưu lại thông tin chạy của flow."
        },
        {
            "question": "Làm cách nào để xử lý các trường hợp bất thường (exception) trong flow?",
            "answer": "Sử dụng cấu hình 'Configure run after' để chỉ định nhánh xử lý khi một hành động thất bại hoặc bị bỏ qua."
        },
        {
            "question": "Làm cách nào để gọi một flow con (child flow) từ flow chính?",
            "answer": "Sử dụng hành động 'Run a Child Flow' để gọi và chạy một flow đã được đóng gói sẵn từ flow chính."
        },
        {
            "question": "Làm cách nào để chuyển đổi dữ liệu giữa các định dạng trong flow?",
            "answer": "Sử dụng các action như Compose, Parse JSON hoặc Data Operations để chuyển đổi và định dạng lại dữ liệu theo yêu cầu."
        },
        {
            "question": "Làm cách nào để sử dụng action 'Apply to each' một cách hiệu quả?",
            "answer": "Tối ưu hóa mảng dữ liệu đầu vào và cấu hình Concurrency Control nếu cần để giảm thời gian xử lý trong vòng lặp."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu dạng mảng và đối tượng trong Power Automate?",
            "answer": "Sử dụng các hành động như Select, Filter array và Join để chuyển đổi, lọc và hợp nhất dữ liệu từ mảng hoặc đối tượng."
        },
        {
            "question": "Làm cách nào để tích hợp AI Builder vào flow?",
            "answer": "Sử dụng các action của AI Builder để thực hiện nhận dạng hình ảnh, phân tích văn bản hoặc dự đoán xu hướng dựa trên dữ liệu đầu vào."
        },
        {
            "question": "Làm cách nào để quản lý biến môi trường (environment variables) trong flow?",
            "answer": "Sử dụng các tham số và biến môi trường được cấu hình trong Power Platform Admin Center để tái sử dụng cấu hình trên nhiều flow."
        },
        {
            "question": "Làm cách nào để thiết lập thông số timeout cho các hành động trong flow?",
            "answer": "Cấu hình tùy chọn timeout trong các hành động HTTP hoặc các connector hỗ trợ để đảm bảo flow không treo khi chờ đợi phản hồi lâu."
        },
        {
            "question": "Làm cách nào để xử lý các tác vụ tính toán phức tạp trong flow?",
            "answer": "Sử dụng Expressions và hành động Compose để thực hiện các phép tính toán phức tạp dựa trên dữ liệu đầu vào."
        },
        {
            "question": "Làm cách nào để tạo các nhánh xử lý song song (parallel branches) trong flow?",
            "answer": "Sử dụng tính năng Parallel Branches để thực hiện các hành động độc lập cùng lúc, giảm thời gian chạy tổng thể của flow."
        },
        {
            "question": "Làm cách nào để chuyển đổi flow sang giải pháp (solution) trong Power Platform?",
            "answer": "Xuất flow dưới dạng solution package để dễ dàng quản lý, triển khai và chuyển giao giữa các environment khác nhau."
        },
        {
            "question": "Làm cách nào để theo dõi và phân tích lịch sử chạy của flow?",
            "answer": "Sử dụng phần 'Run history' trên Power Automate để xem chi tiết các lần chạy, thời gian chạy và lỗi (nếu có) của flow."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với Dynamics 365 Customer Engagement?",
            "answer": "Sử dụng connector Dynamics 365 để kích hoạt flow dựa trên các sự kiện hoặc thay đổi trong Customer Engagement."
        },
        {
            "question": "Làm cách nào để tạo flow xử lý dữ liệu từ các nguồn khác nhau cùng lúc?",
            "answer": "Kết hợp nhiều trigger hoặc sử dụng các action Data Operations để hợp nhất dữ liệu từ các nguồn khác nhau vào một flow."
        },
        {
            "question": "Làm cách nào để thiết lập cảnh báo tự động khi flow gặp lỗi?",
            "answer": "Cấu hình thông báo qua email, Microsoft Teams hoặc các hệ thống cảnh báo khác dựa trên kết quả của 'Run history' khi flow bị lỗi."
        },
        {
            "question": "Làm cách nào để sử dụng action 'Terminate' trong flow?",
            "answer": "Sử dụng action Terminate để dừng flow ngay lập tức, có thể cấu hình trạng thái (Succeeded, Failed, Cancelled) khi dừng."
        },
        {
            "question": "Làm cách nào để tối ưu hóa tốc độ xử lý của flow với dữ liệu lớn?",
            "answer": "Chia nhỏ dữ liệu, sử dụng vòng lặp 'Apply to each' với Concurrency Control và giới hạn số lượng hành động trong mỗi bước để giảm tải."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với các hệ thống ERP khác?",
            "answer": "Sử dụng custom connector hoặc các connector có sẵn để kết nối Power Automate với hệ thống ERP như SAP, Oracle thông qua API."
        },
        {
            "question": "Làm cách nào để xây dựng quy trình tự động kiểm tra dữ liệu sau khi di chuyển?",
            "answer": "Tạo flow so sánh dữ liệu giữa nguồn cũ và mới, sử dụng điều kiện và hành động kiểm tra tính toàn vẹn của dữ liệu."
        },
        {
            "question": "Làm cách nào để triển khai quy trình phê duyệt tài liệu qua Power Automate?",
            "answer": "Sử dụng action 'Start and wait for an approval' kết hợp với các trigger từ SharePoint hoặc OneDrive để tự động hóa quy trình phê duyệt tài liệu."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu đầu ra từ flow để báo cáo?",
            "answer": "Kết nối Power Automate với Power BI hoặc lưu dữ liệu vào Excel/SharePoint để sử dụng cho mục đích báo cáo sau này."
        },
        {
            "question": "Làm cách nào để tạo báo cáo tự động về hiệu suất flow?",
            "answer": "Sử dụng API Power Automate để trích xuất dữ liệu run history và kết nối với Power BI để tạo báo cáo trực quan về hiệu suất."
        },
        {
            "question": "Làm cách nào để áp dụng chính sách quản trị (governance) cho các flow trong tổ chức?",
            "answer": "Sử dụng Power Platform Admin Center để quản lý, giám sát và áp dụng các chính sách về bảo mật, quyền truy cập cũng như giới hạn tài nguyên cho flow."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với các ứng dụng CRM ngoài Dynamics 365?",
            "answer": "Sử dụng các connector hoặc custom connector để kết nối Power Automate với các ứng dụng CRM khác như Salesforce hoặc Zoho CRM."
        },
        {
            "question": "Làm cách nào để tạo flow giám sát hộp thư đến trong Office 365?",
            "answer": "Sử dụng trigger 'When a new email arrives' của connector Office 365 Outlook để khởi chạy flow xử lý email mới."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với hệ thống lưu trữ đám mây khác như Google Drive?",
            "answer": "Sử dụng connector Google Drive để tạo, cập nhật và quản lý tệp tin qua flow tương tự như với OneDrive."
        },
        {
            "question": "Làm cách nào để xử lý các tình huống mất kết nối khi chạy flow?",
            "answer": "Sử dụng cấu hình 'Configure run after' để thiết lập hành động xử lý khi một bước thất bại do mất kết nối hoặc lỗi tạm thời."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với hệ thống chatbot?",
            "answer": "Sử dụng connector Microsoft Bot Framework hoặc custom connector để gửi và nhận dữ liệu từ hệ thống chatbot trong flow."
        },
        {
            "question": "Làm cách nào để tạo các nhánh điều kiện phức tạp với nhiều cấp độ trong flow?",
            "answer": "Kết hợp nhiều hành động Condition hoặc Switch để xây dựng các nhánh xử lý đa cấp dựa trên các điều kiện khác nhau."
        },
        {
            "question": "Làm cách nào để xử lý các trường hợp xung đột dữ liệu khi nhiều flow cùng thao tác trên cùng một dữ liệu?",
            "answer": "Sử dụng cơ chế khóa (locking) hoặc kiểm tra dữ liệu trước khi ghi, kết hợp với việc cấu hình thời gian chờ để tránh xung đột."
        },
        {
            "question": "Làm cách nào để kiểm tra và đảm bảo tính nhất quán của dữ liệu sau khi flow chạy?",
            "answer": "Sử dụng các bước kiểm tra dữ liệu (validation) trong flow và so sánh kết quả với dữ liệu gốc để đảm bảo tính nhất quán."
        },
        {
            "question": "Làm cách nào để thiết lập flow chạy vào giờ thấp điểm nhằm tối ưu tài nguyên?",
            "answer": "Sử dụng trigger Recurrence và cấu hình thời gian chạy vào ban đêm hoặc giờ thấp điểm để giảm tải cho hệ thống."
        },
        {
            "question": "Làm cách nào để tích hợp các hành động điều khiển phiên (session management) trong flow?",
            "answer": "Sử dụng các biến lưu trữ thông tin phiên và gọi các flow con để quản lý trạng thái phiên khi xử lý dữ liệu liên tục."
        },
        {
            "question": "Làm cách nào để sử dụng các hàm xử lý chuỗi (string functions) trong flow?",
            "answer": "Sử dụng Expressions như concat, substring, replace để xử lý và định dạng chuỗi trong các hành động Compose hoặc điều kiện."
        },
        {
            "question": "Làm cách nào để tích hợp adaptive cards vào flow gửi thông báo trên Teams?",
            "answer": "Sử dụng connector Microsoft Teams để gửi adaptive card, cấu hình nội dung thông báo dựa trên định dạng JSON của adaptive card."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với các hệ thống báo cáo nội bộ?",
            "answer": "Kết nối Power Automate với cơ sở dữ liệu hoặc hệ thống lưu trữ báo cáo (ví dụ: SQL Server, SharePoint) để truyền dữ liệu cho báo cáo tự động."
        },
        {
            "question": "Làm cách nào để áp dụng các kỹ thuật caching trong flow nhằm tăng tốc độ xử lý?",
            "answer": "Lưu trữ tạm thời dữ liệu không thay đổi bằng biến hoặc lưu vào hệ thống bên ngoài để giảm số lần truy xuất dữ liệu từ nguồn gốc."
        },
        {
            "question": "Làm cách nào để tạo các flow có thể tái sử dụng (reusable flows)?",
            "answer": "Thiết kế flow dưới dạng Child Flow và sử dụng hành động 'Run a Child Flow' để gọi lại, giúp tái sử dụng logic ở nhiều nơi."
        },
        {
            "question": "Làm cách nào để thiết lập thông báo qua SMS trong Power Automate?",
            "answer": "Sử dụng connector của dịch vụ SMS (ví dụ: Twilio) để gửi thông báo qua tin nhắn khi flow hoàn thành hoặc gặp lỗi."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với các hệ thống IoT?",
            "answer": "Sử dụng connector Azure IoT Hub hoặc custom connector để nhận và xử lý dữ liệu từ các thiết bị IoT qua flow."
        },
        {
            "question": "Làm cách nào để tự động hóa quy trình xử lý hợp đồng trong Dynamics 365 qua Power Automate?",
            "answer": "Tạo flow với trigger từ Dynamics 365 khi hợp đồng mới được tạo, sau đó gửi thông báo phê duyệt và cập nhật trạng thái hợp đồng."
        },
        {
            "question": "Làm cách nào để tối ưu hóa chi phí khi sử dụng Power Automate trong tổ chức?",
            "answer": "Theo dõi số lần chạy flow, sử dụng flow có khả năng chia sẻ và lựa chọn loại flow phù hợp với nhu cầu nghiệp vụ để tối ưu hóa chi phí."
        },
        {
            "question": "Làm cách nào để kiểm soát truy cập và bảo mật cho các flow trong Power Automate?",
            "answer": "Sử dụng các chính sách bảo mật và quản lý quyền truy cập qua Power Platform Admin Center, kết hợp với Azure AD để kiểm soát ai có thể xem và chỉnh sửa flow."
        },
        {
            "question": "Làm cách nào để theo dõi hiệu suất và thời gian chạy của flow qua API?",
            "answer": "Sử dụng API của Power Automate để truy xuất thông tin run history và kết nối với Power BI hoặc Azure Monitor để phân tích hiệu suất của flow."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với hệ thống ERP khác ngoài Dynamics 365?",
            "answer": "Tạo custom connector hoặc sử dụng các connector sẵn có để kết nối Power Automate với hệ thống ERP như SAP hoặc Oracle qua API."
        },
        {
            "question": "Làm cách nào để sử dụng Power Automate để tự động hóa quy trình quản lý dữ liệu lớn?",
            "answer": "Thiết kế flow với khả năng xử lý theo lô, sử dụng vòng lặp và tối ưu hóa truy vấn để tự động hóa xử lý và phân tích dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với các hệ thống CRM khác như Salesforce?",
            "answer": "Sử dụng custom connector hoặc connector có sẵn của Salesforce để kết nối và đồng bộ dữ liệu giữa Power Automate và hệ thống CRM đó."
        },
        {
            "question": "Làm cách nào để sử dụng Power Automate cho các tác vụ bất đồng bộ có thời gian chạy dài?",
            "answer": "Sử dụng flow bất đồng bộ, thiết lập cấu hình retry và sử dụng các hành động timeout để xử lý các tác vụ có thời gian chạy lâu mà không ảnh hưởng đến flow chính."
        },
        {
            "question": "Làm cách nào để tạo flow đa ngôn ngữ trong Power Automate?",
            "answer": "Tùy chỉnh thông qua các biểu thức và sử dụng biến chứa giá trị dựa trên ngôn ngữ của người dùng để tạo flow hỗ trợ nhiều ngôn ngữ."
        },
        {
            "question": "Làm cách nào để sử dụng Power Automate để tự động cập nhật báo cáo và dashboard?",
            "answer": "Thiết kế flow để trích xuất dữ liệu định kỳ và gửi vào Power BI hoặc hệ thống báo cáo khác, tự động cập nhật dashboard dựa trên dữ liệu mới."
        },
        {
            "question": "Làm cách nào để quản lý log và audit các hoạt động của flow trong Power Automate?",
            "answer": "Sử dụng API của Power Automate để trích xuất log, lưu trữ vào cơ sở dữ liệu hoặc hệ thống báo cáo, và thiết lập cơ chế audit thông qua Power Platform Admin Center."
        },
        {
            "question": "Làm cách nào để tích hợp Power Automate với các công cụ phân tích dữ liệu nâng cao như Azure Monitor?",
            "answer": "Sử dụng connector Azure Monitor và API để gửi thông tin hiệu suất và log của flow đến Azure Monitor, từ đó phân tích và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để thiết lập chính sách và quản trị flow tự động trong tổ chức thông qua Power Platform Admin Center?",
            "answer": "Sử dụng Power Platform Admin Center để cấu hình chính sách bảo mật, phân quyền và giới hạn tài nguyên cho các flow, đồng thời giám sát và báo cáo hoạt động của flow trong toàn tổ chức."
        }
    ],
    "Dynamics: Batch": [
        {
            "question": "Batch job trong Dynamics 365 là gì?",
            "answer": "Batch job là quy trình chạy nền, thực hiện công việc tiêu tốn thời gian hoặc được lên lịch để chạy tự động."
        },
        {
            "question": "Làm cách nào để tạo batch job trong Dynamics 365?",
            "answer": "Truy cập System administration > Batch jobs, sau đó click 'New' để tạo batch job mới."
        },
        {
            "question": "Các trạng thái của batch job là gì?",
            "answer": "Các trạng thái bao gồm: Pending, Running, Succeeded, Failed, Canceled, v.v."
        },
        {
            "question": "Làm cách nào để lên lịch batch job chạy tại thời gian cụ thể?",
            "answer": "Thiết lập 'Start time' và chọn tùy chọn lặp lại khi tạo job để lên lịch chạy vào thời điểm mong muốn."
        },
        {
            "question": "Làm cách nào để giám sát tiến trình batch job?",
            "answer": "Kiểm tra trạng thái trong danh sách Batch jobs và xem log chi tiết của từng job để theo dõi tiến trình."
        },
        {
            "question": "Sự khác biệt giữa batch job và real-time job là gì?",
            "answer": "Batch job chạy nền và được lên lịch, còn real-time job chạy ngay lập tức nhằm hỗ trợ các quy trình tương tác."
        },
        {
            "question": "Làm cách nào để hủy batch job đang chạy?",
            "answer": "Chọn job trong danh sách và click 'Cancel' để hủy bỏ job đang chạy."
        },
        {
            "question": "Batch job có thể được ưu tiên, và như thế nào?",
            "answer": "Có, bạn có thể gán mức ưu tiên cho batch job để xác định thứ tự thực thi khi có nhiều job cùng chạy."
        },
        {
            "question": "Batch job parameters là gì và dùng như thế nào?",
            "answer": "Parameters là đầu vào tùy chỉnh khi chạy job, giúp điều chỉnh quy trình xử lý theo yêu cầu cụ thể."
        },
        {
            "question": "Làm cách nào để tạo batch job tùy chỉnh?",
            "answer": "Phát triển lớp triển khai interface tùy chỉnh và đăng ký chúng trong Dynamics 365 để tạo ra các batch job theo yêu cầu."
        },
        {
            "question": "Best practices cho thiết kế batch jobs là gì?",
            "answer": "Giữ thiết kế đơn giản, tránh logic phức tạp không cần thiết và tối ưu hiệu suất xử lý để đảm bảo batch job chạy hiệu quả."
        },
        {
            "question": "Làm cách nào để xử lý lỗi trong batch jobs?",
            "answer": "Cấu hình retry cho bước thất bại hoặc dừng job khi có lỗi, đồng thời ghi log chi tiết để xử lý sự cố sau này."
        },
        {
            "question": "Vai trò của batch job logs là gì?",
            "answer": "Logs cung cấp thông tin chi tiết về quá trình thực thi, lỗi và cảnh báo, giúp quản trị viên theo dõi và xử lý sự cố."
        },
        {
            "question": "Làm cách nào để xuất batch job logs?",
            "answer": "Truy cập danh sách Batch jobs, sau đó sử dụng chức năng xuất log để lưu lại thông tin thực thi."
        },
        {
            "question": "Tác động của batch jobs đến hiệu suất hệ thống là gì?",
            "answer": "Batch jobs tiêu thụ tài nguyên hệ thống, do đó cần lên lịch chạy vào giờ thấp điểm và giám sát để không ảnh hưởng đến hiệu suất người dùng."
        },
        {
            "question": "Làm cách nào để tối ưu hiệu suất batch jobs?",
            "answer": "Giảm lượng dữ liệu xử lý, sử dụng thuật toán hiệu quả và tối ưu hóa code của batch job để rút ngắn thời gian chạy."
        },
        {
            "question": "Những ứng dụng phổ biến của batch jobs trong Dynamics 365 là gì?",
            "answer": "Chúng được sử dụng để đăng ký giao dịch, cập nhật hàng loạt bản ghi, tạo báo cáo và bảo trì dữ liệu."
        },
        {
            "question": "Làm cách nào để test batch job trước khi lên lịch?",
            "answer": "Chạy batch job với tập dữ liệu nhỏ để kiểm tra tính chính xác và hiệu suất trước khi triển khai vào môi trường sản xuất."
        },
        {
            "question": "Sự khác biệt giữa batch jobs đồng bộ và bất đồng bộ là gì?",
            "answer": "Batch job đồng bộ chờ cho đến khi hoàn tất trước khi chuyển sang bước tiếp theo, trong khi bất đồng bộ chạy nền và không ngăn cản các quy trình khác."
        },
        {
            "question": "Làm cách nào để tích hợp batch jobs với hệ thống khác?",
            "answer": "Batch job có thể được kích hoạt bởi sự kiện bên ngoài, lên lịch và sử dụng đầu ra để kích hoạt quy trình trong hệ thống khác."
        },
        {
            "question": "Làm thế nào để phân chia công việc cho batch job?",
            "answer": "Sử dụng phân chia dữ liệu (data partitioning) để chia nhỏ nhiệm vụ thành các lô xử lý riêng biệt."
        },
        {
            "question": "Cách theo dõi thời gian chạy của batch job là gì?",
            "answer": "Sử dụng log và dashboard giám sát để theo dõi thời gian bắt đầu, kết thúc và thời gian chạy của từng batch job."
        },
        {
            "question": "Làm thế nào để tự động gửi thông báo khi batch job hoàn thành?",
            "answer": "Cấu hình batch job để gửi thông báo qua email hoặc SMS khi trạng thái chuyển sang Succeeded hoặc Failed."
        },
        {
            "question": "Batch job có thể chạy song song hay không?",
            "answer": "Có, Dynamics 365 cho phép chạy nhiều batch job song song nếu cấu hình hệ thống và tài nguyên cho phép."
        },
        {
            "question": "Làm cách nào để xử lý batch job khi có quá nhiều dữ liệu?",
            "answer": "Sử dụng phân trang, xử lý theo lô (batch processing) và tối ưu hóa truy vấn để đảm bảo không quá tải hệ thống."
        },
        {
            "question": "Các phương pháp tối ưu hóa batch job để giảm thời gian chạy là gì?",
            "answer": "Sử dụng indexing, caching và tối ưu hóa code cũng như thuật toán xử lý dữ liệu trong batch job."
        },
        {
            "question": "Làm cách nào để cấu hình batch job cho các tác vụ lặp đi lặp lại?",
            "answer": "Sử dụng tính năng lặp lại (recurrence) để lên lịch batch job chạy định kỳ theo chu kỳ cố định."
        },
        {
            "question": "Có thể dừng tạm thời batch job và tiếp tục sau đó không?",
            "answer": "Có, Dynamics 365 cho phép tạm dừng và tiếp tục batch job tùy thuộc vào cấu hình và logic xử lý."
        },
        {
            "question": "Làm cách nào để xác định nguyên nhân lỗi của batch job?",
            "answer": "Kiểm tra log chi tiết và sử dụng công cụ debug trong Dynamics 365 để xác định nguyên nhân gây lỗi."
        },
        {
            "question": "Làm cách nào để chạy lại batch job đã thất bại?",
            "answer": "Sử dụng tùy chọn 'Retry' hoặc tạo lại batch job với dữ liệu tương tự sau khi đã xử lý lỗi."
        },
        {
            "question": "Làm cách nào để thiết lập batch job theo môi trường khác nhau (dev, test, production)?",
            "answer": "Cấu hình và lưu trữ batch job riêng cho từng environment, sau đó test kỹ trên môi trường Dev/Test trước khi triển khai trên Production."
        },
        {
            "question": "Batch job có thể thực hiện các thao tác cập nhật hàng loạt trên dữ liệu không?",
            "answer": "Có, batch job thường được sử dụng để cập nhật hàng loạt các bản ghi một cách tự động trong Dynamics 365."
        },
        {
            "question": "Làm cách nào để batch job tương tác với các module khác trong Dynamics 365?",
            "answer": "Sử dụng API và tích hợp nội bộ để batch job có thể đọc, ghi và cập nhật dữ liệu qua các module khác nhau."
        },
        {
            "question": "Batch job có hỗ trợ xử lý giao dịch (transaction) không?",
            "answer": "Có, bạn có thể cấu hình batch job chạy trong phạm vi transaction để đảm bảo tính toàn vẹn của dữ liệu."
        },
        {
            "question": "Làm cách nào để kiểm soát số lượng bản ghi được xử lý trong một batch job?",
            "answer": "Sử dụng tham số giới hạn (limit) và phân trang để kiểm soát số lượng bản ghi mỗi lần batch job xử lý."
        },
        {
            "question": "Làm cách nào để cấu hình batch job để tránh xung đột khi nhiều job chạy đồng thời?",
            "answer": "Sử dụng cơ chế locking hoặc quản lý concurrency được tích hợp để đảm bảo các batch job không xung đột khi chạy song song."
        },
        {
            "question": "Làm cách nào để lưu trữ kết quả xử lý của batch job?",
            "answer": "Kết quả có thể được lưu trữ vào database, file log hoặc gửi qua email cho quản trị viên để kiểm tra sau khi chạy."
        },
        {
            "question": "Làm cách nào để batch job thông báo khi gặp lỗi nghiêm trọng?",
            "answer": "Cấu hình alert hoặc trigger gửi thông báo đến quản trị viên khi batch job gặp lỗi nghiêm trọng trong quá trình xử lý."
        },
        {
            "question": "Batch job có thể xử lý các tập tin lớn không?",
            "answer": "Có, tuy nhiên cần tối ưu hóa bộ nhớ và thời gian chạy để đảm bảo xử lý tập tin lớn không gây quá tải hệ thống."
        },
        {
            "question": "Làm cách nào để triển khai batch job cho các nhiệm vụ bảo trì định kỳ?",
            "answer": "Tạo batch job theo lịch định kỳ để thực hiện các tác vụ bảo trì như dọn dẹp dữ liệu, cập nhật hệ thống và kiểm tra tính toàn vẹn."
        },
        {
            "question": "Làm thế nào để xác định thời điểm tối ưu để chạy batch job nhằm giảm tác động đến người dùng?",
            "answer": "Phân tích lưu lượng hệ thống và lên lịch chạy batch job vào giờ thấp điểm để không ảnh hưởng đến trải nghiệm người dùng."
        },
        {
            "question": "Làm cách nào để batch job xử lý dữ liệu theo nhóm?",
            "answer": "Sử dụng cơ chế grouping để chia dữ liệu thành các nhóm logic và xử lý từng nhóm riêng biệt trong batch job."
        },
        {
            "question": "Có thể kết hợp nhiều batch job lại thành một quy trình xử lý không?",
            "answer": "Có, bạn có thể sắp xếp và kết hợp nhiều batch job thành một workflow liên tục để xử lý theo trình tự logic."
        },
        {
            "question": "Làm cách nào để xử lý trường hợp batch job bị gián đoạn do lỗi hệ thống?",
            "answer": "Cấu hình auto-retry hoặc thiết lập checkpoint để batch job có thể khôi phục từ nơi bị gián đoạn khi gặp sự cố."
        },
        {
            "question": "Làm cách nào để đảm bảo tính bảo mật của batch job khi xử lý dữ liệu nhạy cảm?",
            "answer": "Áp dụng mã hóa dữ liệu, kiểm soát truy cập và giám sát log chặt chẽ trong suốt quá trình chạy batch job."
        },
        {
            "question": "Batch job có thể được sử dụng để thực hiện sao lưu dữ liệu không?",
            "answer": "Có, batch job thường được dùng để tự động sao lưu dữ liệu định kỳ nhằm đảm bảo an toàn thông tin."
        },
        {
            "question": "Làm cách nào để batch job tương tác với các dịch vụ web khác?",
            "answer": "Sử dụng API hoặc các dịch vụ web connector để batch job có thể gửi và nhận dữ liệu từ các hệ thống bên ngoài."
        },
        {
            "question": "Làm cách nào để cấu hình batch job với các tham số động?",
            "answer": "Sử dụng biến và tham số cấu hình khi khởi chạy batch job để điều chỉnh logic xử lý theo nhu cầu."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ phân tích dữ liệu sau khi xử lý?",
            "answer": "Batch job có thể lưu kết quả xử lý vào bảng tạm hoặc file log, sau đó dùng các công cụ báo cáo để phân tích."
        },
        {
            "question": "Làm cách nào để giảm thời gian khởi chạy của batch job?",
            "answer": "Tối ưu hóa code, giảm số lượng bước xử lý và sử dụng caching nhằm rút ngắn thời gian khởi động."
        },
        {
            "question": "Làm cách nào để kiểm tra tính sẵn sàng của hệ thống trước khi chạy batch job?",
            "answer": "Thực hiện kiểm tra hệ thống và resource monitoring để đảm bảo đủ tài nguyên cho batch job chạy ổn định."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ cập nhật dữ liệu hàng loạt?",
            "answer": "Sử dụng thao tác cập nhật theo lô với tối ưu hóa truy vấn để cập nhật hàng loạt các bản ghi cùng lúc."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ các quy trình phê duyệt tự động?",
            "answer": "Tích hợp với workflow phê duyệt, sử dụng API để cập nhật trạng thái phê duyệt sau khi hoàn thành xử lý."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ liên quan đến tài chính và kế toán?",
            "answer": "Cấu hình batch job thực hiện các phép tính tổng hợp, xử lý dữ liệu tài chính và tạo báo cáo định kỳ."
        },
        {
            "question": "Batch job có thể xử lý các tác vụ xử lý hình ảnh hay không?",
            "answer": "Thông thường batch job trong Dynamics 365 chủ yếu xử lý dữ liệu; xử lý hình ảnh thường được thực hiện qua các dịch vụ chuyên dụng khác."
        },
        {
            "question": "Làm cách nào để tự động hóa quá trình gửi báo cáo sau khi batch job chạy xong?",
            "answer": "Cấu hình batch job kết thúc với hành động gửi email hoặc cập nhật dashboard báo cáo tự động."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ tích hợp với các hệ thống bên ngoài?",
            "answer": "Sử dụng API, connectors và tham số cấu hình để batch job có thể đồng bộ dữ liệu với các hệ thống bên ngoài."
        },
        {
            "question": "Làm cách nào để thiết lập batch job khi có thay đổi cấu hình dữ liệu?",
            "answer": "Tạo batch job với tham số động và cấu hình trigger tự động khi dữ liệu thay đổi."
        },
        {
            "question": "Làm cách nào để đảm bảo batch job chạy ổn định trong môi trường đa người dùng?",
            "answer": "Sử dụng cơ chế locking, tối ưu hóa hiệu suất và cấu hình retry hợp lý để tránh xung đột khi nhiều người dùng thao tác."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ quá trình di chuyển dữ liệu giữa các hệ thống?",
            "answer": "Thiết lập batch job thực hiện quy trình ETL (Extract, Transform, Load) giữa các hệ thống, đảm bảo tính toàn vẹn của dữ liệu."
        },
        {
            "question": "Làm cách nào để giám sát hiệu suất của batch job theo thời gian thực?",
            "answer": "Sử dụng dashboard giám sát và hệ thống log để theo dõi thời gian chạy và hiệu suất của batch job trong thời gian thực."
        },
        {
            "question": "Làm cách nào để phân tích các lỗi thường gặp trong batch job?",
            "answer": "Thu thập log, phân tích thông báo lỗi và sử dụng công cụ báo cáo để xác định nguyên nhân lỗi phổ biến."
        },
        {
            "question": "Làm cách nào để tối ưu hóa cấu hình cơ sở dữ liệu nhằm hỗ trợ batch job?",
            "answer": "Cấu hình index, tối ưu hóa query và thực hiện bảo trì cơ sở dữ liệu định kỳ để cải thiện hiệu suất xử lý."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ cập nhật dữ liệu theo thời gian thực?",
            "answer": "Thiết lập trigger tự động và cấu hình thời gian chạy phù hợp để batch job xử lý dữ liệu thời gian thực."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ quy trình tích hợp với hệ thống ERP?",
            "answer": "Sử dụng API tích hợp, custom connector và cấu hình tham số để đồng bộ dữ liệu giữa Dynamics 365 và hệ thống ERP."
        },
        {
            "question": "Làm cách nào để đảm bảo rằng batch job không gây ảnh hưởng đến trải nghiệm người dùng?",
            "answer": "Chạy batch job vào giờ thấp điểm và tối ưu hóa sử dụng tài nguyên để giảm tác động lên hệ thống."
        },
        {
            "question": "Làm cách nào để batch job tự động ghi nhận và lưu trữ các kết quả xử lý?",
            "answer": "Cấu hình batch job để ghi log chi tiết và lưu trữ kết quả vào bảng tạm hoặc hệ thống lưu trữ dữ liệu."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ liên quan đến bảo trì hệ thống?",
            "answer": "Tạo batch job tự động thực hiện các tác vụ bảo trì như dọn dẹp dữ liệu, kiểm tra tính toàn vẹn và tối ưu hóa hiệu suất hệ thống."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ cập nhật dữ liệu từ các nguồn bên ngoài?",
            "answer": "Tích hợp batch job với các API và connector để lấy dữ liệu từ nguồn bên ngoài và cập nhật vào Dynamics 365."
        },
        {
            "question": "Làm cách nào để đảm bảo tính linh hoạt khi thay đổi logic trong batch job?",
            "answer": "Thiết kế batch job theo mô-đun, sử dụng biến và tham số cấu hình để dễ dàng thay đổi logic khi cần."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ việc phân tích dữ liệu lịch sử?",
            "answer": "Lưu trữ kết quả xử lý theo thời gian và sử dụng công cụ báo cáo để phân tích dữ liệu lịch sử của batch job."
        },
        {
            "question": "Làm cách nào để batch job tương tác với hệ thống báo cáo như Power BI?",
            "answer": "Cấu hình batch job để xuất dữ liệu ra định dạng có thể tích hợp với Power BI và tạo dashboard báo cáo."
        },
        {
            "question": "Làm cách nào để batch job tự động kiểm tra và cập nhật phiên bản dữ liệu?",
            "answer": "Tạo batch job so sánh phiên bản dữ liệu, tự động cập nhật khi có thay đổi và ghi nhận log phiên bản."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ xử lý giao dịch (transaction) đảm bảo tính toàn vẹn?",
            "answer": "Thiết lập batch job chạy trong transaction, sử dụng commit và rollback khi cần thiết để đảm bảo tính toàn vẹn của dữ liệu."
        },
        {
            "question": "Làm cách nào để batch job tương tác với các hệ thống web dịch vụ?",
            "answer": "Sử dụng hành động HTTP để gửi yêu cầu và xử lý phản hồi từ các hệ thống web dịch vụ."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ xử lý dữ liệu không đồng bộ?",
            "answer": "Thiết kế batch job sử dụng các hành động bất đồng bộ kết hợp với queue để xử lý dữ liệu không đồng bộ hiệu quả."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ định kỳ như tổng hợp báo cáo?",
            "answer": "Sử dụng trigger theo lịch để chạy batch job định kỳ và tổng hợp dữ liệu báo cáo theo chu kỳ."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ liên quan đến bảo mật dữ liệu?",
            "answer": "Áp dụng các biện pháp mã hóa, kiểm soát truy cập và ghi log chi tiết trong suốt quá trình chạy batch job."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ cập nhật dữ liệu trên nhiều hệ thống cùng lúc?",
            "answer": "Tích hợp batch job với API của từng hệ thống và cấu hình đồng bộ hóa để cập nhật dữ liệu cùng lúc."
        },
        {
            "question": "Làm cách nào để đảm bảo rằng batch job được chạy đầy đủ và không bị gián đoạn?",
            "answer": "Thiết lập monitor, alert và cơ chế tự động restart nếu batch job bị gián đoạn để đảm bảo hoàn thành nhiệm vụ."
        },
        {
            "question": "Làm cách nào để batch job ghi lại chi tiết các bước thực hiện?",
            "answer": "Sử dụng log chi tiết để ghi nhận thời gian bắt đầu, kết thúc và các bước xử lý của batch job."
        },
        {
            "question": "Làm cách nào để batch job xử lý các trường hợp dữ liệu bị lỗi?",
            "answer": "Cấu hình retry logic, kiểm tra dữ liệu đầu vào và ghi log lỗi để xử lý các trường hợp dữ liệu không hợp lệ."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ kiểm tra tự động sau khi hoàn thành xử lý?",
            "answer": "Tích hợp bước kiểm tra (validation) trong batch job để tự động so sánh dữ liệu đầu ra với dữ liệu mong đợi."
        },
        {
            "question": "Làm cách nào để đảm bảo rằng batch job có thể mở rộng khi số lượng dữ liệu tăng lên?",
            "answer": "Tối ưu hóa code, sử dụng phân trang và xử lý theo lô để đảm bảo batch job có thể mở rộng theo số lượng dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ phân tích thời gian chạy trung bình?",
            "answer": "Ghi nhận thời gian chạy của từng job và sử dụng công cụ báo cáo để tính toán thời gian chạy trung bình."
        },
        {
            "question": "Làm cách nào để batch job xử lý dữ liệu đầu vào có định dạng khác nhau?",
            "answer": "Sử dụng các bước chuyển đổi và chuẩn hóa định dạng dữ liệu trong quá trình xử lý batch job."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ kết nối đến nhiều nguồn dữ liệu khác nhau?",
            "answer": "Cấu hình batch job sử dụng các connector và API để kết nối và xử lý dữ liệu từ nhiều nguồn khác nhau."
        },
        {
            "question": "Làm cách nào để batch job xử lý dữ liệu với độ ưu tiên cao hơn các tác vụ khác?",
            "answer": "Cấu hình batch job với mức ưu tiên cao và sử dụng cơ chế scheduling ưu tiên trong Dynamics 365."
        },
        {
            "question": "Làm cách nào để batch job kiểm soát việc truy cập dữ liệu trong quá trình xử lý?",
            "answer": "Áp dụng các quy tắc bảo mật, kiểm soát quyền truy cập và sử dụng biến mã hóa để bảo vệ dữ liệu trong batch job."
        },
        {
            "question": "Làm cách nào để batch job xử lý dữ liệu nhập từ file Excel hoặc CSV?",
            "answer": "Sử dụng công cụ nhập dữ liệu, chuyển đổi định dạng và xử lý dữ liệu từ file Excel hoặc CSV thông qua batch job."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ cập nhật dữ liệu liên tục mà không gây ảnh hưởng đến hệ thống?",
            "answer": "Thiết kế batch job chạy liên tục theo chu kỳ ngắn, sử dụng cơ chế throttling để kiểm soát lượng dữ liệu xử lý."
        },
        {
            "question": "Làm cách nào để batch job tương tác với các hệ thống middleware để truyền dữ liệu?",
            "answer": "Sử dụng API hoặc connector của hệ thống middleware để batch job có thể truyền và nhận dữ liệu một cách an toàn."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ tạo báo cáo lỗi chi tiết?",
            "answer": "Cấu hình batch job ghi log chi tiết và sử dụng công cụ báo cáo để tạo báo cáo lỗi cho quản trị viên."
        },
        {
            "question": "Làm cách nào để batch job xử lý dữ liệu theo thời gian thực khi có sự thay đổi đột xuất?",
            "answer": "Kết hợp batch job với trigger thời gian thực để bắt đầu xử lý khi có thay đổi đột xuất trong dữ liệu."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ kết hợp với các công cụ ETL để chuyển đổi dữ liệu?",
            "answer": "Tích hợp batch job với các công cụ ETL như SSIS để chuyển đổi và tải dữ liệu giữa các hệ thống."
        },
        {
            "question": "Làm cách nào để batch job xử lý các tác vụ liên quan đến việc tạo và gửi báo cáo định kỳ?",
            "answer": "Thiết lập batch job tổng hợp dữ liệu, tạo báo cáo và gửi qua email hoặc cập nhật dashboard theo lịch định kỳ."
        },
        {
            "question": "Làm cách nào để batch job đảm bảo tính toàn vẹn khi thực hiện các tác vụ cập nhật dữ liệu quan trọng?",
            "answer": "Sử dụng transaction, commit và rollback để đảm bảo tính toàn vẹn của dữ liệu trong quá trình cập nhật."
        },
        {
            "question": "Làm cách nào để batch job hỗ trợ kiểm tra và cập nhật dữ liệu trong trường hợp có dữ liệu trùng lặp?",
            "answer": "Cấu hình bước kiểm tra trùng lặp và sử dụng thuật toán hợp nhất để xử lý dữ liệu trùng lặp trong batch job."
        },
        {
            "question": "Làm cách nào để batch job tương tác với hệ thống quản lý tài nguyên để điều chỉnh tài nguyên khi cần?",
            "answer": "Sử dụng API của hệ thống quản lý tài nguyên để batch job tự động điều chỉnh và phân bổ tài nguyên phù hợp."
        },
        {
            "question": "Làm cách nào để batch job đảm bảo chạy ổn định trong suốt quá trình bảo trì hệ thống?",
            "answer": "Thiết lập batch job chạy vào thời điểm bảo trì, sử dụng monitor và cơ chế tự động restart để đảm bảo quá trình bảo trì không ảnh hưởng đến job."
        }
    ],
    "Dynamics: Plugin": [
        {
            "question": "Plugin trong Dynamics 365 là gì?",
            "answer": "Plugin là mã code chạy khi có sự kiện, như tạo, cập nhật, xóa bản ghi, giúp mở rộng chức năng của hệ thống."
        },
        {
            "question": "Các bước để tạo plugin là gì?",
            "answer": "Phát triển mã C# theo chuẩn SDK, biên dịch thành DLL, sau đó đăng ký plugin bằng Plugin Registration Tool (PRT)."
        },
        {
            "question": "Ngôn ngữ lập trình nào được dùng để phát triển plugin?",
            "answer": "C# là ngôn ngữ chính được sử dụng để phát triển plugin trong Dynamics 365."
        },
        {
            "question": "Làm cách nào để đăng ký plugin trong Dynamics 365?",
            "answer": "Sử dụng Plugin Registration Tool để đăng ký plugin, chỉ định sự kiện (message) và entity tương ứng."
        },
        {
            "question": "Các loại tin nhắn nào có thể kích hoạt plugin?",
            "answer": "Các tin nhắn như Create, Update, Delete, Retrieve, RetrieveMultiple, v.v."
        },
        {
            "question": "Sự khác biệt giữa pre-operation và post-operation plugin là gì?",
            "answer": "Pre-operation chạy trước khi dữ liệu được lưu vào database, trong khi post-operation chạy sau khi dữ liệu được lưu."
        },
        {
            "question": "Làm cách nào để xử lý ngoại lệ trong plugin?",
            "answer": "Sử dụng try-catch để bắt ngoại lệ, ghi log và quyết định ném lỗi (throw) hoặc tiếp tục thực hiện tùy theo logic nghiệp vụ."
        },
        {
            "question": "Service context trong plugin là gì và dùng như thế nào?",
            "answer": "IOrganizationService cho phép plugin tương tác với database Dynamics 365 để thực hiện các hành động như lấy hoặc cập nhật bản ghi."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu giữa các phần của plugin?",
            "answer": "Sử dụng Plugin Execution Context, đặc biệt là thuộc tính SharedVariables để truyền dữ liệu giữa các bước plugin."
        },
        {
            "question": "Early-bound và late-bound types trong lập trình Dynamics 365 là gì?",
            "answer": "Early-bound sử dụng các lớp được tạo sẵn với kiểm tra thời gian biên dịch; late-bound sử dụng đối tượng chung và xác định các thuộc tính tại runtime."
        },
        {
            "question": "Làm cách nào để debug plugin trong Dynamics 365?",
            "answer": "Sử dụng Plugin Registration Tool để bật logging, sau đó kiểm tra log hoặc sử dụng Visual Studio Debugging khi chạy trong môi trường sandbox."
        },
        {
            "question": "Giới hạn governor cho plugin ảnh hưởng hiệu suất như thế nào?",
            "answer": "Giới hạn governor quy định số lần gọi các hành động trên database; nếu vượt quá sẽ gây lỗi, vì vậy cần tối ưu số lần gọi và truy vấn."
        },
        {
            "question": "Vai trò của Plugin Registration Tool là gì?",
            "answer": "PRT dùng để đăng ký, cập nhật, quản lý plugin, cũng như bật debug và ghi log chi tiết cho plugin."
        },
        {
            "question": "Làm cách nào để version control mã plugin?",
            "answer": "Sử dụng hệ thống quản lý mã nguồn như Git để theo dõi, quản lý và lưu trữ các phiên bản mã plugin."
        },
        {
            "question": "Best practices cho viết plugin hiệu quả là gì?",
            "answer": "Viết code tối ưu, giảm thao tác database, hạn chế logic phức tạp, và đăng ký plugin với chế độ bất đồng bộ nếu có thể."
        },
        {
            "question": "Làm cách nào để test plugin trước khi triển khai?",
            "answer": "Sử dụng Plugin Registration Tool để test với dữ liệu mẫu hoặc tạo môi trường sandbox để kiểm tra hành vi của plugin."
        },
        {
            "question": "Sự khác biệt giữa plugin và workflow trong Dynamics 365 là gì?",
            "answer": "Plugin là mã tùy chỉnh chạy code, còn workflow là tập hợp các bước định sẵn không cần code, phục vụ các quy trình nghiệp vụ đơn giản."
        },
        {
            "question": "Làm cách nào để xử lý concurrency trong plugin?",
            "answer": "Plugin cần thiết kế logic để hoạt động trong môi trường đa luồng; Dynamics 365 xử lý concurrency ở cấp độ database."
        },
        {
            "question": "IPublicService interface trong plugin dùng để làm gì?",
            "answer": "Interface này cho phép plugin truy cập từ bên ngoài tổ chức, tuy nhiên nó ít được sử dụng trong các triển khai thông thường."
        },
        {
            "question": "Làm cách nào để triển khai plugin vào môi trường production?",
            "answer": "Đóng gói DLL và thông tin đăng ký, sau đó nhập vào production qua Plugin Registration Tool hoặc sử dụng PowerShell để triển khai."
        },
        {
            "question": "Làm cách nào để triển khai plugin không ảnh hưởng đến hệ thống?",
            "answer": "Sử dụng đăng ký bất đồng bộ, đảm bảo viết code tối ưu và chạy trong môi trường sandbox khi có thể."
        },
        {
            "question": "Plugin có thể chạy ở chế độ đồng bộ và bất đồng bộ không?",
            "answer": "Có, bạn có thể đăng ký plugin để chạy đồng bộ (synchronous) hoặc bất đồng bộ (asynchronous) tùy thuộc vào yêu cầu nghiệp vụ."
        },
        {
            "question": "Làm cách nào để cấu hình secure và unsecure configuration cho plugin?",
            "answer": "Secure configuration được mã hóa và không hiển thị công khai; unsecure configuration có thể xem trực tiếp và cả hai được truyền vào plugin qua IPluginExecutionContext."
        },
        {
            "question": "Làm thế nào để plugin lấy thông tin về context người dùng?",
            "answer": "Plugin sử dụng thuộc tính UserId và InitiatingUserId trong IPluginExecutionContext để xác định thông tin người dùng kích hoạt hành động."
        },
        {
            "question": "Làm cách nào để plugin xử lý các trường hợp dữ liệu null?",
            "answer": "Sử dụng kiểm tra null trong code và xử lý hợp lý, tránh gây ra ngoại lệ khi dữ liệu không tồn tại."
        },
        {
            "question": "Làm cách nào để plugin truy xuất dữ liệu từ Dynamics 365?",
            "answer": "Sử dụng IOrganizationService để thực hiện các thao tác CRUD như truy vấn, tạo, cập nhật và xóa bản ghi."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu giữa các plugin được đăng ký cùng một message?",
            "answer": "Sử dụng thuộc tính SharedVariables trong IPluginExecutionContext để chia sẻ dữ liệu giữa các bước plugin cùng thực thi."
        },
        {
            "question": "Plugin có thể tương tác với custom entities không?",
            "answer": "Có, plugin có thể được đăng ký và xử lý dữ liệu cho các custom entities tương tự như các thực thể mặc định."
        },
        {
            "question": "Làm cách nào để đảm bảo plugin chỉ chạy khi cần thiết?",
            "answer": "Sử dụng logic kiểm tra trong code dựa trên điều kiện của context, dữ liệu hiện có và giá trị của các tham số trước khi thực hiện hành động."
        },
        {
            "question": "Làm cách nào để ghi log chi tiết trong plugin?",
            "answer": "Sử dụng ITracingService được cung cấp trong IPluginExecutionContext để ghi log chi tiết, rất hữu ích cho việc debug trong môi trường sandbox."
        },
        {
            "question": "Làm thế nào để plugin truy xuất metadata của Dynamics 365?",
            "answer": "Sử dụng IOrganizationService để gọi các request như RetrieveEntityMetadataRequest nhằm lấy thông tin metadata của các thực thể."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có nhiều thực thể liên quan?",
            "answer": "Thực hiện các truy vấn liên kết (join) giữa các thực thể và xử lý dữ liệu theo logic nghiệp vụ cần thiết."
        },
        {
            "question": "Làm thế nào để tạo một plugin hoạt động trên nhiều entity?",
            "answer": "Đăng ký cùng một plugin cho nhiều entity bằng cách tạo nhiều bước (steps) trong Plugin Registration Tool."
        },
        {
            "question": "Làm cách nào để đăng ký plugin chạy trên các message RetrieveMultiple?",
            "answer": "Khi đăng ký, chọn message RetrieveMultiple để plugin xử lý các truy vấn trả về danh sách bản ghi."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo không gây ra deadlock?",
            "answer": "Thiết kế plugin sao cho tránh gọi quá nhiều giao dịch đồng bộ và sử dụng các phương pháp xử lý bất đồng bộ khi có thể."
        },
        {
            "question": "Làm cách nào để plugin xử lý thông tin của parent record trong hierarchy?",
            "answer": "Sử dụng context để truy xuất thông tin liên quan đến parent record thông qua các truy vấn liên kết giữa các entity."
        },
        {
            "question": "Làm cách nào để plugin hoạt động trong môi trường sandbox?",
            "answer": "Viết plugin tuân thủ các giới hạn của sandbox, hạn chế gọi các tài nguyên bên ngoài và sử dụng API được cho phép."
        },
        {
            "question": "Làm cách nào để plugin xác định thời điểm chính xác để thực thi trong pipeline?",
            "answer": "Đăng ký plugin ở các stage khác nhau (PreValidation, PreOperation, PostOperation) để xác định thời điểm chạy phù hợp."
        },
        {
            "question": "Làm cách nào để plugin sử dụng dependency injection?",
            "answer": "Mặc dù không phổ biến, có thể tích hợp các framework như Microsoft.Extensions.DependencyInjection để hỗ trợ dependency injection trong plugin."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu một cách hiệu quả?",
            "answer": "Tối ưu hóa code, sử dụng caching tạm thời và giảm số lần truy vấn database để cải thiện hiệu suất xử lý."
        },
        {
            "question": "Plugin có thể gọi các dịch vụ web bên ngoài không?",
            "answer": "Có, tuy nhiên cần đảm bảo tuân thủ các quy tắc bảo mật và giới hạn của môi trường sandbox."
        },
        {
            "question": "Làm thế nào để xử lý phiên bản DLL plugin khi có cập nhật?",
            "answer": "Tăng số phiên bản của assembly, biên dịch lại và đăng ký DLL mới qua Plugin Registration Tool."
        },
        {
            "question": "Làm cách nào để plugin xử lý các trường hợp khi dữ liệu không hợp lệ?",
            "answer": "Sử dụng logic kiểm tra dữ liệu trong plugin và ném ngoại lệ (throw exception) nếu dữ liệu không đáp ứng tiêu chí."
        },
        {
            "question": "Làm cách nào để plugin thực hiện các phép tính toán phức tạp?",
            "answer": "Viết code tính toán trong plugin sử dụng các hàm toán học của C# để xử lý các phép tính phức tạp theo yêu cầu."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo tính nhất quán khi cập nhật nhiều bản ghi?",
            "answer": "Sử dụng transaction scope trong plugin và thực hiện commit khi tất cả các thao tác cập nhật thành công."
        },
        {
            "question": "Làm cách nào để plugin giảm thiểu số lần gọi IOrganizationService?",
            "answer": "Tối ưu hóa các truy vấn, sử dụng caching nội bộ và thực hiện các thao tác trên một tập hợp bản ghi thay vì từng bản ghi riêng lẻ."
        },
        {
            "question": "Làm cách nào để plugin xử lý các yêu cầu từ multiple plugins cùng lúc?",
            "answer": "Sử dụng SharedVariables trong IPluginExecutionContext để chia sẻ dữ liệu và thiết kế logic tránh xung đột giữa các plugin."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có trigger từ nhiều message khác nhau?",
            "answer": "Kiểm tra thuộc tính MessageName trong IPluginExecutionContext và xử lý theo từng trường hợp dựa trên giá trị của message."
        },
        {
            "question": "Làm cách nào để plugin biết được người dùng kích hoạt hành động?",
            "answer": "Sử dụng thuộc tính InitiatingUserId trong IPluginExecutionContext để lấy thông tin người dùng kích hoạt sự kiện."
        },
        {
            "question": "Làm cách nào để plugin thực hiện ghi log lỗi chi tiết?",
            "answer": "Sử dụng ITracingService để ghi log chi tiết các lỗi và thông tin debug, giúp việc phân tích sau này dễ dàng hơn."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu từ các source khác nhau trong Dynamics 365?",
            "answer": "Thực hiện các truy vấn kết hợp dữ liệu từ nhiều source và xử lý theo logic nghiệp vụ đã định sẵn."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ tính năng rollback khi xảy ra lỗi?",
            "answer": "Sử dụng transaction scope và ném ngoại lệ khi có lỗi để rollback toàn bộ các thay đổi đã thực hiện."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có update đồng thời?",
            "answer": "Thiết kế plugin với cơ chế kiểm soát concurrency, sử dụng locking và kiểm tra trạng thái dữ liệu qua IPluginExecutionContext."
        },
        {
            "question": "Làm cách nào để plugin cập nhật nhiều thực thể cùng lúc?",
            "answer": "Sử dụng IOrganizationService để thực hiện các thao tác batch update và tối ưu hóa logic xử lý cho nhiều bản ghi."
        },
        {
            "question": "Làm cách nào để plugin truy xuất dữ liệu lịch sử của một bản ghi?",
            "answer": "Sử dụng các request như RetrieveRecordChangeHistoryRequest để lấy thông tin lịch sử thay đổi của bản ghi."
        },
        {
            "question": "Làm cách nào để plugin tương tác với các custom workflow activities?",
            "answer": "Plugin có thể được gọi từ workflow nếu đăng ký đúng cách và truyền dữ liệu đầu vào thông qua context."
        },
        {
            "question": "Làm cách nào để plugin xử lý các trường hợp phân quyền dữ liệu?",
            "answer": "Sử dụng IPluginExecutionContext để xác định quyền truy cập của người dùng và thực hiện logic xử lý phù hợp."
        },
        {
            "question": "Làm cách nào để plugin tích hợp với các dịch vụ phân tích dữ liệu?",
            "answer": "Plugin có thể gửi dữ liệu đến các dịch vụ phân tích thông qua API web hoặc tích hợp với hệ thống báo cáo bên ngoài."
        },
        {
            "question": "Làm cách nào để plugin kiểm tra định dạng dữ liệu trước khi cập nhật?",
            "answer": "Sử dụng logic validate trong code để kiểm tra định dạng và giá trị dữ liệu trước khi thực hiện thao tác cập nhật."
        },
        {
            "question": "Làm cách nào để plugin xử lý thông báo lỗi cho người dùng?",
            "answer": "Sử dụng throw new InvalidPluginExecutionException để ném lỗi và hiển thị thông báo lỗi cụ thể cho người dùng."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ các tính năng mở rộng mà không thay đổi mã nguồn gốc?",
            "answer": "Sử dụng dependency injection hoặc gọi các dịch vụ bên ngoài để mở rộng chức năng mà không cần chỉnh sửa code plugin chính."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo tương thích với các phiên bản Dynamics 365 mới?",
            "answer": "Cập nhật SDK, kiểm tra lại tính tương thích của code và thử nghiệm trên các phiên bản Dynamics 365 mới trước khi triển khai."
        },
        {
            "question": "Làm cách nào để plugin xử lý các trường hợp ngoại lệ không mong đợi?",
            "answer": "Sử dụng try-catch toàn cục để bắt mọi ngoại lệ và ghi log chi tiết, sau đó thông báo cho quản trị viên nếu cần."
        },
        {
            "question": "Làm cách nào để plugin giảm thiểu tác động đến hiệu suất hệ thống?",
            "answer": "Tối ưu hóa code, giảm số lần gọi database và sử dụng caching khi xử lý dữ liệu để giảm tải hệ thống."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu nhập từ người dùng qua giao diện Dynamics 365?",
            "answer": "Sử dụng IPluginExecutionContext để truy xuất dữ liệu người dùng nhập, sau đó validate và xử lý trước khi lưu trữ."
        },
        {
            "question": "Làm cách nào để plugin tích hợp với các hệ thống CRM khác?",
            "answer": "Plugin chủ yếu chạy trong Dynamics 365, nhưng có thể tích hợp thông qua API nếu cần đồng bộ dữ liệu với hệ thống CRM khác."
        },
        {
            "question": "Làm cách nào để plugin thực hiện các hành động không đồng bộ?",
            "answer": "Đăng ký plugin ở chế độ bất đồng bộ để thực hiện các hành động không cần phải chờ kết quả ngay lập tức."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ logging chi tiết trong môi trường sandbox?",
            "answer": "Sử dụng ITracingService để ghi log chi tiết, giúp việc debug trong môi trường sandbox trở nên dễ dàng hơn."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có sự thay đổi của nhiều người dùng?",
            "answer": "Sử dụng kiểm soát concurrency và SharedVariables trong IPluginExecutionContext để xử lý các thay đổi đồng thời."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo dữ liệu được ghi đúng định dạng chuẩn?",
            "answer": "Sử dụng các phương thức validate dữ liệu và kiểm tra định dạng trước khi thực hiện bất kỳ cập nhật nào."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ các tính năng báo cáo nâng cao?",
            "answer": "Plugin có thể ghi lại dữ liệu xử lý và gửi về hệ thống báo cáo để phân tích nâng cao sau này."
        },
        {
            "question": "Làm cách nào để plugin tương tác với hệ thống email trong Dynamics 365?",
            "answer": "Plugin có thể truy xuất thông tin email qua IOrganizationService và tích hợp với các connector email để gửi thông báo."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu từ các thực thể liên quan?",
            "answer": "Sử dụng các truy vấn liên kết giữa các thực thể và xử lý dữ liệu dựa trên mối quan hệ đã định nghĩa trong hệ thống."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo rằng các dữ liệu thay đổi được ghi nhận đầy đủ?",
            "answer": "Sử dụng IPluginExecutionContext và SharedVariables để lưu lại các dữ liệu thay đổi, đảm bảo không bị mất thông tin."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có các cập nhật hàng loạt?",
            "answer": "Thiết kế plugin để xử lý dữ liệu theo lô (batch processing) và sử dụng vòng lặp để cập nhật từng nhóm bản ghi."
        },
        {
            "question": "Làm cách nào để plugin quản lý trạng thái của bản ghi sau khi cập nhật?",
            "answer": "Sử dụng IOrganizationService để cập nhật trạng thái của bản ghi và xác nhận qua các truy vấn kiểm tra sau khi cập nhật."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ tính năng rollback khi gặp lỗi trong quá trình xử lý?",
            "answer": "Sử dụng transaction scope trong plugin và ném ngoại lệ để thực hiện rollback nếu có lỗi xảy ra."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo rằng dữ liệu không bị trùng lặp khi thực hiện cập nhật?",
            "answer": "Kiểm tra sự tồn tại của dữ liệu trước khi cập nhật và sử dụng logic hợp nhất dữ liệu để tránh trùng lặp."
        },
        {
            "question": "Làm cách nào để plugin xử lý các thông báo trạng thái từ hệ thống?",
            "answer": "Sử dụng IPluginExecutionContext để đọc thông báo trạng thái và thực hiện các hành động tùy thuộc vào giá trị nhận được."
        },
        {
            "question": "Làm cách nào để plugin tương tác với các dịch vụ web khác từ Dynamics 365?",
            "answer": "Sử dụng IOrganizationService kết hợp với HTTP requests để truy xuất và cập nhật dữ liệu từ các dịch vụ web bên ngoài."
        },
        {
            "question": "Làm cách nào để plugin xử lý các trường hợp dữ liệu lỗi trong quá trình ghi nhận?",
            "answer": "Sử dụng try-catch để bắt ngoại lệ, ghi log chi tiết và thông báo lỗi cho quản trị viên để xử lý."
        },
        {
            "question": "Làm cách nào để plugin tối ưu hóa quá trình truy xuất dữ liệu?",
            "answer": "Sử dụng các truy vấn tối ưu, tránh gọi API lặp lại và áp dụng caching khi có thể."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ việc chuyển đổi dữ liệu giữa các định dạng khác nhau?",
            "answer": "Sử dụng các phương thức convert và parse trong C# để chuyển đổi dữ liệu sang định dạng cần thiết."
        },
        {
            "question": "Làm cách nào để plugin tích hợp với hệ thống audit để theo dõi các thay đổi?",
            "answer": "Sử dụng tính năng audit của Dynamics 365 và ghi log qua ITracingService để lưu lại các thay đổi quan trọng."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu nhập từ các nguồn bên ngoài?",
            "answer": "Thực hiện validate và chuyển đổi dữ liệu nhập qua các truy vấn, sau đó cập nhật vào Dynamics 365 thông qua IOrganizationService."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ xử lý các tác vụ tính toán phức tạp?",
            "answer": "Viết code tính toán chuyên sâu trong plugin, sử dụng các hàm toán học có sẵn của C# để thực hiện các phép tính cần thiết."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo rằng các hành động của nó không làm gián đoạn quy trình kinh doanh?",
            "answer": "Thiết kế plugin chạy nhanh, tối ưu hóa logic và sử dụng bất đồng bộ khi có thể để không làm gián đoạn quá trình kinh doanh."
        },
        {
            "question": "Làm cách nào để plugin xử lý các tác vụ cập nhật dữ liệu từ hệ thống bên ngoài?",
            "answer": "Sử dụng API kết hợp với IOrganizationService để đồng bộ hóa dữ liệu từ hệ thống bên ngoài vào Dynamics 365."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ việc phân tích dữ liệu đã được xử lý?",
            "answer": "Ghi lại dữ liệu xử lý qua log hoặc SharedVariables và xuất dữ liệu đó cho hệ thống báo cáo để phân tích."
        },
        {
            "question": "Làm cách nào để plugin quản lý việc chạy nhiều phiên bản cùng lúc?",
            "answer": "Sử dụng cơ chế kiểm soát concurrency và kiểm tra trạng thái thực thi qua IPluginExecutionContext để đảm bảo các phiên bản không xung đột."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có sự thay đổi đột xuất trong hệ thống?",
            "answer": "Thiết kế plugin với khả năng xử lý bất đồng bộ và sử dụng trigger thời gian thực để bắt kịp các thay đổi đột xuất."
        },
        {
            "question": "Làm cách nào để plugin tối ưu hóa việc truy xuất dữ liệu từ các bảng lớn?",
            "answer": "Sử dụng indexing, tối ưu hóa truy vấn và chia nhỏ dữ liệu (paging) để giảm tải khi truy xuất dữ liệu từ bảng lớn."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo rằng dữ liệu cập nhật luôn được lưu trữ chính xác?",
            "answer": "Sử dụng transaction, kiểm tra kết quả của các thao tác cập nhật và thực hiện rollback nếu có lỗi xảy ra."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ các tính năng mở rộng mà không cần thay đổi cấu trúc cốt lõi của Dynamics 365?",
            "answer": "Sử dụng custom workflow activities, dependency injection và giao diện mở rộng để tích hợp thêm tính năng mới mà không làm thay đổi hệ thống gốc."
        },
        {
            "question": "Làm cách nào để plugin xử lý dữ liệu khi có các thay đổi liên tục từ nhiều nguồn?",
            "answer": "Sử dụng SharedVariables để đồng bộ hóa dữ liệu và thực hiện các truy vấn tối ưu nhằm xử lý các thay đổi liên tục một cách hiệu quả."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ việc ghi nhận và báo cáo các hành động của nó?",
            "answer": "Sử dụng ITracingService để ghi log chi tiết và tích hợp với hệ thống audit của Dynamics 365 để theo dõi hoạt động của plugin."
        },
        {
            "question": "Làm cách nào để plugin xử lý các trường hợp dữ liệu không hợp lệ một cách linh hoạt?",
            "answer": "Viết logic kiểm tra dữ liệu chi tiết, sử dụng try-catch và trả về thông báo lỗi rõ ràng cho người dùng hoặc quản trị viên."
        },
        {
            "question": "Làm cách nào để plugin tích hợp với các công cụ kiểm thử tự động?",
            "answer": "Sử dụng framework unit test của .NET (như MSTest, NUnit) để viết các bài kiểm thử cho plugin, mô phỏng IOrganizationService và IPluginExecutionContext."
        },
        {
            "question": "Làm cách nào để plugin đảm bảo tính bảo mật khi thực hiện các thao tác cập nhật dữ liệu?",
            "answer": "Sử dụng các biện pháp mã hóa, kiểm tra quyền truy cập qua context và tuân thủ các chính sách bảo mật của Dynamics 365."
        },
        {
            "question": "Làm cách nào để plugin hỗ trợ quá trình triển khai tự động qua các công cụ CI/CD?",
            "answer": "Sử dụng Git, PowerShell và các công cụ CI/CD để tự động hóa quá trình build, test và triển khai plugin vào các môi trường Dynamics 365 khác nhau."
        }
    ],
    "Dynamics: Web Resource": [
        {
            "question": "Web resource trong Dynamics 365 là gì?",
            "answer": "Web resource là file chứa nội dung tĩnh như HTML, JavaScript, CSS, hình ảnh, v.v., được dùng để mở rộng giao diện và chức năng của Dynamics 365."
        },
        {
            "question": "Làm cách nào để tạo web resource?",
            "answer": "Truy cập Settings > Customizations > Web Resources, click 'New', sau đó tải file lên và định nghĩa các thuộc tính cần thiết."
        },
        {
            "question": "Các loại file nào được hỗ trợ cho web resource?",
            "answer": "Các loại file được hỗ trợ bao gồm HTML, JavaScript, CSS, XML, PNG, JPEG, GIF, SVG, XSL, và nhiều định dạng tĩnh khác."
        },
        {
            "question": "Làm cách nào để tham chiếu web resource trong form Dynamics 365?",
            "answer": "Sử dụng URL hoặc tên web resource trong thuộc tính của form (ví dụ: nhúng vào OnLoad event) để hiển thị nội dung."
        },
        {
            "question": "Làm cách nào để version control web resources?",
            "answer": "Dynamics 365 cho phép cập nhật file web resource và ghi chú version; bạn cũng có thể quản lý chúng thông qua hệ thống version control như Git bên ngoài."
        },
        {
            "question": "Sự khác biệt giữa web resource và solution component là gì?",
            "answer": "Web resource là loại solution component chứa file tĩnh, dùng để hiển thị nội dung, trong khi solution component bao gồm nhiều thành phần khác như entities, plugins, và workflows."
        },
        {
            "question": "Làm cách nào để cập nhật web resource đã tồn tại?",
            "answer": "Mở web resource trong Customizations, chỉnh sửa file, lưu và sau đó làm mới cache trên trình duyệt để xem thay đổi."
        },
        {
            "question": "Làm cách nào để xử lý dependencies giữa các web resources?",
            "answer": "Đảm bảo các file được tải theo thứ tự đúng; bạn có thể sử dụng script loader hoặc quản lý thứ tự tham chiếu trong form."
        },
        {
            "question": "Best practices cho đặt tên web resources là gì?",
            "answer": "Sử dụng tên miêu tả, nhất quán với tiền tố của tổ chức, loại file và chức năng (ví dụ: new_CustomScript.js)."
        },
        {
            "question": "Làm cách nào để tối ưu hiệu suất web resources?",
            "answer": "Minify và nén file, sử dụng caching và kết hợp nhiều file thành một để giảm số lượng yêu cầu tải."
        },
        {
            "question": "Kích thước tối đa của web resource là bao nhiêu?",
            "answer": "Thông thường web resource nên được giữ dưới 2 MB để đảm bảo tải nhanh và hiệu quả."
        },
        {
            "question": "Làm cách nào để test web resource trước khi triển khai?",
            "answer": "Tải web resource lên môi trường test, sử dụng các công cụ Developer của trình duyệt để kiểm tra lỗi và hiệu năng."
        },
        {
            "question": "Vai trò của web resources trong việc tùy chỉnh giao diện Dynamics 365 là gì?",
            "answer": "Web resources cho phép thêm script, style, và nội dung tùy chỉnh mà không can thiệp vào mã nguồn cốt lõi của Dynamics 365."
        },
        {
            "question": "Làm cách nào để bảo mật web resources?",
            "answer": "Áp dụng các quy tắc bảo mật, kiểm soát quyền truy cập qua vai trò người dùng và sử dụng HTTPS để truyền tải dữ liệu an toàn."
        },
        {
            "question": "Web resources có sử dụng được trong cả Dynamics 365 và Power Apps không?",
            "answer": "Có, web resources được tích hợp trong solution nên có thể chia sẻ giữa Dynamics 365 và Power Apps."
        },
        {
            "question": "Sự khác biệt giữa web resource và client-side extension là gì?",
            "answer": "Web resource là file tĩnh nhúng vào form, còn client-side extension (PCF) là thành phần tùy chỉnh nâng cao cho giao diện, được phát triển theo framework riêng của Power Platform."
        },
        {
            "question": "Làm cách nào để troubleshoot vấn đề với web resources?",
            "answer": "Sử dụng công cụ Developer Tools (Chrome DevTools, F12) để kiểm tra lỗi tải file, lỗi JavaScript và các thông báo trong console."
        },
        {
            "question": "Những ứng dụng phổ biến của web resources là gì?",
            "answer": "Web resources được dùng để thêm validation tùy chỉnh, tạo giao diện nâng cao, hiển thị báo cáo, tích hợp thư viện bên thứ ba, và tương tác với dữ liệu Dynamics 365."
        },
        {
            "question": "Làm cách nào để quản lý môi trường khác nhau với web resources?",
            "answer": "Web resources là thành phần của solution nên có thể xuất nhập qua Power Platform Admin Center giữa các môi trường như Dev, Test, và Production."
        },
        {
            "question": "Quy trình di chuyển web resources giữa các phiên bản Dynamics 365 là gì?",
            "answer": "Xuất web resources từ môi trường hiện tại và nhập vào môi trường mới, đồng thời test tính tương thích sau khi nâng cấp."
        },
        {
            "question": "Làm cách nào để sử dụng web resource để tạo custom dashboard?",
            "answer": "Nhúng web resource HTML chứa biểu đồ và bảng dữ liệu vào dashboard để hiển thị thông tin tùy chỉnh."
        },
        {
            "question": "Làm cách nào để web resource tương tác với form events?",
            "answer": "Thêm JavaScript từ web resource vào form và đăng ký các sự kiện như OnLoad, OnSave để thực thi logic tùy chỉnh."
        },
        {
            "question": "Làm cách nào để load web resource một cách bất đồng bộ?",
            "answer": "Sử dụng kỹ thuật AJAX trong JavaScript để tải nội dung web resource mà không làm chậm giao diện người dùng."
        },
        {
            "question": "Làm cách nào để web resource cải thiện trải nghiệm người dùng?",
            "answer": "Bằng cách cung cấp các tính năng tương tác như tự động kiểm tra dữ liệu, hiển thị thông báo lỗi và cập nhật giao diện động."
        },
        {
            "question": "Làm cách nào để kết hợp nhiều web resource vào một file duy nhất?",
            "answer": "Sử dụng công cụ build (như Webpack hoặc Gulp) để gộp và minify các file JavaScript hoặc CSS, giảm số lượng request tải trang."
        },
        {
            "question": "Làm cách nào để chèn hình ảnh từ web resource vào form?",
            "answer": "Lấy URL của hình ảnh web resource và sử dụng nó trong các thẻ HTML hoặc thiết lập thuộc tính Image URL của control."
        },
        {
            "question": "Làm cách nào để xác định thứ tự tải của các web resource?",
            "answer": "Sắp xếp thứ tự tải trong form properties hoặc sử dụng script loader để đảm bảo các file được tải theo đúng thứ tự cần thiết."
        },
        {
            "question": "Làm cách nào để web resource xử lý dữ liệu từ API bên ngoài?",
            "answer": "Sử dụng AJAX để gọi API và xử lý dữ liệu trả về trong JavaScript, sau đó hiển thị kết quả trên web resource."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ đa ngôn ngữ?",
            "answer": "Tạo các file ngôn ngữ riêng biệt và sử dụng JavaScript để tải nội dung phù hợp dựa trên ngôn ngữ của người dùng."
        },
        {
            "question": "Làm cách nào để web resource được tích hợp trong mobile client của Dynamics 365?",
            "answer": "Thiết kế web resource responsive, đảm bảo tương thích với trình duyệt di động và kiểm tra trên Dynamics 365 Mobile App."
        },
        {
            "question": "Làm cách nào để web resource kiểm soát lỗi khi tải?",
            "answer": "Sử dụng try-catch trong JavaScript và hiển thị thông báo lỗi nếu file không tải được hoặc gặp sự cố."
        },
        {
            "question": "Làm cách nào để web resource sử dụng caching hiệu quả?",
            "answer": "Cấu hình header caching phù hợp và tận dụng cache của trình duyệt để giảm thời gian tải file web resource."
        },
        {
            "question": "Làm cách nào để web resource tương tác với các control khác trên form?",
            "answer": "Sử dụng DOM manipulation trong JavaScript để thay đổi thuộc tính và giá trị của các control dựa trên logic tùy chỉnh."
        },
        {
            "question": "Làm cách nào để web resource xử lý dữ liệu từ form?",
            "answer": "Lấy dữ liệu thông qua đối tượng Xrm.Page (hoặc formContext) trong Dynamics 365 và xử lý bằng JavaScript trong web resource."
        },
        {
            "question": "Làm cách nào để tích hợp web resource với các plugin của Dynamics 365?",
            "answer": "Web resource có thể gọi các hành động của plugin thông qua API Dynamics 365, tạo sự tương tác giữa client-side và server-side."
        },
        {
            "question": "Làm cách nào để bảo mật nội dung của web resource?",
            "answer": "Sử dụng HTTPS, kiểm soát truy cập qua vai trò người dùng và có thể obfuscate code JavaScript để bảo vệ nội dung."
        },
        {
            "question": "Làm cách nào để web resource kiểm tra trạng thái kết nối Internet?",
            "answer": "Sử dụng JavaScript (ví dụ: navigator.onLine) để kiểm tra kết nối và hiển thị thông báo nếu mất kết nối."
        },
        {
            "question": "Làm cách nào để web resource giúp tạo trải nghiệm người dùng tùy chỉnh?",
            "answer": "Bằng cách thêm hiệu ứng động, chuyển đổi giao diện, và cung cấp các tính năng tương tác được lập trình bằng HTML, CSS và JavaScript."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tính năng drag-and-drop trên form?",
            "answer": "Sử dụng thư viện JavaScript như jQuery UI hoặc HTML5 Drag and Drop API để triển khai tính năng kéo thả trong web resource."
        },
        {
            "question": "Làm cách nào để web resource tương tác với dữ liệu Dynamics 365 qua API?",
            "answer": "Sử dụng Web API (OData) của Dynamics 365 trong JavaScript để thực hiện các thao tác CRUD và xử lý dữ liệu."
        },
        {
            "question": "Làm cách nào để web resource được lưu trữ trong solution?",
            "answer": "Khi tạo web resource, chọn solution hiện tại để lưu trữ, giúp quản lý và di chuyển giữa các môi trường dễ dàng."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tích hợp với Power BI?",
            "answer": "Nhúng báo cáo Power BI qua iframe hoặc sử dụng JavaScript để tương tác với API của Power BI trong web resource."
        },
        {
            "question": "Làm cách nào để web resource tối ưu hóa thời gian tải trang?",
            "answer": "Minify file, nén và sử dụng asynchronous loading để giảm thời gian tải và cải thiện hiệu năng trang."
        },
        {
            "question": "Làm cách nào để web resource xử lý nội dung dynamic?",
            "answer": "Sử dụng JavaScript để tạo nội dung động dựa trên dữ liệu được lấy từ API hoặc các biến truyền từ Dynamics 365."
        },
        {
            "question": "Làm cách nào để web resource đảm bảo tương thích với các trình duyệt hiện đại?",
            "answer": "Tuân thủ chuẩn HTML5, CSS3, test trên nhiều trình duyệt và sử dụng polyfills nếu cần hỗ trợ trình duyệt cũ."
        },
        {
            "question": "Làm cách nào để web resource tương tác với dữ liệu được truyền từ server?",
            "answer": "Sử dụng AJAX để gọi các dịch vụ web của Dynamics 365 và xử lý dữ liệu trả về trong web resource."
        },
        {
            "question": "Làm cách nào để web resource hiển thị thông báo lỗi cho người dùng?",
            "answer": "Sử dụng các modal dialog, alert hoặc hiển thị thông báo trực tiếp trên trang khi có lỗi xảy ra."
        },
        {
            "question": "Làm cách nào để web resource được kích hoạt khi form load?",
            "answer": "Đăng ký web resource trong sự kiện OnLoad của form Dynamics 365 để tự động tải nội dung khi form được mở."
        },
        {
            "question": "Làm cách nào để web resource thay đổi giao diện form Dynamics 365?",
            "answer": "Sử dụng JavaScript để thay đổi CSS, ẩn hiện hoặc thêm các control tùy chỉnh vào giao diện form."
        },
        {
            "question": "Làm cách nào để web resource được sử dụng trong các ứng dụng tích hợp?",
            "answer": "Xuất web resource qua solution và triển khai vào các môi trường khác nhau, đảm bảo tính tương thích khi tích hợp."
        },
        {
            "question": "Làm cách nào để kiểm soát phiên bản của web resource trong quá trình phát triển?",
            "answer": "Theo dõi thay đổi qua version control (ví dụ: Git) và cập nhật số version trong Dynamics 365 mỗi khi có thay đổi."
        },
        {
            "question": "Làm cách nào để web resource xử lý event onChange của control?",
            "answer": "Gắn event handler trong JavaScript cho control, từ đó gọi hàm xử lý khi giá trị thay đổi."
        },
        {
            "question": "Làm cách nào để web resource tương tác với dữ liệu thông qua OData?",
            "answer": "Sử dụng Web API của Dynamics 365 (OData) trong JavaScript để truy vấn và xử lý dữ liệu."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tạo giao diện tùy chỉnh cho dashboard?",
            "answer": "Nhúng web resource HTML chứa biểu đồ, bảng dữ liệu và các yếu tố tương tác vào dashboard Dynamics 365."
        },
        {
            "question": "Làm cách nào để web resource được kích hoạt khi có thay đổi dữ liệu?",
            "answer": "Đăng ký event change trong form Dynamics 365 để kích hoạt lại web resource khi dữ liệu thay đổi."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tải nội dung từ nhiều nguồn?",
            "answer": "Sử dụng AJAX để gọi API từ nhiều nguồn và kết hợp dữ liệu trả về trong web resource."
        },
        {
            "question": "Làm cách nào để web resource được tích hợp vào form Editor?",
            "answer": "Thêm web resource vào form Editor như một phần của layout để cung cấp các công cụ hoặc nội dung bổ sung."
        },
        {
            "question": "Làm cách nào để web resource giúp tự động cập nhật dữ liệu trên form?",
            "answer": "Sử dụng JavaScript với hàm setInterval hoặc kỹ thuật polling để tự động làm mới dữ liệu hiển thị."
        },
        {
            "question": "Làm cách nào để web resource đảm bảo tương thích trên desktop và mobile?",
            "answer": "Thiết kế responsive với CSS (media queries) và kiểm tra giao diện trên nhiều thiết bị khác nhau."
        },
        {
            "question": "Làm cách nào để web resource tối ưu hóa cho SEO trong Dynamics 365?",
            "answer": "Mặc dù không phải ưu tiên hàng đầu, nhưng bạn có thể tối ưu hóa nội dung HTML và meta tags để cải thiện SEO cho các trang công khai."
        },
        {
            "question": "Làm cách nào để web resource xử lý dữ liệu dạng JSON?",
            "answer": "Sử dụng JSON.parse để chuyển đổi chuỗi JSON thành đối tượng và JSON.stringify để chuyển đổi ngược lại trong JavaScript."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ in ấn nội dung?",
            "answer": "Tạo CSS cho in ấn bằng @media print để định dạng nội dung phù hợp khi người dùng in từ web resource."
        },
        {
            "question": "Làm cách nào để web resource hiển thị nội dung tùy chỉnh dựa trên vai trò người dùng?",
            "answer": "Sử dụng thông tin context từ Dynamics 365 để xác định vai trò người dùng và hiển thị nội dung tương ứng trong web resource."
        },
        {
            "question": "Làm cách nào để web resource xử lý các thao tác drag-and-drop?",
            "answer": "Sử dụng thư viện JavaScript như jQuery UI hoặc HTML5 Drag and Drop API để triển khai tính năng kéo thả trong web resource."
        },
        {
            "question": "Làm cách nào để web resource tương tác với các control hệ thống qua API?",
            "answer": "Sử dụng đối tượng Xrm.Page (hoặc formContext) trong JavaScript để truy xuất và điều khiển các control khác trên form Dynamics 365."
        },
        {
            "question": "Làm cách nào để web resource hiển thị báo cáo tùy chỉnh?",
            "answer": "Nhúng báo cáo được tạo từ Power BI hoặc các công cụ báo cáo khác qua iframe hoặc trực tiếp qua HTML/JavaScript trong web resource."
        },
        {
            "question": "Làm cách nào để web resource đảm bảo tính ổn định khi Dynamics 365 được cập nhật?",
            "answer": "Kiểm tra và cập nhật web resource theo SDK mới, đảm bảo không sử dụng các hàm hoặc API lỗi thời."
        },
        {
            "question": "Làm cách nào để web resource tích hợp với các dịch vụ bên ngoài?",
            "answer": "Sử dụng AJAX để gọi các API bên ngoài và tích hợp dữ liệu trả về vào nội dung hiển thị của web resource."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ giao diện người dùng đa chủ đề?",
            "answer": "Tạo các file CSS cho từng theme và sử dụng JavaScript để chuyển đổi giao diện dựa trên lựa chọn của người dùng."
        },
        {
            "question": "Làm cách nào để web resource đảm bảo rằng dữ liệu được cập nhật tự động?",
            "answer": "Sử dụng kỹ thuật polling hoặc kết nối WebSocket để tự động làm mới nội dung khi có thay đổi dữ liệu."
        },
        {
            "question": "Làm cách nào để web resource được cấu hình theo đặc tả của solution?",
            "answer": "Đảm bảo web resource được thêm vào solution và quản lý cùng các thành phần khác để dễ dàng triển khai và cập nhật."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ các tính năng tương tác động?",
            "answer": "Sử dụng JavaScript để tạo hiệu ứng động như animation, transition và responsive interactions cho web resource."
        },
        {
            "question": "Làm cách nào để web resource được kiểm soát qua Power Platform Admin Center?",
            "answer": "Web resource là một phần của solution, có thể được quản lý và giám sát qua Power Platform Admin Center khi xuất nhập solution."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ hiển thị video hoặc âm thanh?",
            "answer": "Sử dụng các thẻ HTML5 <video> hoặc <audio> trong web resource để nhúng và phát nội dung media, đảm bảo định dạng tương thích."
        },
        {
            "question": "Làm cách nào để web resource xử lý dữ liệu đầu vào từ người dùng?",
            "answer": "Sử dụng form HTML và JavaScript để thu thập, validate và xử lý dữ liệu đầu vào, sau đó gửi lên Dynamics 365 nếu cần."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ giao diện tương tác theo thời gian thực?",
            "answer": "Áp dụng AJAX hoặc WebSocket để cập nhật nội dung web resource liên tục mà không cần tải lại trang."
        },
        {
            "question": "Làm cách nào để web resource được mã hóa và bảo vệ nội dung?",
            "answer": "Sử dụng kỹ thuật obfuscation cho mã JavaScript và áp dụng các biện pháp bảo mật qua server để bảo vệ nội dung."
        },
        {
            "question": "Làm cách nào để web resource tích hợp với Dynamics 365 Mobile App?",
            "answer": "Thiết kế web resource responsive và tương thích với mobile, sau đó nhúng vào mobile form của Dynamics 365."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tính năng multi-language?",
            "answer": "Tạo các file resource cho từng ngôn ngữ và sử dụng JavaScript để tải nội dung phù hợp với ngôn ngữ được chọn của người dùng."
        },
        {
            "question": "Làm cách nào để web resource được tối ưu hóa cho performance khi có lượng truy cập cao?",
            "answer": "Sử dụng CDN, caching, minification và load balancing để đảm bảo web resource tải nhanh và ổn định dưới tải cao."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ việc thu thập feedback từ người dùng?",
            "answer": "Tạo form feedback trong web resource và gửi dữ liệu về Dynamics 365 hoặc hệ thống lưu trữ để phân tích."
        },
        {
            "question": "Làm cách nào để web resource giúp tùy chỉnh giao diện navigation trong Dynamics 365?",
            "answer": "Sử dụng web resource để tạo custom navigation menu với HTML và CSS, cung cấp trải nghiệm điều hướng độc đáo."
        },
        {
            "question": "Làm cách nào để web resource được tích hợp với hệ thống analytics?",
            "answer": "Nhúng mã tracking như Google Analytics vào web resource để thu thập dữ liệu sử dụng và phân tích hành vi người dùng."
        },
        {
            "question": "Làm cách nào để web resource xử lý các yêu cầu đồng thời từ nhiều người dùng?",
            "answer": "Thiết kế web resource sử dụng asynchronous requests và caching để xử lý đồng thời mà không gây tắc nghẽn."
        },
        {
            "question": "Làm cách nào để web resource được phân phối qua các môi trường (Dev, Test, Prod)?",
            "answer": "Đưa web resource vào solution và xuất nhập qua Power Platform Admin Center để triển khai nhất quán giữa các môi trường."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ hiển thị dữ liệu dạng bảng?",
            "answer": "Sử dụng HTML table hoặc các grid library để hiển thị dữ liệu dạng bảng có khả năng tương tác."
        },
        {
            "question": "Làm cách nào để web resource được cập nhật tự động khi có phiên bản mới?",
            "answer": "Quản lý phiên bản qua solution; khi có cập nhật, tăng số version và triển khai lại để người dùng luôn nhận phiên bản mới."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tùy chỉnh giao diện dựa trên thiết bị?",
            "answer": "Sử dụng media queries trong CSS và JavaScript để phát hiện thiết bị và thay đổi giao diện tương ứng (responsive design)."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ hiển thị báo cáo tùy chỉnh từ dữ liệu Dynamics 365?",
            "answer": "Nhúng báo cáo từ Power BI hoặc công cụ báo cáo khác qua iframe hoặc tích hợp trực tiếp qua JavaScript để hiển thị dữ liệu."
        },
        {
            "question": "Làm cách nào để web resource xử lý các lỗi phát sinh trong quá trình tải?",
            "answer": "Sử dụng error handling trong JavaScript (try-catch) và hiển thị fallback content hoặc thông báo lỗi cho người dùng."
        },
        {
            "question": "Làm cách nào để web resource giúp tích hợp dữ liệu từ các nguồn bên ngoài?",
            "answer": "Sử dụng AJAX để gọi API từ các nguồn bên ngoài và tích hợp dữ liệu trả về vào nội dung web resource."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tùy chỉnh giao diện dựa trên quyền truy cập của người dùng?",
            "answer": "Sử dụng thông tin context từ Dynamics 365 để xác định quyền truy cập và hiển thị nội dung phù hợp trong web resource."
        },
        {
            "question": "Làm cách nào để web resource được tối ưu hóa cho các trang có nội dung phong phú?",
            "answer": "Áp dụng kỹ thuật lazy loading cho hình ảnh, tối ưu hóa CSS và JavaScript, và sử dụng caching để giảm thời gian tải trang."
        },
        {
            "question": "Làm cách nào để web resource hiển thị nội dung được định dạng bởi JSON?",
            "answer": "Sử dụng JavaScript để parse JSON và render nội dung thông qua HTML templates hoặc DOM manipulation."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ tương tác qua touch screen trên thiết bị di động?",
            "answer": "Sử dụng các event touch của JavaScript và thiết kế giao diện responsive, đảm bảo tính tương tác mượt mà trên thiết bị cảm ứng."
        },
        {
            "question": "Làm cách nào để web resource được tích hợp với các plugin và extensions của Dynamics 365?",
            "answer": "Đảm bảo web resource được thêm vào solution và sử dụng API của Dynamics 365 để tương tác với các plugin/extension khác."
        },
        {
            "question": "Làm cách nào để web resource hỗ trợ các tính năng tùy chỉnh không có sẵn trong Dynamics 365?",
            "answer": "Sử dụng HTML, CSS và JavaScript tùy chỉnh trong web resource để thêm các tính năng bổ sung theo yêu cầu nghiệp vụ."
        },
        {
            "question": "Làm cách nào để web resource được cập nhật theo thời gian thực từ nguồn dữ liệu?",
            "answer": "Sử dụng kỹ thuật polling hoặc event-driven programming (như WebSocket) để tự động cập nhật nội dung khi dữ liệu thay đổi."
        },
        {
            "question": "Làm cách nào để web resource đảm bảo tính tương thích với các phiên bản Dynamics 365 khác nhau?",
            "answer": "Kiểm tra và cập nhật web resource sau mỗi bản nâng cấp Dynamics 365, sử dụng các tiêu chuẩn web hiện đại để đảm bảo tương thích."
        },
        {
            "question": "Làm cách nào để web resource giúp tăng cường tính tùy biến của giao diện Dynamics 365?",
            "answer": "Web resource cho phép tích hợp các giao diện tùy chỉnh, hiệu ứng động và tính năng mở rộng giúp nâng cao trải nghiệm người dùng."
        }
    ],
    "Dynamics: PCF": [
        {
            "question": "Power Apps Component Framework (PCF) là gì?",
            "answer": "PCF là khung cho phép tạo control tùy chỉnh cho Dynamics 365 và Power Apps, sử dụng công nghệ như React, CSS và JavaScript."
        },
        {
            "question": "Lợi ích của PCF controls so với control cũ là gì?",
            "answer": "PCF controls linh hoạt hơn, hiệu suất cao, dễ bảo trì và hỗ trợ giao diện người dùng hiện đại trên cả Dynamics 365 và Power Apps."
        },
        {
            "question": "Các bước để tạo PCF control là gì?",
            "answer": "Cài đặt môi trường, sử dụng PCF CLI để tạo dự án, phát triển code, test cục bộ và đóng gói control để triển khai."
        },
        {
            "question": "Ngôn ngữ và công nghệ nào được dùng trong PCF?",
            "answer": "PCF sử dụng JavaScript, React, CSS và HTML để phát triển giao diện tùy chỉnh."
        },
        {
            "question": "Làm cách nào để thiết lập môi trường phát triển cho PCF?",
            "answer": "Cài đặt Node.js, PCF CLI và một trình soạn thảo như Visual Studio Code để phát triển control."
        },
        {
            "question": "Làm cách nào để test PCF control cục bộ trước khi triển khai?",
            "answer": "Sử dụng lệnh 'pac pcf start' từ PCF CLI để chạy control trong môi trường cục bộ với dữ liệu mẫu."
        },
        {
            "question": "Vai trò của manifest file trong PCF control là gì?",
            "answer": "Manifest file (manifest.json) chứa metadata của control như tên, mô tả, properties và các tham số cấu hình."
        },
        {
            "question": "Làm cách nào để định nghĩa properties cho PCF control?",
            "answer": "Định nghĩa properties trong manifest file, chỉ rõ kiểu dữ liệu, giá trị mặc định và các thiết lập cần thiết cho control."
        },
        {
            "question": "Làm cách nào để xử lý events trong PCF control?",
            "answer": "Control có thể lắng nghe và kích hoạt events từ host app, cũng như xử lý các sự kiện người dùng thông qua callback functions."
        },
        {
            "question": "Sự khác biệt giữa PCF control và web resource là gì?",
            "answer": "PCF control là thành phần động, tích hợp chặt chẽ với dữ liệu và UI của Dynamics 365, trong khi web resource là file tĩnh dùng để hiển thị nội dung."
        },
        {
            "question": "Làm cách nào để triển khai PCF control vào Dynamics 365?",
            "answer": "Đóng gói PCF control cùng với dependencies, sau đó nhập control vào Dynamics 365 thông qua solution và Plugin Registration Tool hoặc Power Platform CLI."
        },
        {
            "question": "Best practices cho phát triển PCF controls là gì?",
            "answer": "Giữ code modular, sử dụng React best practices, xử lý lỗi hiệu quả và tối ưu hiệu suất khi render control."
        },
        {
            "question": "Làm cách nào để debug PCF control?",
            "answer": "Sử dụng các công cụ Developer của trình duyệt như Chrome DevTools để kiểm tra console, network và debug code khi chạy control cục bộ."
        },
        {
            "question": "Các loại control nào có thể tạo với PCF?",
            "answer": "PCF cho phép tạo control cho form, view, dashboard và các phần tùy chỉnh khác của ứng dụng Dynamics 365 và Power Apps."
        },
        {
            "question": "PCF xử lý internationalization như thế nào?",
            "answer": "Bằng cách cung cấp file resource cho các ngôn ngữ khác nhau và sử dụng các tham số localization trong manifest file."
        },
        {
            "question": "Vai trò của PCF CLI là gì?",
            "answer": "PCF CLI giúp tạo, test, đóng gói và triển khai các PCF control thông qua dòng lệnh."
        },
        {
            "question": "Làm cách nào để cập nhật PCF control hiện có?",
            "answer": "Chỉnh sửa mã nguồn, cập nhật manifest nếu cần, biên dịch lại và triển khai phiên bản mới qua solution."
        },
        {
            "question": "Những thách thức phổ biến khi phát triển PCF controls là gì?",
            "answer": "Đảm bảo tương thích trình duyệt, xử lý dữ liệu phức tạp, quản lý dependencies và tối ưu hóa hiệu suất."
        },
        {
            "question": "Làm cách nào để version control mã PCF control?",
            "answer": "Sử dụng hệ thống quản lý mã nguồn như Git để theo dõi và quản lý các phiên bản của code control."
        },
        {
            "question": "Những tài nguyên nào để học thêm về PCF?",
            "answer": "Tài liệu chính thức của Microsoft, các tutorial trên Microsoft Learn, blog và diễn đàn cộng đồng Power Platform."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu trong PCF control?",
            "answer": "Sử dụng API Dynamics 365 và các hàm xử lý trong JavaScript/React để xử lý và hiển thị dữ liệu theo yêu cầu."
        },
        {
            "question": "Làm cách nào để tương tác với API của Dynamics 365 trong PCF control?",
            "answer": "Sử dụng IInputs và IOutputs được cung cấp bởi framework để gọi các API và cập nhật dữ liệu từ server."
        },
        {
            "question": "PCF control có hỗ trợ responsive design không?",
            "answer": "Có, bạn có thể sử dụng CSS responsive và các kỹ thuật layout để đảm bảo control hiển thị tốt trên mọi kích thước màn hình."
        },
        {
            "question": "Làm cách nào để sử dụng React hooks trong PCF control?",
            "answer": "Có thể sử dụng các hooks như useState, useEffect trong component React của PCF để quản lý state và side effects."
        },
        {
            "question": "Có thể tích hợp PCF control với các framework JavaScript khác không?",
            "answer": "PCF chủ yếu sử dụng React, nhưng bạn cũng có thể tích hợp với các thư viện JavaScript khác nếu cần thiết thông qua module bundler."
        },
        {
            "question": "Làm cách nào để tối ưu hóa hiệu suất của PCF control?",
            "answer": "Tối ưu code, sử dụng memoization, giảm số lần render không cần thiết và kiểm tra performance qua profiling."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu thời gian thực trong PCF control?",
            "answer": "Sử dụng kỹ thuật asynchronous, gọi API theo thời gian thực và cập nhật state của control khi có thay đổi dữ liệu."
        },
        {
            "question": "PCF control có tương tác với form events không?",
            "answer": "Có, PCF control có thể đăng ký và xử lý các sự kiện từ form như OnChange, OnLoad thông qua API của Dynamics 365."
        },
        {
            "question": "Làm cách nào để chuyển đổi dữ liệu trong PCF control?",
            "answer": "Sử dụng các hàm chuyển đổi trong JavaScript để định dạng dữ liệu trước khi hiển thị hoặc gửi đi."
        },
        {
            "question": "Làm cách nào để cập nhật giao diện của PCF control theo thời gian?",
            "answer": "Sử dụng state management trong React và các hàm render để cập nhật giao diện khi có thay đổi dữ liệu."
        },
        {
            "question": "PCF control có hỗ trợ các phương thức asynchronous không?",
            "answer": "Có, PCF control hỗ trợ các hàm async/await trong JavaScript để xử lý các tác vụ bất đồng bộ."
        },
        {
            "question": "Làm cách nào để sử dụng state management trong PCF control?",
            "answer": "Sử dụng React state và context để quản lý và chia sẻ state giữa các component trong control."
        },
        {
            "question": "Có thể sử dụng TypeScript để phát triển PCF control không?",
            "answer": "Có, Microsoft khuyến nghị sử dụng TypeScript để phát triển PCF control nhằm tăng tính an toàn của mã và hỗ trợ lập trình hướng đối tượng."
        },
        {
            "question": "Làm cách nào để triển khai PCF control qua solution?",
            "answer": "Đóng gói PCF control dưới dạng solution component, sau đó xuất và import solution vào môi trường Dynamics 365."
        },
        {
            "question": "PCF control có hỗ trợ custom styling không?",
            "answer": "Có, bạn có thể tùy chỉnh CSS trong control để thay đổi giao diện theo ý muốn."
        },
        {
            "question": "Làm cách nào để tạo một PCF control cho dashboard?",
            "answer": "Phát triển control với layout tối ưu cho dashboard, sau đó đăng ký và cấu hình trong solution để hiển thị trên dashboard Dynamics 365."
        },
        {
            "question": "Làm cách nào để tích hợp PCF control với Power BI?",
            "answer": "PCF control có thể nhúng báo cáo Power BI qua iframe hoặc tương tác qua API để hiển thị dữ liệu báo cáo tùy chỉnh."
        },
        {
            "question": "PCF control có thể chạy trên cả desktop và mobile không?",
            "answer": "Có, nếu được thiết kế responsive và tuân thủ các tiêu chuẩn web hiện đại, PCF control có thể chạy trên cả desktop và mobile."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu lớn trong PCF control?",
            "answer": "Tối ưu hóa truy vấn dữ liệu, sử dụng phân trang (paging) và xử lý bất đồng bộ để giảm tải khi làm việc với dữ liệu lớn."
        },
        {
            "question": "Làm cách nào để kiểm soát lifecycle của PCF control?",
            "answer": "PCF control có các phương thức lifecycle như init, updateView, getOutputs và destroy để quản lý quá trình khởi tạo, cập nhật và hủy bỏ control."
        },
        {
            "question": "PCF control có hỗ trợ localization không?",
            "answer": "Có, bạn có thể tích hợp file resource cho nhiều ngôn ngữ và sử dụng các thuộc tính localization trong manifest file."
        },
        {
            "question": "Làm cách nào để ghi log và theo dõi lỗi trong PCF control?",
            "answer": "Sử dụng console.log, các công cụ debug của trình duyệt và tích hợp với các hệ thống logging để theo dõi lỗi trong control."
        },
        {
            "question": "Có thể sử dụng component libraries bên ngoài trong PCF control không?",
            "answer": "Có, bạn có thể tích hợp các thư viện như Fluent UI, Bootstrap hay Material-UI vào PCF control thông qua module bundler."
        },
        {
            "question": "Làm cách nào để xử lý sự thay đổi kích thước màn hình trong PCF control?",
            "answer": "Sử dụng CSS responsive, media queries và các sự kiện resize để cập nhật giao diện khi kích thước màn hình thay đổi."
        },
        {
            "question": "Làm cách nào để PCF control tích hợp với các dịch vụ web?",
            "answer": "Sử dụng các API HTTP hoặc connector tích hợp để gọi dịch vụ web bên ngoài và xử lý dữ liệu trả về trong control."
        },
        {
            "question": "Làm cách nào để tạo các tùy chọn cấu hình cho PCF control?",
            "answer": "Định nghĩa các thuộc tính cấu hình trong manifest file và sử dụng chúng để điều chỉnh hành vi của control tại runtime."
        },
        {
            "question": "PCF control có hỗ trợ event bubbling không?",
            "answer": "Có, PCF control có thể kích hoạt các sự kiện tùy chỉnh để truyền lên host app, hỗ trợ event bubbling nếu được cấu hình đúng."
        },
        {
            "question": "Làm cách nào để thay đổi properties của PCF control sau khi render?",
            "answer": "Sử dụng phương thức updateView trong lifecycle của control để cập nhật properties khi có thay đổi từ host app."
        },
        {
            "question": "Làm cách nào để xử lý tương tác người dùng trong PCF control?",
            "answer": "Sử dụng các sự kiện click, hover, input và các event handler trong React để xử lý tương tác người dùng trong control."
        },
        {
            "question": "PCF control có thể sử dụng data binding không?",
            "answer": "Có, PCF control hỗ trợ data binding thông qua thuộc tính inputs và outputs được truyền từ Dynamics 365."
        },
        {
            "question": "Làm cách nào để kiểm tra hiệu suất của PCF control?",
            "answer": "Sử dụng công cụ profiling của trình duyệt và các báo cáo log để đo thời gian render và xử lý của control."
        },
        {
            "question": "Có thể sử dụng các công cụ unit test cho PCF control không?",
            "answer": "Có, bạn có thể sử dụng các framework kiểm thử như Jest, Mocha hoặc React Testing Library để viết unit test cho PCF control."
        },
        {
            "question": "Làm cách nào để xử lý các lỗi bất ngờ trong PCF control?",
            "answer": "Áp dụng try-catch trong code, ghi log lỗi và cung cấp fallback UI khi có lỗi xảy ra trong control."
        },
        {
            "question": "PCF control có hỗ trợ multi-threading không?",
            "answer": "Không, JavaScript chạy đơn luồng; tuy nhiên, bạn có thể sử dụng Web Workers để xử lý tác vụ nặng nếu cần."
        },
        {
            "question": "Làm cách nào để tối ưu hóa kích thước bundle của PCF control?",
            "answer": "Sử dụng tree shaking, minification và các kỹ thuật tối ưu hóa khác qua công cụ bundler như Webpack để giảm kích thước bundle."
        },
        {
            "question": "Làm cách nào để tích hợp PCF control với các hệ thống backend?",
            "answer": "Sử dụng API REST hoặc SOAP để giao tiếp giữa PCF control và các hệ thống backend, đảm bảo bảo mật khi truyền tải dữ liệu."
        },
        {
            "question": "PCF control có hỗ trợ custom events không?",
            "answer": "Có, bạn có thể định nghĩa và phát custom events trong control để giao tiếp với host app hoặc các component khác."
        },
        {
            "question": "Làm cách nào để truyền dữ liệu giữa các PCF control trên cùng một form?",
            "answer": "Sử dụng SharedVariables hoặc context được cung cấp bởi Dynamics 365 để chia sẻ dữ liệu giữa các control."
        },
        {
            "question": "Làm cách nào để sử dụng dependency injection trong PCF control?",
            "answer": "Mặc dù không phổ biến, bạn có thể tích hợp các framework DI như InversifyJS để quản lý dependency trong PCF control."
        },
        {
            "question": "PCF control có thể sử dụng các framework CSS như Bootstrap không?",
            "answer": "Có, bạn có thể tích hợp Bootstrap hoặc các thư viện CSS khác để cải thiện giao diện của PCF control."
        },
        {
            "question": "Làm cách nào để xử lý cập nhật dữ liệu từ server trong PCF control?",
            "answer": "Sử dụng các hàm bất đồng bộ để gọi API của Dynamics 365 và cập nhật state của control khi có dữ liệu mới."
        },
        {
            "question": "Làm cách nào để tương tác với local storage trong PCF control?",
            "answer": "Sử dụng Web Storage API (localStorage hoặc sessionStorage) trong JavaScript để lưu trữ dữ liệu tạm thời của control."
        },
        {
            "question": "PCF control có hỗ trợ lazy loading không?",
            "answer": "Có, bạn có thể áp dụng lazy loading cho các thành phần nặng trong control để cải thiện thời gian tải trang."
        },
        {
            "question": "Làm cách nào để xử lý các tác vụ phức tạp bằng PCF control?",
            "answer": "Tách logic phức tạp thành các module riêng, sử dụng asynchronous processing và tối ưu hóa code để đảm bảo hiệu suất."
        },
        {
            "question": "Làm cách nào để PCF control hỗ trợ các quy trình nghiệp vụ tùy chỉnh?",
            "answer": "Sử dụng các thuộc tính inputs/outputs và events để tích hợp logic nghiệp vụ tùy chỉnh từ Dynamics 365 vào control."
        },
        {
            "question": "PCF control có hỗ trợ custom animations không?",
            "answer": "Có, bạn có thể sử dụng CSS animations hoặc các thư viện JavaScript để tạo hiệu ứng động trong control."
        },
        {
            "question": "Làm cách nào để xử lý các sự kiện touch trong PCF control?",
            "answer": "Sử dụng các event listeners cho touch events (touchstart, touchmove, touchend) để xử lý tương tác trên thiết bị di động."
        },
        {
            "question": "PCF control có thể chạy trên các trình duyệt khác nhau không?",
            "answer": "Có, nếu được phát triển theo chuẩn web hiện đại, PCF control có thể chạy trên các trình duyệt phổ biến như Chrome, Edge, Firefox và Safari."
        },
        {
            "question": "Làm cách nào để tối ưu hóa mã nguồn của PCF control?",
            "answer": "Viết code sạch, tái sử dụng component, sử dụng các công cụ lint và formatter, và tối ưu hóa logic xử lý để giảm độ phức tạp."
        },
        {
            "question": "Làm cách nào để xử lý dữ liệu không đồng bộ trong PCF control?",
            "answer": "Sử dụng async/await và Promise trong JavaScript để xử lý các tác vụ không đồng bộ như gọi API và cập nhật state."
        },
        {
            "question": "PCF control có hỗ trợ tính năng drag and drop không?",
            "answer": "Có, bạn có thể tích hợp các thư viện drag and drop hoặc sử dụng HTML5 Drag and Drop API để cho phép kéo thả trong control."
        },
        {
            "question": "Làm cách nào để tích hợp PCF control với Dynamics 365 Customer Engagement?",
            "answer": "Đăng ký PCF control trong solution của Dynamics 365 và cấu hình để hiển thị trên form hoặc view của Customer Engagement."
        },
        {
            "question": "PCF control có hỗ trợ định dạng dữ liệu phức tạp không?",
            "answer": "Có, bạn có thể sử dụng các hàm định dạng và thư viện hỗ trợ để hiển thị dữ liệu phức tạp như biểu đồ, danh sách, và bảng."
        },
        {
            "question": "Làm cách nào để tùy chỉnh giao diện người dùng qua PCF control?",
            "answer": "Sử dụng CSS và các framework UI như Fluent UI để tạo giao diện tùy chỉnh theo yêu cầu doanh nghiệp."
        },
        {
            "question": "PCF control có thể xử lý các tác vụ phân tích dữ liệu không?",
            "answer": "Có, bạn có thể tích hợp các thư viện JavaScript để thực hiện phân tích dữ liệu và hiển thị kết quả trực quan trong control."
        },
        {
            "question": "Làm cách nào để tích hợp PCF control với các công cụ BI?",
            "answer": "PCF control có thể nhúng báo cáo hoặc tương tác với API của các công cụ BI như Power BI để hiển thị dữ liệu phân tích."
        },
        {
            "question": "PCF control có hỗ trợ cập nhật theo thời gian thực không?",
            "answer": "Có, bằng cách sử dụng kỹ thuật polling hoặc WebSocket, PCF control có thể tự động cập nhật nội dung khi dữ liệu thay đổi."
        },
        {
            "question": "Làm cách nào để kiểm soát lỗi và fallback trong PCF control?",
            "answer": "Sử dụng try-catch để bắt lỗi và cung cấp giao diện fallback hoặc thông báo lỗi rõ ràng cho người dùng khi có sự cố."
        },
        {
            "question": "PCF control có hỗ trợ testing automation không?",
            "answer": "Có, bạn có thể sử dụng các framework kiểm thử UI như Jest, React Testing Library để tự động kiểm tra chức năng của control."
        },
        {
            "question": "Làm cách nào để deploy PCF control vào environment production?",
            "answer": "Đóng gói PCF control thành solution, sau đó import vào môi trường production thông qua Power Platform Admin Center hoặc Plugin Registration Tool."
        },
        {
            "question": "Làm cách nào để cấu hình manifest file cho các trường hợp phức tạp trong PCF control?",
            "answer": "Chỉnh sửa manifest file để định nghĩa các properties, events, dữ liệu đầu vào/ra và các tham số bổ sung theo yêu cầu nghiệp vụ."
        },
        {
            "question": "PCF control có hỗ trợ tích hợp với Power Platform Admin Center không?",
            "answer": "Có, vì PCF control là một phần của solution, nó có thể được quản lý, giám sát và cập nhật qua Power Platform Admin Center."
        },
        {
            "question": "Làm cách nào để xử lý và chuyển đổi dữ liệu từ các API bên ngoài trong PCF control?",
            "answer": "Sử dụng các hàm fetch hoặc axios để gọi API, sau đó chuyển đổi dữ liệu bằng JSON.parse và xử lý thông qua React state."
        },
        {
            "question": "Làm cách nào để tạo custom design tokens trong PCF control?",
            "answer": "Định nghĩa các biến CSS và tokens trong file cấu hình để đảm bảo tính nhất quán về màu sắc, font chữ và spacing trên control."
        },
        {
            "question": "PCF control có hỗ trợ tích hợp với Azure Functions không?",
            "answer": "Có, bạn có thể gọi Azure Functions từ PCF control thông qua HTTP requests để thực hiện các tác vụ xử lý backend."
        },
        {
            "question": "Làm cách nào để tối ưu hóa performance rendering trong PCF control?",
            "answer": "Sử dụng kỹ thuật memoization, tối ưu hóa React rendering và giảm số lượng state không cần thiết để cải thiện performance."
        },
        {
            "question": "Làm cách nào để sử dụng CSS Grid trong PCF control để tạo layout phức tạp?",
            "answer": "Áp dụng CSS Grid trong file style của control để tạo layout linh hoạt, sau đó cấu hình các grid template phù hợp."
        },
        {
            "question": "PCF control có hỗ trợ integration với Dynamics 365 Portal không?",
            "answer": "Có, nếu được cấu hình đúng, PCF control có thể được tích hợp và hiển thị trên Dynamics 365 Portal như một phần của giao diện người dùng."
        },
        {
            "question": "Làm cách nào để triển khai các control phụ thuộc lẫn nhau trong PCF?",
            "answer": "Sử dụng SharedVariables hoặc context để chia sẻ dữ liệu giữa các control và đảm bảo thứ tự render đúng logic."
        },
        {
            "question": "Làm cách nào để xử lý sự thay đổi dữ liệu khi người dùng tương tác với PCF control?",
            "answer": "Sử dụng các sự kiện updateView và callback functions để xử lý thay đổi dữ liệu và cập nhật state của control theo thời gian thực."
        },
        {
            "question": "PCF control có hỗ trợ caching dữ liệu không?",
            "answer": "Có, bạn có thể lưu trữ dữ liệu tạm thời trong state hoặc sử dụng bộ nhớ cache của trình duyệt để cải thiện hiệu năng."
        },
        {
            "question": "Làm cách nào để tạo PCF control có khả năng mở rộng tùy chỉnh theo yêu cầu doanh nghiệp?",
            "answer": "Thiết kế control với kiến trúc modular, cho phép cấu hình thông qua manifest file và các tham số đầu vào để đáp ứng nhu cầu thay đổi."
        },
        {
            "question": "PCF control có hỗ trợ chỉnh sửa giao diện theo vai trò người dùng không?",
            "answer": "Có, control có thể kiểm tra thông tin context của người dùng và hiển thị giao diện khác nhau dựa trên quyền và vai trò."
        },
        {
            "question": "Làm cách nào để tạo báo cáo sử dụng dữ liệu từ PCF control?",
            "answer": "PCF control có thể gửi dữ liệu qua outputs cho host app, sau đó tích hợp với Power BI hoặc hệ thống báo cáo để tạo báo cáo chi tiết."
        },
        {
            "question": "PCF control có thể tích hợp với các dịch vụ phân tích thời gian thực không?",
            "answer": "Có, thông qua API của các dịch vụ như Azure Stream Analytics, bạn có thể gửi và nhận dữ liệu thời gian thực từ PCF control."
        },
        {
            "question": "Làm cách nào để xây dựng các control kết hợp nhiều nguồn dữ liệu trong PCF?",
            "answer": "Sử dụng asynchronous calls và hợp nhất dữ liệu từ các API khác nhau, sau đó cập nhật state để hiển thị nội dung hợp nhất."
        },
        {
            "question": "PCF control có hỗ trợ cập nhật tự động khi có thay đổi dữ liệu không?",
            "answer": "Có, bằng cách sử dụng polling hoặc sự kiện đẩy (push events), control có thể tự động cập nhật khi dữ liệu thay đổi."
        },
        {
            "question": "Làm cách nào để tối ưu hóa quá trình render cho các control phức tạp trong PCF?",
            "answer": "Tách component, sử dụng React.memo, và chỉ render lại khi có sự thay đổi thực sự để giảm tải cho quá trình render."
        },
        {
            "question": "PCF control có hỗ trợ các framework kiểm thử UI như Selenium không?",
            "answer": "Mặc dù Selenium không tích hợp trực tiếp với PCF, nhưng bạn có thể sử dụng nó để kiểm thử giao diện người dùng của control khi được triển khai trong ứng dụng Dynamics 365."
        },
        {
            "question": "Làm cách nào để đảm bảo tính bảo mật và tuân thủ khi phát triển PCF control?",
            "answer": "Tuân thủ các hướng dẫn bảo mật của Microsoft, sử dụng HTTPS, validate dữ liệu đầu vào và kiểm tra thường xuyên qua audit."
        }
    ]
}